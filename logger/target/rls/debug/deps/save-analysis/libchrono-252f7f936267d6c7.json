{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.0","compilation":{"directory":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25","program":"C:\\Users\\jfawc\\.rustup\\toolchains\\stable-i686-pc-windows-msvc\\bin\\rls.exe","arguments":["--crate-name","chrono","C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\lib.rs","--json=diagnostic-rendered-ansi","--crate-type","lib","--emit=dep-info,metadata","-C","debuginfo=2","-C","metadata=252f7f936267d6c7","-C","extra-filename=-252f7f936267d6c7","--out-dir","c:\\github\\JimFawcett\\RustBasicDemos\\logger\\target\\rls\\debug\\deps","-L","dependency=c:\\github\\JimFawcett\\RustBasicDemos\\logger\\target\\rls\\debug\\deps","--extern","num=c:\\github\\JimFawcett\\RustBasicDemos\\logger\\target\\rls\\debug\\deps\\libnum-7cdd99fc1c64a953.rmeta","--extern","time=c:\\github\\JimFawcett\\RustBasicDemos\\logger\\target\\rls\\debug\\deps\\libtime-2dc89e21c20f5879.rmeta","--cap-lints","allow","--error-format=json","--sysroot","C:\\Users\\jfawc\\.rustup/toolchains/stable-i686-pc-windows-msvc"],"output":"c:\\github\\JimFawcett\\RustBasicDemos\\logger\\target\\rls\\debug\\deps\\libchrono-252f7f936267d6c7.rmeta"},"prelude":{"crate_id":{"name":"chrono","disambiguator":[11863198983653660970,11945697508247948672]},"crate_root":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src","external_crates":[{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\lib.rs","num":1,"id":{"name":"std","disambiguator":[16767813024619543388,15970181176369099497]}},{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\lib.rs","num":2,"id":{"name":"core","disambiguator":[15493884781544242704,10916431212020240685]}},{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\lib.rs","num":3,"id":{"name":"compiler_builtins","disambiguator":[13800800064131758149,6552388683574802790]}},{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\lib.rs","num":4,"id":{"name":"rustc_std_workspace_core","disambiguator":[858078859117163494,4852275181801050944]}},{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\lib.rs","num":5,"id":{"name":"alloc","disambiguator":[6458282212584196394,3846521131249160049]}},{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\lib.rs","num":6,"id":{"name":"libc","disambiguator":[11726624875331564045,9770428552717860177]}},{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\lib.rs","num":7,"id":{"name":"unwind","disambiguator":[6276486509892160780,14547206095309416454]}},{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\lib.rs","num":8,"id":{"name":"cfg_if","disambiguator":[13523466353829323069,14179835730222902245]}},{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\lib.rs","num":9,"id":{"name":"backtrace","disambiguator":[2150272781779878849,13218600931334606270]}},{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\lib.rs","num":10,"id":{"name":"rustc_demangle","disambiguator":[8496320417642429041,2021603505502524765]}},{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\lib.rs","num":11,"id":{"name":"hashbrown","disambiguator":[3118864489005575385,17199237280960895343]}},{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\lib.rs","num":12,"id":{"name":"rustc_std_workspace_alloc","disambiguator":[13468029874544312979,9715073304312323778]}},{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\lib.rs","num":13,"id":{"name":"panic_unwind","disambiguator":[8914012102573818780,10164690693884881139]}},{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\lib.rs","num":14,"id":{"name":"time","disambiguator":[1512387581082569856,785560948370374521]}},{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\lib.rs","num":15,"id":{"name":"winapi","disambiguator":[6844807264540453175,16019317579129524956]}},{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\lib.rs","num":16,"id":{"name":"num","disambiguator":[13256233470003656113,352996539417568879]}},{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\lib.rs","num":17,"id":{"name":"num_traits","disambiguator":[7587422356441228710,13508096084782847490]}},{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\lib.rs","num":18,"id":{"name":"num_integer","disambiguator":[15391390791682172421,4715494660850741893]}},{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\lib.rs","num":19,"id":{"name":"num_iter","disambiguator":[10074525607328372522,9431325163398207895]}}],"span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\lib.rs","byte_start":125,"byte_end":29317,"line_start":5,"line_end":732,"column_start":1,"column_end":2}},"imports":[{"kind":"Use","ref_id":{"krate":14,"index":298},"span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\lib.rs","byte_start":15723,"byte_end":15731,"line_start":335,"line_end":335,"column_start":19,"column_end":27},"alias_span":null,"name":"Duration","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":64},"span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\lib.rs","byte_start":15750,"byte_end":15758,"line_start":336,"line_end":336,"column_start":18,"column_end":26},"alias_span":null,"name":"TimeZone","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":62},"span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\lib.rs","byte_start":15760,"byte_end":15766,"line_start":336,"line_end":336,"column_start":28,"column_end":34},"alias_span":null,"name":"Offset","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1135},"span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\lib.rs","byte_start":15768,"byte_end":15779,"line_start":336,"line_end":336,"column_start":36,"column_end":47},"alias_span":null,"name":"LocalResult","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1158},"span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\lib.rs","byte_start":15803,"byte_end":15806,"line_start":337,"line_end":337,"column_start":22,"column_end":25},"alias_span":null,"name":"UTC","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1169},"span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\lib.rs","byte_start":15831,"byte_end":15842,"line_start":338,"line_end":338,"column_start":24,"column_end":35},"alias_span":null,"name":"FixedOffset","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1181},"span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\lib.rs","byte_start":15867,"byte_end":15872,"line_start":339,"line_end":339,"column_start":24,"column_end":29},"alias_span":null,"name":"Local","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1186},"span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\lib.rs","byte_start":15895,"byte_end":15904,"line_start":340,"line_end":340,"column_start":22,"column_end":31},"alias_span":null,"name":"NaiveDate","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1251},"span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\lib.rs","byte_start":15927,"byte_end":15936,"line_start":341,"line_end":341,"column_start":22,"column_end":31},"alias_span":null,"name":"NaiveTime","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1276},"span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\lib.rs","byte_start":15963,"byte_end":15976,"line_start":342,"line_end":342,"column_start":26,"column_end":39},"alias_span":null,"name":"NaiveDateTime","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1301},"span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\lib.rs","byte_start":15992,"byte_end":15996,"line_start":343,"line_end":343,"column_start":15,"column_end":19},"alias_span":null,"name":"Date","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1308},"span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\lib.rs","byte_start":16016,"byte_end":16024,"line_start":344,"line_end":344,"column_start":19,"column_end":27},"alias_span":null,"name":"DateTime","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1467},"span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\lib.rs","byte_start":16043,"byte_end":16053,"line_start":345,"line_end":345,"column_start":18,"column_end":28},"alias_span":null,"name":"ParseError","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":874},"span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\lib.rs","byte_start":16055,"byte_end":16066,"line_start":345,"line_end":345,"column_start":30,"column_end":41},"alias_span":null,"name":"ParseResult","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":14,"index":298},"span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\lib.rs","byte_start":16398,"byte_end":16406,"line_start":358,"line_end":358,"column_start":22,"column_end":30},"alias_span":null,"name":"Duration","value":"","parent":{"krate":0,"index":28}},{"kind":"Use","ref_id":{"krate":0,"index":1534},"span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\format\\mod.rs","byte_start":313561,"byte_end":313574,"line_start":17,"line_end":17,"column_start":25,"column_end":38},"alias_span":null,"name":"StrftimeItems","value":"","parent":{"krate":0,"index":852}},{"kind":"Use","ref_id":{"krate":0,"index":1502},"span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\format\\mod.rs","byte_start":313598,"byte_end":313604,"line_start":18,"line_end":18,"column_start":23,"column_end":29},"alias_span":null,"name":"Parsed","value":"","parent":{"krate":0,"index":852}},{"kind":"Use","ref_id":{"krate":0,"index":1060},"span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\format\\mod.rs","byte_start":313627,"byte_end":313632,"line_start":19,"line_end":19,"column_start":22,"column_end":27},"alias_span":null,"name":"parse","value":"","parent":{"krate":0,"index":852}}],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\lib.rs","byte_start":125,"byte_end":29317,"line_start":5,"line_end":732,"column_start":1,"column_end":2},"name":"","qualname":"::","value":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\lib.rs","parent":null,"children":[{"krate":0,"index":1},{"krate":0,"index":2},{"krate":0,"index":3},{"krate":0,"index":4},{"krate":0,"index":5},{"krate":0,"index":6},{"krate":0,"index":10},{"krate":0,"index":11},{"krate":0,"index":12},{"krate":0,"index":13},{"krate":0,"index":14},{"krate":0,"index":15},{"krate":0,"index":16},{"krate":0,"index":17},{"krate":0,"index":18},{"krate":0,"index":21},{"krate":0,"index":22},{"krate":0,"index":28},{"krate":0,"index":30},{"krate":0,"index":177},{"krate":0,"index":555},{"krate":0,"index":687},{"krate":0,"index":852},{"krate":0,"index":1559},{"krate":0,"index":1589},{"krate":0,"index":1590},{"krate":0,"index":1586},{"krate":0,"index":1587},{"krate":0,"index":1585},{"krate":0,"index":1583},{"krate":0,"index":1581},{"krate":0,"index":1095},{"krate":0,"index":1102},{"krate":0,"index":1105},{"krate":0,"index":1124}],"decl_id":null,"docs":" # Chrono 0.2.25","sig":null,"attributes":[{"value":"! # Chrono 0.2.25","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\lib.rs","byte_start":125,"byte_end":144,"line_start":5,"line_end":5,"column_start":1,"column_end":20}},{"value":"!","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\lib.rs","byte_start":145,"byte_end":148,"line_start":6,"line_end":6,"column_start":1,"column_end":4}},{"value":"! Date and time handling for Rust. (also known as `rust-chrono`)","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\lib.rs","byte_start":149,"byte_end":215,"line_start":7,"line_end":7,"column_start":1,"column_end":67}},{"value":"! It aims to be a feature-complete superset of","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\lib.rs","byte_start":216,"byte_end":264,"line_start":8,"line_end":8,"column_start":1,"column_end":49}},{"value":"! the [time](https://github.com/rust-lang-deprecated/time) library.","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\lib.rs","byte_start":265,"byte_end":334,"line_start":9,"line_end":9,"column_start":1,"column_end":70}},{"value":"! In particular,","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\lib.rs","byte_start":335,"byte_end":353,"line_start":10,"line_end":10,"column_start":1,"column_end":19}},{"value":"!","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\lib.rs","byte_start":354,"byte_end":357,"line_start":11,"line_end":11,"column_start":1,"column_end":4}},{"value":"! * Chrono strictly adheres to ISO 8601.","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\lib.rs","byte_start":358,"byte_end":400,"line_start":12,"line_end":12,"column_start":1,"column_end":43}},{"value":"! * Chrono is timezone-aware by default, with separate timezone-naive types.","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\lib.rs","byte_start":401,"byte_end":479,"line_start":13,"line_end":13,"column_start":1,"column_end":79}},{"value":"! * Chrono is space-optimal and (while not being the primary goal) reasonably efficient.","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\lib.rs","byte_start":480,"byte_end":570,"line_start":14,"line_end":14,"column_start":1,"column_end":91}},{"value":"!","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\lib.rs","byte_start":571,"byte_end":574,"line_start":15,"line_end":15,"column_start":1,"column_end":4}},{"value":"! There were several previous attempts to bring a good date and time library to Rust,","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\lib.rs","byte_start":575,"byte_end":662,"line_start":16,"line_end":16,"column_start":1,"column_end":88}},{"value":"! which Chrono builts upon and should acknowledge:","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\lib.rs","byte_start":663,"byte_end":715,"line_start":17,"line_end":17,"column_start":1,"column_end":53}},{"value":"!","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\lib.rs","byte_start":716,"byte_end":719,"line_start":18,"line_end":18,"column_start":1,"column_end":4}},{"value":"! * [Initial research on","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\lib.rs","byte_start":720,"byte_end":746,"line_start":19,"line_end":19,"column_start":1,"column_end":27}},{"value":"!    the wiki](https://github.com/rust-lang/rust-wiki-backup/blob/master/Lib-datetime.md)","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\lib.rs","byte_start":747,"byte_end":838,"line_start":20,"line_end":20,"column_start":1,"column_end":92}},{"value":"! * Dietrich Epp's [datetime-rs](https://github.com/depp/datetime-rs)","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\lib.rs","byte_start":839,"byte_end":910,"line_start":21,"line_end":21,"column_start":1,"column_end":72}},{"value":"! * Luis de Bethencourt's [rust-datetime](https://github.com/luisbg/rust-datetime)","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\lib.rs","byte_start":911,"byte_end":995,"line_start":22,"line_end":22,"column_start":1,"column_end":85}},{"value":"!","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\lib.rs","byte_start":996,"byte_end":999,"line_start":23,"line_end":23,"column_start":1,"column_end":4}},{"value":"! ## Usage","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\lib.rs","byte_start":1000,"byte_end":1012,"line_start":24,"line_end":24,"column_start":1,"column_end":13}},{"value":"!","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\lib.rs","byte_start":1013,"byte_end":1016,"line_start":25,"line_end":25,"column_start":1,"column_end":4}},{"value":"! Put this in your `Cargo.toml`:","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\lib.rs","byte_start":1017,"byte_end":1051,"line_start":26,"line_end":26,"column_start":1,"column_end":35}},{"value":"!","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\lib.rs","byte_start":1052,"byte_end":1055,"line_start":27,"line_end":27,"column_start":1,"column_end":4}},{"value":"! ```toml","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\lib.rs","byte_start":1056,"byte_end":1067,"line_start":28,"line_end":28,"column_start":1,"column_end":12}},{"value":"! [dependencies]","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\lib.rs","byte_start":1068,"byte_end":1086,"line_start":29,"line_end":29,"column_start":1,"column_end":19}},{"value":"! chrono = \"0.2\"","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\lib.rs","byte_start":1087,"byte_end":1105,"line_start":30,"line_end":30,"column_start":1,"column_end":19}},{"value":"! ```","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\lib.rs","byte_start":1106,"byte_end":1113,"line_start":31,"line_end":31,"column_start":1,"column_end":8}},{"value":"!","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\lib.rs","byte_start":1114,"byte_end":1117,"line_start":32,"line_end":32,"column_start":1,"column_end":4}},{"value":"! Or, if you want [Serde](https://github.com/serde-rs/serde) or","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\lib.rs","byte_start":1118,"byte_end":1183,"line_start":33,"line_end":33,"column_start":1,"column_end":66}},{"value":"! [rustc-serialize](https://github.com/rust-lang-nursery/rustc-serialize) support,","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\lib.rs","byte_start":1184,"byte_end":1268,"line_start":34,"line_end":34,"column_start":1,"column_end":85}},{"value":"! include the features like this:","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\lib.rs","byte_start":1269,"byte_end":1304,"line_start":35,"line_end":35,"column_start":1,"column_end":36}},{"value":"!","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\lib.rs","byte_start":1305,"byte_end":1308,"line_start":36,"line_end":36,"column_start":1,"column_end":4}},{"value":"! ```toml","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\lib.rs","byte_start":1309,"byte_end":1320,"line_start":37,"line_end":37,"column_start":1,"column_end":12}},{"value":"! [dependencies]","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\lib.rs","byte_start":1321,"byte_end":1339,"line_start":38,"line_end":38,"column_start":1,"column_end":19}},{"value":"! chrono = { version = \"0.2\", features = [\"serde\", \"rustc-serialize\"] }","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\lib.rs","byte_start":1340,"byte_end":1413,"line_start":39,"line_end":39,"column_start":1,"column_end":74}},{"value":"! ```","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\lib.rs","byte_start":1414,"byte_end":1421,"line_start":40,"line_end":40,"column_start":1,"column_end":8}},{"value":"!","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\lib.rs","byte_start":1422,"byte_end":1425,"line_start":41,"line_end":41,"column_start":1,"column_end":4}},{"value":"! Then put this in your crate root:","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\lib.rs","byte_start":1426,"byte_end":1463,"line_start":42,"line_end":42,"column_start":1,"column_end":38}},{"value":"!","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\lib.rs","byte_start":1464,"byte_end":1467,"line_start":43,"line_end":43,"column_start":1,"column_end":4}},{"value":"! ```rust","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\lib.rs","byte_start":1468,"byte_end":1479,"line_start":44,"line_end":44,"column_start":1,"column_end":12}},{"value":"! extern crate chrono;","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\lib.rs","byte_start":1480,"byte_end":1504,"line_start":45,"line_end":45,"column_start":1,"column_end":25}},{"value":"! ```","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\lib.rs","byte_start":1505,"byte_end":1512,"line_start":46,"line_end":46,"column_start":1,"column_end":8}},{"value":"!","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\lib.rs","byte_start":1513,"byte_end":1516,"line_start":47,"line_end":47,"column_start":1,"column_end":4}},{"value":"! ## Overview","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\lib.rs","byte_start":1517,"byte_end":1532,"line_start":48,"line_end":48,"column_start":1,"column_end":16}},{"value":"!","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\lib.rs","byte_start":1533,"byte_end":1536,"line_start":49,"line_end":49,"column_start":1,"column_end":4}},{"value":"! ### Duration","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\lib.rs","byte_start":1537,"byte_end":1553,"line_start":50,"line_end":50,"column_start":1,"column_end":17}},{"value":"!","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\lib.rs","byte_start":1554,"byte_end":1557,"line_start":51,"line_end":51,"column_start":1,"column_end":4}},{"value":"! [**`Duration`**](./struct.Duration.html)","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\lib.rs","byte_start":1558,"byte_end":1602,"line_start":52,"line_end":52,"column_start":1,"column_end":45}},{"value":"! represents the magnitude of a time span. `Duration` used to be provided by Chrono.","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\lib.rs","byte_start":1603,"byte_end":1689,"line_start":53,"line_end":53,"column_start":1,"column_end":87}},{"value":"! It has been moved to the `time` crate as the","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\lib.rs","byte_start":1690,"byte_end":1738,"line_start":54,"line_end":54,"column_start":1,"column_end":49}},{"value":"! [`time::Duration`](https://doc.rust-lang.org/time/time/struct.Duration.html) type, but is","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\lib.rs","byte_start":1739,"byte_end":1832,"line_start":55,"line_end":55,"column_start":1,"column_end":94}},{"value":"! still re-exported from Chrono.","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\lib.rs","byte_start":1833,"byte_end":1867,"line_start":56,"line_end":56,"column_start":1,"column_end":35}},{"value":"!","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\lib.rs","byte_start":1868,"byte_end":1871,"line_start":57,"line_end":57,"column_start":1,"column_end":4}},{"value":"! ### Date and Time","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\lib.rs","byte_start":1872,"byte_end":1893,"line_start":58,"line_end":58,"column_start":1,"column_end":22}},{"value":"!","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\lib.rs","byte_start":1894,"byte_end":1897,"line_start":59,"line_end":59,"column_start":1,"column_end":4}},{"value":"! Chrono provides a","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\lib.rs","byte_start":1898,"byte_end":1919,"line_start":60,"line_end":60,"column_start":1,"column_end":22}},{"value":"! [**`DateTime`**](./datetime/struct.DateTime.html)","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\lib.rs","byte_start":1920,"byte_end":1973,"line_start":61,"line_end":61,"column_start":1,"column_end":54}},{"value":"! type to represent a date and a time in a timezone.","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\lib.rs","byte_start":1974,"byte_end":2028,"line_start":62,"line_end":62,"column_start":1,"column_end":55}},{"value":"!","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\lib.rs","byte_start":2029,"byte_end":2032,"line_start":63,"line_end":63,"column_start":1,"column_end":4}},{"value":"! For more abstract moment-in-time tracking such as internal timekeeping","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\lib.rs","byte_start":2033,"byte_end":2107,"line_start":64,"line_end":64,"column_start":1,"column_end":75}},{"value":"! that is unconcerned with timezones, consider","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\lib.rs","byte_start":2108,"byte_end":2156,"line_start":65,"line_end":65,"column_start":1,"column_end":49}},{"value":"! [`time::SystemTime`](https://doc.rust-lang.org/std/time/struct.SystemTime.html),","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\lib.rs","byte_start":2157,"byte_end":2241,"line_start":66,"line_end":66,"column_start":1,"column_end":85}},{"value":"! which tracks your system clock, or","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\lib.rs","byte_start":2242,"byte_end":2280,"line_start":67,"line_end":67,"column_start":1,"column_end":39}},{"value":"! [`time::Instant`](https://doc.rust-lang.org/std/time/struct.Instant.html), which","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\lib.rs","byte_start":2281,"byte_end":2365,"line_start":68,"line_end":68,"column_start":1,"column_end":85}},{"value":"! is an opaque but monotonically-increasing representation of a moment in time.","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\lib.rs","byte_start":2366,"byte_end":2447,"line_start":69,"line_end":69,"column_start":1,"column_end":82}},{"value":"!","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\lib.rs","byte_start":2448,"byte_end":2451,"line_start":70,"line_end":70,"column_start":1,"column_end":4}},{"value":"! `DateTime` is timezone-aware and must be constructed from","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\lib.rs","byte_start":2452,"byte_end":2513,"line_start":71,"line_end":71,"column_start":1,"column_end":62}},{"value":"! the [**`TimeZone`**](./offset/trait.TimeZone.html) object,","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\lib.rs","byte_start":2514,"byte_end":2576,"line_start":72,"line_end":72,"column_start":1,"column_end":63}},{"value":"! which defines how the local date is converted to and back from the UTC date.","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\lib.rs","byte_start":2577,"byte_end":2657,"line_start":73,"line_end":73,"column_start":1,"column_end":81}},{"value":"! There are three well-known `TimeZone` implementations:","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\lib.rs","byte_start":2658,"byte_end":2716,"line_start":74,"line_end":74,"column_start":1,"column_end":59}},{"value":"!","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\lib.rs","byte_start":2717,"byte_end":2720,"line_start":75,"line_end":75,"column_start":1,"column_end":4}},{"value":"! * [**`UTC`**](./offset/utc/struct.UTC.html) specifies the UTC time zone. It is most efficient.","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\lib.rs","byte_start":2721,"byte_end":2819,"line_start":76,"line_end":76,"column_start":1,"column_end":99}},{"value":"!","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\lib.rs","byte_start":2820,"byte_end":2823,"line_start":77,"line_end":77,"column_start":1,"column_end":4}},{"value":"! * [**`Local`**](./offset/local/struct.Local.html) specifies the system local time zone.","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\lib.rs","byte_start":2824,"byte_end":2915,"line_start":78,"line_end":78,"column_start":1,"column_end":92}},{"value":"!","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\lib.rs","byte_start":2916,"byte_end":2919,"line_start":79,"line_end":79,"column_start":1,"column_end":4}},{"value":"! * [**`FixedOffset`**](./offset/fixed/struct.FixedOffset.html) specifies","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\lib.rs","byte_start":2920,"byte_end":2995,"line_start":80,"line_end":80,"column_start":1,"column_end":76}},{"value":"!   an arbitrary, fixed time zone such as UTC+09:00 or UTC-10:30.","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\lib.rs","byte_start":2996,"byte_end":3063,"line_start":81,"line_end":81,"column_start":1,"column_end":68}},{"value":"!   This often results from the parsed textual date and time.","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\lib.rs","byte_start":3064,"byte_end":3127,"line_start":82,"line_end":82,"column_start":1,"column_end":64}},{"value":"!   Since it stores the most information and does not depend on the system environment,","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\lib.rs","byte_start":3128,"byte_end":3217,"line_start":83,"line_end":83,"column_start":1,"column_end":90}},{"value":"!   you would want to normalize other `TimeZone`s into this type.","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\lib.rs","byte_start":3218,"byte_end":3285,"line_start":84,"line_end":84,"column_start":1,"column_end":68}},{"value":"!","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\lib.rs","byte_start":3286,"byte_end":3289,"line_start":85,"line_end":85,"column_start":1,"column_end":4}},{"value":"! `DateTime`s with different `TimeZone` types are distinct and do not mix,","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\lib.rs","byte_start":3290,"byte_end":3366,"line_start":86,"line_end":86,"column_start":1,"column_end":77}},{"value":"! but can be converted to each other using","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\lib.rs","byte_start":3367,"byte_end":3411,"line_start":87,"line_end":87,"column_start":1,"column_end":45}},{"value":"! the [`DateTime::with_timezone`](./datetime/struct.DateTime.html#method.with_timezone) method.","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\lib.rs","byte_start":3412,"byte_end":3509,"line_start":88,"line_end":88,"column_start":1,"column_end":98}},{"value":"!","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\lib.rs","byte_start":3510,"byte_end":3513,"line_start":89,"line_end":89,"column_start":1,"column_end":4}},{"value":"! You can get the current date and time in the UTC time zone","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\lib.rs","byte_start":3514,"byte_end":3576,"line_start":90,"line_end":90,"column_start":1,"column_end":63}},{"value":"! ([`UTC::now()`](./offset/utc/struct.UTC.html#method.now))","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\lib.rs","byte_start":3577,"byte_end":3638,"line_start":91,"line_end":91,"column_start":1,"column_end":62}},{"value":"! or in the local time zone","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\lib.rs","byte_start":3639,"byte_end":3668,"line_start":92,"line_end":92,"column_start":1,"column_end":30}},{"value":"! ([`Local::now()`](./offset/local/struct.Local.html#method.now)).","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\lib.rs","byte_start":3669,"byte_end":3737,"line_start":93,"line_end":93,"column_start":1,"column_end":69}},{"value":"!","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\lib.rs","byte_start":3738,"byte_end":3741,"line_start":94,"line_end":94,"column_start":1,"column_end":4}},{"value":"! ~~~~ {.rust}","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\lib.rs","byte_start":3742,"byte_end":3758,"line_start":95,"line_end":95,"column_start":1,"column_end":17}},{"value":"! use chrono::*;","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\lib.rs","byte_start":3759,"byte_end":3777,"line_start":96,"line_end":96,"column_start":1,"column_end":19}},{"value":"!","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\lib.rs","byte_start":3778,"byte_end":3781,"line_start":97,"line_end":97,"column_start":1,"column_end":4}},{"value":"! let utc: DateTime<UTC> = UTC::now();       // e.g. `2014-11-28T12:45:59.324310806Z`","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\lib.rs","byte_start":3782,"byte_end":3869,"line_start":98,"line_end":98,"column_start":1,"column_end":88}},{"value":"! let local: DateTime<Local> = Local::now(); // e.g. `2014-11-28T21:45:59.324310806+09:00`","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\lib.rs","byte_start":3870,"byte_end":3962,"line_start":99,"line_end":99,"column_start":1,"column_end":93}},{"value":"! # let _ = utc; let _ = local;","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\lib.rs","byte_start":3963,"byte_end":3996,"line_start":100,"line_end":100,"column_start":1,"column_end":34}},{"value":"! ~~~~","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\lib.rs","byte_start":3997,"byte_end":4005,"line_start":101,"line_end":101,"column_start":1,"column_end":9}},{"value":"!","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\lib.rs","byte_start":4006,"byte_end":4009,"line_start":102,"line_end":102,"column_start":1,"column_end":4}},{"value":"! Alternatively, you can create your own date and time.","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\lib.rs","byte_start":4010,"byte_end":4067,"line_start":103,"line_end":103,"column_start":1,"column_end":58}},{"value":"! This is a bit verbose due to Rust's lack of function and method overloading,","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\lib.rs","byte_start":4068,"byte_end":4148,"line_start":104,"line_end":104,"column_start":1,"column_end":81}},{"value":"! but in turn we get a rich combination of initialization methods.","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\lib.rs","byte_start":4149,"byte_end":4217,"line_start":105,"line_end":105,"column_start":1,"column_end":69}},{"value":"!","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\lib.rs","byte_start":4218,"byte_end":4221,"line_start":106,"line_end":106,"column_start":1,"column_end":4}},{"value":"! ~~~~ {.rust}","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\lib.rs","byte_start":4222,"byte_end":4238,"line_start":107,"line_end":107,"column_start":1,"column_end":17}},{"value":"! use chrono::*;","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\lib.rs","byte_start":4239,"byte_end":4257,"line_start":108,"line_end":108,"column_start":1,"column_end":19}},{"value":"!","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\lib.rs","byte_start":4258,"byte_end":4261,"line_start":109,"line_end":109,"column_start":1,"column_end":4}},{"value":"! let dt = UTC.ymd(2014, 7, 8).and_hms(9, 10, 11); // `2014-07-08T09:10:11Z`","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\lib.rs","byte_start":4262,"byte_end":4340,"line_start":110,"line_end":110,"column_start":1,"column_end":79}},{"value":"! // July 8 is 188th day of the year 2014 (`o` for \"ordinal\")","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\lib.rs","byte_start":4341,"byte_end":4404,"line_start":111,"line_end":111,"column_start":1,"column_end":64}},{"value":"! assert_eq!(dt, UTC.yo(2014, 189).and_hms(9, 10, 11));","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\lib.rs","byte_start":4405,"byte_end":4462,"line_start":112,"line_end":112,"column_start":1,"column_end":58}},{"value":"! // July 8 is Tuesday in ISO week 28 of the year 2014.","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\lib.rs","byte_start":4463,"byte_end":4520,"line_start":113,"line_end":113,"column_start":1,"column_end":58}},{"value":"! assert_eq!(dt, UTC.isoywd(2014, 28, Weekday::Tue).and_hms(9, 10, 11));","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\lib.rs","byte_start":4521,"byte_end":4595,"line_start":114,"line_end":114,"column_start":1,"column_end":75}},{"value":"!","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\lib.rs","byte_start":4596,"byte_end":4599,"line_start":115,"line_end":115,"column_start":1,"column_end":4}},{"value":"! let dt = UTC.ymd(2014, 7, 8).and_hms_milli(9, 10, 11, 12); // `2014-07-08T09:10:11.012Z`","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\lib.rs","byte_start":4600,"byte_end":4692,"line_start":116,"line_end":116,"column_start":1,"column_end":93}},{"value":"! assert_eq!(dt, UTC.ymd(2014, 7, 8).and_hms_micro(9, 10, 11, 12_000));","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\lib.rs","byte_start":4693,"byte_end":4766,"line_start":117,"line_end":117,"column_start":1,"column_end":74}},{"value":"! assert_eq!(dt, UTC.ymd(2014, 7, 8).and_hms_nano(9, 10, 11, 12_000_000));","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\lib.rs","byte_start":4767,"byte_end":4843,"line_start":118,"line_end":118,"column_start":1,"column_end":77}},{"value":"!","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\lib.rs","byte_start":4844,"byte_end":4847,"line_start":119,"line_end":119,"column_start":1,"column_end":4}},{"value":"! // dynamic verification","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\lib.rs","byte_start":4848,"byte_end":4875,"line_start":120,"line_end":120,"column_start":1,"column_end":28}},{"value":"! assert_eq!(UTC.ymd_opt(2014, 7, 8).and_hms_opt(21, 15, 33),","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\lib.rs","byte_start":4876,"byte_end":4939,"line_start":121,"line_end":121,"column_start":1,"column_end":64}},{"value":"!            LocalResult::Single(UTC.ymd(2014, 7, 8).and_hms(21, 15, 33)));","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\lib.rs","byte_start":4940,"byte_end":5017,"line_start":122,"line_end":122,"column_start":1,"column_end":78}},{"value":"! assert_eq!(UTC.ymd_opt(2014, 7, 8).and_hms_opt(80, 15, 33), LocalResult::None);","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\lib.rs","byte_start":5018,"byte_end":5101,"line_start":123,"line_end":123,"column_start":1,"column_end":84}},{"value":"! assert_eq!(UTC.ymd_opt(2014, 7, 38).and_hms_opt(21, 15, 33), LocalResult::None);","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\lib.rs","byte_start":5102,"byte_end":5186,"line_start":124,"line_end":124,"column_start":1,"column_end":85}},{"value":"!","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\lib.rs","byte_start":5187,"byte_end":5190,"line_start":125,"line_end":125,"column_start":1,"column_end":4}},{"value":"! // other time zone objects can be used to construct a local datetime.","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\lib.rs","byte_start":5191,"byte_end":5264,"line_start":126,"line_end":126,"column_start":1,"column_end":74}},{"value":"! // obviously, `local_dt` is normally different from `dt`, but `fixed_dt` should be identical.","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\lib.rs","byte_start":5265,"byte_end":5362,"line_start":127,"line_end":127,"column_start":1,"column_end":98}},{"value":"! let local_dt = Local.ymd(2014, 7, 8).and_hms_milli(9, 10, 11, 12);","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\lib.rs","byte_start":5363,"byte_end":5433,"line_start":128,"line_end":128,"column_start":1,"column_end":71}},{"value":"! let fixed_dt = FixedOffset::east(9 * 3600).ymd(2014, 7, 8).and_hms_milli(18, 10, 11, 12);","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\lib.rs","byte_start":5434,"byte_end":5527,"line_start":129,"line_end":129,"column_start":1,"column_end":94}},{"value":"! assert_eq!(dt, fixed_dt);","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\lib.rs","byte_start":5528,"byte_end":5557,"line_start":130,"line_end":130,"column_start":1,"column_end":30}},{"value":"! # let _ = local_dt;","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\lib.rs","byte_start":5558,"byte_end":5581,"line_start":131,"line_end":131,"column_start":1,"column_end":24}},{"value":"! ~~~~","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\lib.rs","byte_start":5582,"byte_end":5590,"line_start":132,"line_end":132,"column_start":1,"column_end":9}},{"value":"!","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\lib.rs","byte_start":5591,"byte_end":5594,"line_start":133,"line_end":133,"column_start":1,"column_end":4}},{"value":"! Various properties are available to the date and time, and can be altered individually.","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\lib.rs","byte_start":5595,"byte_end":5686,"line_start":134,"line_end":134,"column_start":1,"column_end":92}},{"value":"! Most of them are defined in the traits [`Datelike`](./trait.Datelike.html) and","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\lib.rs","byte_start":5687,"byte_end":5769,"line_start":135,"line_end":135,"column_start":1,"column_end":83}},{"value":"! [`Timelike`](./trait.Timelike.html) which you should `use` before.","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\lib.rs","byte_start":5770,"byte_end":5840,"line_start":136,"line_end":136,"column_start":1,"column_end":71}},{"value":"! Addition and subtraction is also supported.","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\lib.rs","byte_start":5841,"byte_end":5888,"line_start":137,"line_end":137,"column_start":1,"column_end":48}},{"value":"! The following illustrates most supported operations to the date and time:","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\lib.rs","byte_start":5889,"byte_end":5966,"line_start":138,"line_end":138,"column_start":1,"column_end":78}},{"value":"!","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\lib.rs","byte_start":5967,"byte_end":5970,"line_start":139,"line_end":139,"column_start":1,"column_end":4}},{"value":"! ~~~~ {.rust}","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\lib.rs","byte_start":5971,"byte_end":5987,"line_start":140,"line_end":140,"column_start":1,"column_end":17}},{"value":"! use chrono::*;","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\lib.rs","byte_start":5988,"byte_end":6006,"line_start":141,"line_end":141,"column_start":1,"column_end":19}},{"value":"!","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\lib.rs","byte_start":6007,"byte_end":6010,"line_start":142,"line_end":142,"column_start":1,"column_end":4}},{"value":"! # /* we intentionally fake the datetime...","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\lib.rs","byte_start":6011,"byte_end":6057,"line_start":143,"line_end":143,"column_start":1,"column_end":47}},{"value":"! // assume this returned `2014-11-28T21:45:59.324310806+09:00`:","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\lib.rs","byte_start":6058,"byte_end":6124,"line_start":144,"line_end":144,"column_start":1,"column_end":67}},{"value":"! let dt = Local::now();","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\lib.rs","byte_start":6125,"byte_end":6151,"line_start":145,"line_end":145,"column_start":1,"column_end":27}},{"value":"! # */ // up to here. we now define a fixed datetime for the illustrative purpose.","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\lib.rs","byte_start":6152,"byte_end":6236,"line_start":146,"line_end":146,"column_start":1,"column_end":85}},{"value":"! # let dt = FixedOffset::east(9*3600).ymd(2014, 11, 28).and_hms_nano(21, 45, 59, 324310806);","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\lib.rs","byte_start":6237,"byte_end":6332,"line_start":147,"line_end":147,"column_start":1,"column_end":96}},{"value":"!","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\lib.rs","byte_start":6333,"byte_end":6336,"line_start":148,"line_end":148,"column_start":1,"column_end":4}},{"value":"! // property accessors","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\lib.rs","byte_start":6337,"byte_end":6362,"line_start":149,"line_end":149,"column_start":1,"column_end":26}},{"value":"! assert_eq!((dt.year(), dt.month(), dt.day()), (2014, 11, 28));","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\lib.rs","byte_start":6363,"byte_end":6429,"line_start":150,"line_end":150,"column_start":1,"column_end":67}},{"value":"! assert_eq!((dt.month0(), dt.day0()), (10, 27)); // for unfortunate souls","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\lib.rs","byte_start":6430,"byte_end":6506,"line_start":151,"line_end":151,"column_start":1,"column_end":77}},{"value":"! assert_eq!((dt.hour(), dt.minute(), dt.second()), (21, 45, 59));","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\lib.rs","byte_start":6507,"byte_end":6575,"line_start":152,"line_end":152,"column_start":1,"column_end":69}},{"value":"! assert_eq!(dt.weekday(), Weekday::Fri);","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\lib.rs","byte_start":6576,"byte_end":6619,"line_start":153,"line_end":153,"column_start":1,"column_end":44}},{"value":"! assert_eq!(dt.weekday().number_from_monday(), 5); // Mon=1, ..., Sat=7","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\lib.rs","byte_start":6620,"byte_end":6694,"line_start":154,"line_end":154,"column_start":1,"column_end":75}},{"value":"! assert_eq!(dt.ordinal(), 332); // the day of year","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\lib.rs","byte_start":6695,"byte_end":6748,"line_start":155,"line_end":155,"column_start":1,"column_end":54}},{"value":"! assert_eq!(dt.num_days_from_ce(), 735565); // the number of days from and including Jan 1, 1","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\lib.rs","byte_start":6749,"byte_end":6845,"line_start":156,"line_end":156,"column_start":1,"column_end":97}},{"value":"!","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\lib.rs","byte_start":6846,"byte_end":6849,"line_start":157,"line_end":157,"column_start":1,"column_end":4}},{"value":"! // time zone accessor and manipulation","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\lib.rs","byte_start":6850,"byte_end":6892,"line_start":158,"line_end":158,"column_start":1,"column_end":43}},{"value":"! assert_eq!(dt.offset().local_minus_utc(), Duration::hours(9));","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\lib.rs","byte_start":6893,"byte_end":6959,"line_start":159,"line_end":159,"column_start":1,"column_end":67}},{"value":"! assert_eq!(dt.timezone(), FixedOffset::east(9 * 3600));","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\lib.rs","byte_start":6960,"byte_end":7019,"line_start":160,"line_end":160,"column_start":1,"column_end":60}},{"value":"! assert_eq!(dt.with_timezone(&UTC), UTC.ymd(2014, 11, 28).and_hms_nano(12, 45, 59, 324310806));","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\lib.rs","byte_start":7020,"byte_end":7118,"line_start":161,"line_end":161,"column_start":1,"column_end":99}},{"value":"!","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\lib.rs","byte_start":7119,"byte_end":7122,"line_start":162,"line_end":162,"column_start":1,"column_end":4}},{"value":"! // a sample of property manipulations (validates dynamically)","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\lib.rs","byte_start":7123,"byte_end":7188,"line_start":163,"line_end":163,"column_start":1,"column_end":66}},{"value":"! assert_eq!(dt.with_day(29).unwrap().weekday(), Weekday::Sat); // 2014-11-29 is Saturday","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\lib.rs","byte_start":7189,"byte_end":7280,"line_start":164,"line_end":164,"column_start":1,"column_end":92}},{"value":"! assert_eq!(dt.with_day(32), None);","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\lib.rs","byte_start":7281,"byte_end":7319,"line_start":165,"line_end":165,"column_start":1,"column_end":39}},{"value":"! assert_eq!(dt.with_year(-300).unwrap().num_days_from_ce(), -109606); // November 29, 301 BCE","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\lib.rs","byte_start":7320,"byte_end":7416,"line_start":166,"line_end":166,"column_start":1,"column_end":97}},{"value":"!","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\lib.rs","byte_start":7417,"byte_end":7420,"line_start":167,"line_end":167,"column_start":1,"column_end":4}},{"value":"! // arithmetic operations","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\lib.rs","byte_start":7421,"byte_end":7449,"line_start":168,"line_end":168,"column_start":1,"column_end":29}},{"value":"! assert_eq!(UTC.ymd(2014, 11, 14).and_hms(8, 9, 10) - UTC.ymd(2014, 11, 14).and_hms(10, 9, 8),","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\lib.rs","byte_start":7450,"byte_end":7547,"line_start":169,"line_end":169,"column_start":1,"column_end":98}},{"value":"!            Duration::seconds(-2 * 3600 + 2));","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\lib.rs","byte_start":7548,"byte_end":7597,"line_start":170,"line_end":170,"column_start":1,"column_end":50}},{"value":"! assert_eq!(UTC.ymd(1970, 1, 1).and_hms(0, 0, 0) + Duration::seconds(1_000_000_000),","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\lib.rs","byte_start":7598,"byte_end":7685,"line_start":171,"line_end":171,"column_start":1,"column_end":88}},{"value":"!            UTC.ymd(2001, 9, 9).and_hms(1, 46, 40));","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\lib.rs","byte_start":7686,"byte_end":7741,"line_start":172,"line_end":172,"column_start":1,"column_end":56}},{"value":"! assert_eq!(UTC.ymd(1970, 1, 1).and_hms(0, 0, 0) - Duration::seconds(1_000_000_000),","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\lib.rs","byte_start":7742,"byte_end":7829,"line_start":173,"line_end":173,"column_start":1,"column_end":88}},{"value":"!            UTC.ymd(1938, 4, 24).and_hms(22, 13, 20));","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\lib.rs","byte_start":7830,"byte_end":7887,"line_start":174,"line_end":174,"column_start":1,"column_end":58}},{"value":"! ~~~~","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\lib.rs","byte_start":7888,"byte_end":7896,"line_start":175,"line_end":175,"column_start":1,"column_end":9}},{"value":"!","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\lib.rs","byte_start":7897,"byte_end":7900,"line_start":176,"line_end":176,"column_start":1,"column_end":4}},{"value":"! Formatting is done via the [`format`](./datetime/struct.DateTime.html#method.format) method,","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\lib.rs","byte_start":7901,"byte_end":7997,"line_start":177,"line_end":177,"column_start":1,"column_end":97}},{"value":"! which format is equivalent to the familiar `strftime` format.","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\lib.rs","byte_start":7998,"byte_end":8063,"line_start":178,"line_end":178,"column_start":1,"column_end":66}},{"value":"! (See the [`format::strftime` module documentation](./format/strftime/index.html#specifiers)","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\lib.rs","byte_start":8064,"byte_end":8159,"line_start":179,"line_end":179,"column_start":1,"column_end":96}},{"value":"! for full syntax.)","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\lib.rs","byte_start":8160,"byte_end":8181,"line_start":180,"line_end":180,"column_start":1,"column_end":22}},{"value":"!","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\lib.rs","byte_start":8182,"byte_end":8185,"line_start":181,"line_end":181,"column_start":1,"column_end":4}},{"value":"! The default `to_string` method and `{:?}` specifier also give a reasonable representation.","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\lib.rs","byte_start":8186,"byte_end":8280,"line_start":182,"line_end":182,"column_start":1,"column_end":95}},{"value":"! Chrono also provides [`to_rfc2822`](./datetime/struct.DateTime.html#method.to_rfc2822) and","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\lib.rs","byte_start":8281,"byte_end":8375,"line_start":183,"line_end":183,"column_start":1,"column_end":95}},{"value":"! [`to_rfc3339`](./datetime/struct.DateTime.html#method.to_rfc3339) methods","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\lib.rs","byte_start":8376,"byte_end":8453,"line_start":184,"line_end":184,"column_start":1,"column_end":78}},{"value":"! for well-known formats.","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\lib.rs","byte_start":8454,"byte_end":8481,"line_start":185,"line_end":185,"column_start":1,"column_end":28}},{"value":"!","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\lib.rs","byte_start":8482,"byte_end":8485,"line_start":186,"line_end":186,"column_start":1,"column_end":4}},{"value":"! ~~~~ {.rust}","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\lib.rs","byte_start":8486,"byte_end":8502,"line_start":187,"line_end":187,"column_start":1,"column_end":17}},{"value":"! use chrono::*;","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\lib.rs","byte_start":8503,"byte_end":8521,"line_start":188,"line_end":188,"column_start":1,"column_end":19}},{"value":"!","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\lib.rs","byte_start":8522,"byte_end":8525,"line_start":189,"line_end":189,"column_start":1,"column_end":4}},{"value":"! let dt = UTC.ymd(2014, 11, 28).and_hms(12, 0, 9);","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\lib.rs","byte_start":8526,"byte_end":8579,"line_start":190,"line_end":190,"column_start":1,"column_end":54}},{"value":"! assert_eq!(dt.format(\"%Y-%m-%d %H:%M:%S\").to_string(), \"2014-11-28 12:00:09\");","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\lib.rs","byte_start":8580,"byte_end":8662,"line_start":191,"line_end":191,"column_start":1,"column_end":83}},{"value":"! assert_eq!(dt.format(\"%a %b %e %T %Y\").to_string(), \"Fri Nov 28 12:00:09 2014\");","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\lib.rs","byte_start":8663,"byte_end":8747,"line_start":192,"line_end":192,"column_start":1,"column_end":85}},{"value":"! assert_eq!(dt.format(\"%a %b %e %T %Y\").to_string(), dt.format(\"%c\").to_string());","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\lib.rs","byte_start":8748,"byte_end":8833,"line_start":193,"line_end":193,"column_start":1,"column_end":86}},{"value":"!","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\lib.rs","byte_start":8834,"byte_end":8837,"line_start":194,"line_end":194,"column_start":1,"column_end":4}},{"value":"! assert_eq!(dt.to_string(), \"2014-11-28 12:00:09 UTC\");","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\lib.rs","byte_start":8838,"byte_end":8896,"line_start":195,"line_end":195,"column_start":1,"column_end":59}},{"value":"! assert_eq!(dt.to_rfc2822(), \"Fri, 28 Nov 2014 12:00:09 +0000\");","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\lib.rs","byte_start":8897,"byte_end":8964,"line_start":196,"line_end":196,"column_start":1,"column_end":68}},{"value":"! assert_eq!(dt.to_rfc3339(), \"2014-11-28T12:00:09+00:00\");","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\lib.rs","byte_start":8965,"byte_end":9026,"line_start":197,"line_end":197,"column_start":1,"column_end":62}},{"value":"! assert_eq!(format!(\"{:?}\", dt), \"2014-11-28T12:00:09Z\");","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\lib.rs","byte_start":9027,"byte_end":9087,"line_start":198,"line_end":198,"column_start":1,"column_end":61}},{"value":"! ~~~~","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\lib.rs","byte_start":9088,"byte_end":9096,"line_start":199,"line_end":199,"column_start":1,"column_end":9}},{"value":"!","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\lib.rs","byte_start":9097,"byte_end":9100,"line_start":200,"line_end":200,"column_start":1,"column_end":4}},{"value":"! Parsing can be done with three methods:","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\lib.rs","byte_start":9101,"byte_end":9144,"line_start":201,"line_end":201,"column_start":1,"column_end":44}},{"value":"!","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\lib.rs","byte_start":9145,"byte_end":9148,"line_start":202,"line_end":202,"column_start":1,"column_end":4}},{"value":"! 1. The standard [`FromStr`](https://doc.rust-lang.org/std/str/trait.FromStr.html) trait","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\lib.rs","byte_start":9149,"byte_end":9240,"line_start":203,"line_end":203,"column_start":1,"column_end":92}},{"value":"!    (and [`parse`](https://doc.rust-lang.org/std/primitive.str.html#method.parse) method","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\lib.rs","byte_start":9241,"byte_end":9332,"line_start":204,"line_end":204,"column_start":1,"column_end":92}},{"value":"!    on a string) can be used for parsing `DateTime<FixedOffset>`, `DateTime<UTC>` and","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\lib.rs","byte_start":9333,"byte_end":9421,"line_start":205,"line_end":205,"column_start":1,"column_end":89}},{"value":"!    `DateTime<Local>` values. This parses what the `{:?}`","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\lib.rs","byte_start":9422,"byte_end":9482,"line_start":206,"line_end":206,"column_start":1,"column_end":61}},{"value":"!    ([`std::fmt::Debug`](https://doc.rust-lang.org/std/fmt/trait.Debug.html))","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\lib.rs","byte_start":9483,"byte_end":9563,"line_start":207,"line_end":207,"column_start":1,"column_end":81}},{"value":"!    format specifier prints, and requires the offset to be present.","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\lib.rs","byte_start":9564,"byte_end":9634,"line_start":208,"line_end":208,"column_start":1,"column_end":71}},{"value":"!","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\lib.rs","byte_start":9635,"byte_end":9638,"line_start":209,"line_end":209,"column_start":1,"column_end":4}},{"value":"! 2. [`DateTime::parse_from_str`](./datetime/struct.DateTime.html#method.parse_from_str) parses","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\lib.rs","byte_start":9639,"byte_end":9736,"line_start":210,"line_end":210,"column_start":1,"column_end":98}},{"value":"!    a date and time with offsets and returns `DateTime<FixedOffset>`.","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\lib.rs","byte_start":9737,"byte_end":9809,"line_start":211,"line_end":211,"column_start":1,"column_end":73}},{"value":"!    This should be used when the offset is a part of input and the caller cannot guess that.","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\lib.rs","byte_start":9810,"byte_end":9905,"line_start":212,"line_end":212,"column_start":1,"column_end":96}},{"value":"!    It *cannot* be used when the offset can be missing.","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\lib.rs","byte_start":9906,"byte_end":9964,"line_start":213,"line_end":213,"column_start":1,"column_end":59}},{"value":"!    [`DateTime::parse_from_rfc2822`](./datetime/struct.DateTime.html#method.parse_from_rfc2822)","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\lib.rs","byte_start":9965,"byte_end":10063,"line_start":214,"line_end":214,"column_start":1,"column_end":99}},{"value":"!    and","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\lib.rs","byte_start":10064,"byte_end":10074,"line_start":215,"line_end":215,"column_start":1,"column_end":11}},{"value":"!    [`DateTime::parse_from_rfc3339`](./datetime/struct.DateTime.html#method.parse_from_rfc3339)","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\lib.rs","byte_start":10075,"byte_end":10173,"line_start":216,"line_end":216,"column_start":1,"column_end":99}},{"value":"!    are similar but for well-known formats.","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\lib.rs","byte_start":10174,"byte_end":10220,"line_start":217,"line_end":217,"column_start":1,"column_end":47}},{"value":"!","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\lib.rs","byte_start":10221,"byte_end":10224,"line_start":218,"line_end":218,"column_start":1,"column_end":4}},{"value":"! 3. [`Offset::datetime_from_str`](./offset/trait.TimeZone.html#method.datetime_from_str) is","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\lib.rs","byte_start":10225,"byte_end":10319,"line_start":219,"line_end":219,"column_start":1,"column_end":95}},{"value":"!    similar but returns `DateTime` of given offset.","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\lib.rs","byte_start":10320,"byte_end":10374,"line_start":220,"line_end":220,"column_start":1,"column_end":55}},{"value":"!    When the explicit offset is missing from the input, it simply uses given offset.","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\lib.rs","byte_start":10375,"byte_end":10462,"line_start":221,"line_end":221,"column_start":1,"column_end":88}},{"value":"!    It issues an error when the input contains an explicit offset different","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\lib.rs","byte_start":10463,"byte_end":10541,"line_start":222,"line_end":222,"column_start":1,"column_end":79}},{"value":"!    from the current offset.","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\lib.rs","byte_start":10542,"byte_end":10573,"line_start":223,"line_end":223,"column_start":1,"column_end":32}},{"value":"!","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\lib.rs","byte_start":10574,"byte_end":10577,"line_start":224,"line_end":224,"column_start":1,"column_end":4}},{"value":"! More detailed control over the parsing process is available via","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\lib.rs","byte_start":10578,"byte_end":10645,"line_start":225,"line_end":225,"column_start":1,"column_end":68}},{"value":"! [`format`](./format/index.html) module.","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\lib.rs","byte_start":10646,"byte_end":10689,"line_start":226,"line_end":226,"column_start":1,"column_end":44}},{"value":"!","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\lib.rs","byte_start":10690,"byte_end":10693,"line_start":227,"line_end":227,"column_start":1,"column_end":4}},{"value":"! ~~~~ {.rust}","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\lib.rs","byte_start":10694,"byte_end":10710,"line_start":228,"line_end":228,"column_start":1,"column_end":17}},{"value":"! use chrono::*;","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\lib.rs","byte_start":10711,"byte_end":10729,"line_start":229,"line_end":229,"column_start":1,"column_end":19}},{"value":"!","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\lib.rs","byte_start":10730,"byte_end":10733,"line_start":230,"line_end":230,"column_start":1,"column_end":4}},{"value":"! let dt = UTC.ymd(2014, 11, 28).and_hms(12, 0, 9);","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\lib.rs","byte_start":10734,"byte_end":10787,"line_start":231,"line_end":231,"column_start":1,"column_end":54}},{"value":"! let fixed_dt = dt.with_timezone(&FixedOffset::east(9*3600));","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\lib.rs","byte_start":10788,"byte_end":10852,"line_start":232,"line_end":232,"column_start":1,"column_end":65}},{"value":"!","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\lib.rs","byte_start":10853,"byte_end":10856,"line_start":233,"line_end":233,"column_start":1,"column_end":4}},{"value":"! // method 1","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\lib.rs","byte_start":10857,"byte_end":10872,"line_start":234,"line_end":234,"column_start":1,"column_end":16}},{"value":"! assert_eq!(\"2014-11-28T12:00:09Z\".parse::<DateTime<UTC>>(), Ok(dt.clone()));","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\lib.rs","byte_start":10873,"byte_end":10953,"line_start":235,"line_end":235,"column_start":1,"column_end":81}},{"value":"! assert_eq!(\"2014-11-28T21:00:09+09:00\".parse::<DateTime<UTC>>(), Ok(dt.clone()));","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\lib.rs","byte_start":10954,"byte_end":11039,"line_start":236,"line_end":236,"column_start":1,"column_end":86}},{"value":"! assert_eq!(\"2014-11-28T21:00:09+09:00\".parse::<DateTime<FixedOffset>>(), Ok(fixed_dt.clone()));","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\lib.rs","byte_start":11040,"byte_end":11139,"line_start":237,"line_end":237,"column_start":1,"column_end":100}},{"value":"!","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\lib.rs","byte_start":11140,"byte_end":11143,"line_start":238,"line_end":238,"column_start":1,"column_end":4}},{"value":"! // method 2","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\lib.rs","byte_start":11144,"byte_end":11159,"line_start":239,"line_end":239,"column_start":1,"column_end":16}},{"value":"! assert_eq!(DateTime::parse_from_str(\"2014-11-28 21:00:09 +09:00\", \"%Y-%m-%d %H:%M:%S %z\"),","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\lib.rs","byte_start":11160,"byte_end":11254,"line_start":240,"line_end":240,"column_start":1,"column_end":95}},{"value":"!            Ok(fixed_dt.clone()));","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\lib.rs","byte_start":11255,"byte_end":11292,"line_start":241,"line_end":241,"column_start":1,"column_end":38}},{"value":"! assert_eq!(DateTime::parse_from_rfc2822(\"Fri, 28 Nov 2014 21:00:09 +0900\"),","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\lib.rs","byte_start":11293,"byte_end":11372,"line_start":242,"line_end":242,"column_start":1,"column_end":80}},{"value":"!            Ok(fixed_dt.clone()));","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\lib.rs","byte_start":11373,"byte_end":11410,"line_start":243,"line_end":243,"column_start":1,"column_end":38}},{"value":"! assert_eq!(DateTime::parse_from_rfc3339(\"2014-11-28T21:00:09+09:00\"), Ok(fixed_dt.clone()));","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\lib.rs","byte_start":11411,"byte_end":11507,"line_start":244,"line_end":244,"column_start":1,"column_end":97}},{"value":"!","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\lib.rs","byte_start":11508,"byte_end":11511,"line_start":245,"line_end":245,"column_start":1,"column_end":4}},{"value":"! // method 3","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\lib.rs","byte_start":11512,"byte_end":11527,"line_start":246,"line_end":246,"column_start":1,"column_end":16}},{"value":"! assert_eq!(UTC.datetime_from_str(\"2014-11-28 12:00:09\", \"%Y-%m-%d %H:%M:%S\"), Ok(dt.clone()));","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\lib.rs","byte_start":11528,"byte_end":11626,"line_start":247,"line_end":247,"column_start":1,"column_end":99}},{"value":"! assert_eq!(UTC.datetime_from_str(\"Fri Nov 28 12:00:09 2014\", \"%a %b %e %T %Y\"), Ok(dt.clone()));","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\lib.rs","byte_start":11627,"byte_end":11727,"line_start":248,"line_end":248,"column_start":1,"column_end":101}},{"value":"!","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\lib.rs","byte_start":11728,"byte_end":11731,"line_start":249,"line_end":249,"column_start":1,"column_end":4}},{"value":"! // oops, the year is missing!","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\lib.rs","byte_start":11732,"byte_end":11765,"line_start":250,"line_end":250,"column_start":1,"column_end":34}},{"value":"! assert!(UTC.datetime_from_str(\"Fri Nov 28 12:00:09\", \"%a %b %e %T %Y\").is_err());","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\lib.rs","byte_start":11766,"byte_end":11851,"line_start":251,"line_end":251,"column_start":1,"column_end":86}},{"value":"! // oops, the format string does not include the year at all!","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\lib.rs","byte_start":11852,"byte_end":11916,"line_start":252,"line_end":252,"column_start":1,"column_end":65}},{"value":"! assert!(UTC.datetime_from_str(\"Fri Nov 28 12:00:09\", \"%a %b %e %T\").is_err());","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\lib.rs","byte_start":11917,"byte_end":11999,"line_start":253,"line_end":253,"column_start":1,"column_end":83}},{"value":"! // oops, the weekday is incorrect!","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\lib.rs","byte_start":12000,"byte_end":12038,"line_start":254,"line_end":254,"column_start":1,"column_end":39}},{"value":"! assert!(UTC.datetime_from_str(\"Sat Nov 28 12:00:09 2014\", \"%a %b %e %T %Y\").is_err());","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\lib.rs","byte_start":12039,"byte_end":12129,"line_start":255,"line_end":255,"column_start":1,"column_end":91}},{"value":"! ~~~~","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\lib.rs","byte_start":12130,"byte_end":12138,"line_start":256,"line_end":256,"column_start":1,"column_end":9}},{"value":"!","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\lib.rs","byte_start":12139,"byte_end":12142,"line_start":257,"line_end":257,"column_start":1,"column_end":4}},{"value":"! ### Individual date","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\lib.rs","byte_start":12143,"byte_end":12166,"line_start":258,"line_end":258,"column_start":1,"column_end":24}},{"value":"!","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\lib.rs","byte_start":12167,"byte_end":12170,"line_start":259,"line_end":259,"column_start":1,"column_end":4}},{"value":"! Chrono also provides an individual date type ([**`Date`**](./date/struct.Date.html)).","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\lib.rs","byte_start":12171,"byte_end":12260,"line_start":260,"line_end":260,"column_start":1,"column_end":90}},{"value":"! It also has time zones attached, and have to be constructed via time zones.","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\lib.rs","byte_start":12261,"byte_end":12340,"line_start":261,"line_end":261,"column_start":1,"column_end":80}},{"value":"! Most operations available to `DateTime` are also available to `Date` whenever appropriate.","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\lib.rs","byte_start":12341,"byte_end":12435,"line_start":262,"line_end":262,"column_start":1,"column_end":95}},{"value":"!","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\lib.rs","byte_start":12436,"byte_end":12439,"line_start":263,"line_end":263,"column_start":1,"column_end":4}},{"value":"! ~~~~ {.rust}","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\lib.rs","byte_start":12440,"byte_end":12456,"line_start":264,"line_end":264,"column_start":1,"column_end":17}},{"value":"! use chrono::*;","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\lib.rs","byte_start":12457,"byte_end":12475,"line_start":265,"line_end":265,"column_start":1,"column_end":19}},{"value":"!","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\lib.rs","byte_start":12476,"byte_end":12479,"line_start":266,"line_end":266,"column_start":1,"column_end":4}},{"value":"! # // these *may* fail, but only very rarely. just rerun the test if you were that unfortunate ;)","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\lib.rs","byte_start":12480,"byte_end":12580,"line_start":267,"line_end":267,"column_start":1,"column_end":101}},{"value":"! assert_eq!(UTC::today(), UTC::now().date());","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\lib.rs","byte_start":12581,"byte_end":12629,"line_start":268,"line_end":268,"column_start":1,"column_end":49}},{"value":"! assert_eq!(Local::today(), Local::now().date());","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\lib.rs","byte_start":12630,"byte_end":12682,"line_start":269,"line_end":269,"column_start":1,"column_end":53}},{"value":"!","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\lib.rs","byte_start":12683,"byte_end":12686,"line_start":270,"line_end":270,"column_start":1,"column_end":4}},{"value":"! assert_eq!(UTC.ymd(2014, 11, 28).weekday(), Weekday::Fri);","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\lib.rs","byte_start":12687,"byte_end":12749,"line_start":271,"line_end":271,"column_start":1,"column_end":63}},{"value":"! assert_eq!(UTC.ymd_opt(2014, 11, 31), LocalResult::None);","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\lib.rs","byte_start":12750,"byte_end":12811,"line_start":272,"line_end":272,"column_start":1,"column_end":62}},{"value":"! assert_eq!(UTC.ymd(2014, 11, 28).and_hms_milli(7, 8, 9, 10).format(\"%H%M%S\").to_string(),","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\lib.rs","byte_start":12812,"byte_end":12905,"line_start":273,"line_end":273,"column_start":1,"column_end":94}},{"value":"!            \"070809\");","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\lib.rs","byte_start":12906,"byte_end":12931,"line_start":274,"line_end":274,"column_start":1,"column_end":26}},{"value":"! ~~~~","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\lib.rs","byte_start":12932,"byte_end":12940,"line_start":275,"line_end":275,"column_start":1,"column_end":9}},{"value":"!","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\lib.rs","byte_start":12941,"byte_end":12944,"line_start":276,"line_end":276,"column_start":1,"column_end":4}},{"value":"! There is no timezone-aware `Time` due to the lack of usefulness and also the complexity.","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\lib.rs","byte_start":12945,"byte_end":13037,"line_start":277,"line_end":277,"column_start":1,"column_end":93}},{"value":"!","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\lib.rs","byte_start":13038,"byte_end":13041,"line_start":278,"line_end":278,"column_start":1,"column_end":4}},{"value":"! `DateTime` has [`date`](./datetime/struct.DateTime.html#method.date) method","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\lib.rs","byte_start":13042,"byte_end":13121,"line_start":279,"line_end":279,"column_start":1,"column_end":80}},{"value":"! which returns a `Date` which represents its date component.","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\lib.rs","byte_start":13122,"byte_end":13185,"line_start":280,"line_end":280,"column_start":1,"column_end":64}},{"value":"! There is also a [`time`](./datetime/struct.DateTime.html#method.time) method,","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\lib.rs","byte_start":13186,"byte_end":13267,"line_start":281,"line_end":281,"column_start":1,"column_end":82}},{"value":"! which simply returns a naive local time described below.","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\lib.rs","byte_start":13268,"byte_end":13328,"line_start":282,"line_end":282,"column_start":1,"column_end":61}},{"value":"!","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\lib.rs","byte_start":13329,"byte_end":13332,"line_start":283,"line_end":283,"column_start":1,"column_end":4}},{"value":"! ### Naive date and time","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\lib.rs","byte_start":13333,"byte_end":13360,"line_start":284,"line_end":284,"column_start":1,"column_end":28}},{"value":"!","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\lib.rs","byte_start":13361,"byte_end":13364,"line_start":285,"line_end":285,"column_start":1,"column_end":4}},{"value":"! Chrono provides naive counterparts to `Date`, (non-existent) `Time` and `DateTime`","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\lib.rs","byte_start":13365,"byte_end":13451,"line_start":286,"line_end":286,"column_start":1,"column_end":87}},{"value":"! as [**`NaiveDate`**](./naive/date/struct.NaiveDate.html),","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\lib.rs","byte_start":13452,"byte_end":13513,"line_start":287,"line_end":287,"column_start":1,"column_end":62}},{"value":"! [**`NaiveTime`**](./naive/time/struct.NaiveTime.html) and","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\lib.rs","byte_start":13514,"byte_end":13575,"line_start":288,"line_end":288,"column_start":1,"column_end":62}},{"value":"! [**`NaiveDateTime`**](./naive/datetime/struct.NaiveDateTime.html) respectively.","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\lib.rs","byte_start":13576,"byte_end":13659,"line_start":289,"line_end":289,"column_start":1,"column_end":84}},{"value":"!","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\lib.rs","byte_start":13660,"byte_end":13663,"line_start":290,"line_end":290,"column_start":1,"column_end":4}},{"value":"! They have almost equivalent interfaces as their timezone-aware twins,","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\lib.rs","byte_start":13664,"byte_end":13737,"line_start":291,"line_end":291,"column_start":1,"column_end":74}},{"value":"! but are not associated to time zones obviously and can be quite low-level.","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\lib.rs","byte_start":13738,"byte_end":13816,"line_start":292,"line_end":292,"column_start":1,"column_end":79}},{"value":"! They are mostly useful for building blocks for higher-level types.","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\lib.rs","byte_start":13817,"byte_end":13887,"line_start":293,"line_end":293,"column_start":1,"column_end":71}},{"value":"!","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\lib.rs","byte_start":13888,"byte_end":13891,"line_start":294,"line_end":294,"column_start":1,"column_end":4}},{"value":"! Timezone-aware `DateTime` and `Date` types have two methods returning naive versions:","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\lib.rs","byte_start":13892,"byte_end":13981,"line_start":295,"line_end":295,"column_start":1,"column_end":90}},{"value":"! [`naive_local`](./datetime/struct.DateTime.html#method.naive_local) returns","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\lib.rs","byte_start":13982,"byte_end":14061,"line_start":296,"line_end":296,"column_start":1,"column_end":80}},{"value":"! a view to the naive local time,","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\lib.rs","byte_start":14062,"byte_end":14097,"line_start":297,"line_end":297,"column_start":1,"column_end":36}},{"value":"! and [`naive_utc`](./datetime/struct.DateTime.html#method.naive_utc) returns","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\lib.rs","byte_start":14098,"byte_end":14177,"line_start":298,"line_end":298,"column_start":1,"column_end":80}},{"value":"! a view to the naive UTC time.","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\lib.rs","byte_start":14178,"byte_end":14211,"line_start":299,"line_end":299,"column_start":1,"column_end":34}},{"value":"!","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\lib.rs","byte_start":14212,"byte_end":14215,"line_start":300,"line_end":300,"column_start":1,"column_end":4}},{"value":"! ## Limitations","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\lib.rs","byte_start":14216,"byte_end":14234,"line_start":301,"line_end":301,"column_start":1,"column_end":19}},{"value":"!","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\lib.rs","byte_start":14235,"byte_end":14238,"line_start":302,"line_end":302,"column_start":1,"column_end":4}},{"value":"! Only proleptic Gregorian calendar (i.e. extended to support older dates) is supported.","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\lib.rs","byte_start":14239,"byte_end":14329,"line_start":303,"line_end":303,"column_start":1,"column_end":91}},{"value":"! Be very careful if you really have to deal with pre-20C dates, they can be in Julian or others.","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\lib.rs","byte_start":14330,"byte_end":14429,"line_start":304,"line_end":304,"column_start":1,"column_end":100}},{"value":"!","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\lib.rs","byte_start":14430,"byte_end":14433,"line_start":305,"line_end":305,"column_start":1,"column_end":4}},{"value":"! Date types are limited in about +/- 262,000 years from the common epoch.","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\lib.rs","byte_start":14434,"byte_end":14510,"line_start":306,"line_end":306,"column_start":1,"column_end":77}},{"value":"! Time types are limited in the nanosecond accuracy.","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\lib.rs","byte_start":14511,"byte_end":14565,"line_start":307,"line_end":307,"column_start":1,"column_end":55}},{"value":"!","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\lib.rs","byte_start":14566,"byte_end":14569,"line_start":308,"line_end":308,"column_start":1,"column_end":4}},{"value":"! [Leap seconds are supported in the representation but","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\lib.rs","byte_start":14570,"byte_end":14627,"line_start":309,"line_end":309,"column_start":1,"column_end":58}},{"value":"! Chrono doesn't try to make use of them](./naive/time/index.html#leap-second-handling).","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\lib.rs","byte_start":14628,"byte_end":14718,"line_start":310,"line_end":310,"column_start":1,"column_end":91}},{"value":"! (The main reason is that leap seconds are not really predictable.)","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\lib.rs","byte_start":14719,"byte_end":14789,"line_start":311,"line_end":311,"column_start":1,"column_end":71}},{"value":"! Almost *every* operation over the possible leap seconds will ignore them.","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\lib.rs","byte_start":14790,"byte_end":14867,"line_start":312,"line_end":312,"column_start":1,"column_end":78}},{"value":"! Consider using `NaiveDateTime` with the implicit TAI (International Atomic Time) scale","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\lib.rs","byte_start":14868,"byte_end":14958,"line_start":313,"line_end":313,"column_start":1,"column_end":91}},{"value":"! if you want.","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\lib.rs","byte_start":14959,"byte_end":14975,"line_start":314,"line_end":314,"column_start":1,"column_end":17}},{"value":"!","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\lib.rs","byte_start":14976,"byte_end":14979,"line_start":315,"line_end":315,"column_start":1,"column_end":4}},{"value":"! Chrono inherently does not support an inaccurate or partial date and time representation.","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\lib.rs","byte_start":14980,"byte_end":15073,"line_start":316,"line_end":316,"column_start":1,"column_end":94}},{"value":"! Any operation that can be ambiguous will return `None` in such cases.","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\lib.rs","byte_start":15074,"byte_end":15147,"line_start":317,"line_end":317,"column_start":1,"column_end":74}},{"value":"! For example, \"a month later\" of 2014-01-30 is not well-defined","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\lib.rs","byte_start":15148,"byte_end":15214,"line_start":318,"line_end":318,"column_start":1,"column_end":67}},{"value":"! and consequently `UTC.ymd(2014, 1, 30).with_month(2)` returns `None`.","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\lib.rs","byte_start":15215,"byte_end":15288,"line_start":319,"line_end":319,"column_start":1,"column_end":74}},{"value":"!","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\lib.rs","byte_start":15289,"byte_end":15292,"line_start":320,"line_end":320,"column_start":1,"column_end":4}},{"value":"! Advanced time zone handling is not yet supported (but is planned in 0.3).","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\lib.rs","byte_start":15293,"byte_end":15370,"line_start":321,"line_end":321,"column_start":1,"column_end":78}},{"value":"deny(missing_docs)","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\lib.rs","byte_start":15520,"byte_end":15542,"line_start":326,"line_end":326,"column_start":1,"column_end":23}}]},{"kind":"Mod","id":{"krate":0,"index":28},"span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\lib.rs","byte_start":16213,"byte_end":16221,"line_start":353,"line_end":353,"column_start":9,"column_end":17},"name":"duration","qualname":"::duration","value":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\lib.rs","parent":null,"children":[{"krate":0,"index":29}],"decl_id":null,"docs":" ISO 8601 duration.","sig":null,"attributes":[{"value":"! ISO 8601 duration.","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\lib.rs","byte_start":16228,"byte_end":16250,"line_start":354,"line_end":354,"column_start":5,"column_end":27}},{"value":"!","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\lib.rs","byte_start":16255,"byte_end":16258,"line_start":355,"line_end":355,"column_start":5,"column_end":8}},{"value":"! This used to be a part of rust-chrono,","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\lib.rs","byte_start":16263,"byte_end":16305,"line_start":356,"line_end":356,"column_start":5,"column_end":47}},{"value":"! but has been subsequently merged into Rust's standard library.","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\lib.rs","byte_start":16310,"byte_end":16376,"line_start":357,"line_end":357,"column_start":5,"column_end":71}}]},{"kind":"Mod","id":{"krate":0,"index":30},"span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\offset\\mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"offset","qualname":"::offset","value":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\offset\\mod.rs","parent":null,"children":[{"krate":0,"index":31},{"krate":0,"index":32},{"krate":0,"index":33},{"krate":0,"index":34},{"krate":0,"index":35},{"krate":0,"index":36},{"krate":0,"index":37},{"krate":0,"index":38},{"krate":0,"index":39},{"krate":0,"index":1135},{"krate":0,"index":1155},{"krate":0,"index":1149},{"krate":0,"index":1151},{"krate":0,"index":1146},{"krate":0,"index":44},{"krate":0,"index":52},{"krate":0,"index":59},{"krate":0,"index":62},{"krate":0,"index":64},{"krate":0,"index":86},{"krate":0,"index":114},{"krate":0,"index":142}],"decl_id":null,"docs":" The time zone, which calculates offsets from the local time to UTC.","sig":null,"attributes":[{"value":"!\n * The time zone, which calculates offsets from the local time to UTC.\n *\n * There are three operations provided by the `TimeZone` trait:\n *\n * 1. Converting the local `NaiveDateTime` to `DateTime<Tz>`\n * 2. Converting the UTC `NaiveDateTime` to `DateTime<Tz>`\n * 3. Converting `DateTime<Tz>` to the local `NaiveDateTime`\n *\n * 1 is used for constructors. 2 is used for the `with_timezone` method of date and time types.\n * 3 is used for other methods, e.g. `year()` or `format()`, and provided by an associated type\n * which implements `Offset` (which then passed to `TimeZone` for actual implementations).\n * Technically speaking `TimeZone` has a total knowledge about given timescale,\n * but `Offset` is used as a cache to avoid the repeated conversion\n * and provides implementations for 1 and 3.\n * An `TimeZone` instance can be reconstructed from the corresponding `Offset` instance.\n */","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\offset\\mod.rs","byte_start":30887,"byte_end":31784,"line_start":5,"line_end":21,"column_start":1,"column_end":4}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1137},"span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\offset\\mod.rs","byte_start":32305,"byte_end":32309,"line_start":39,"line_end":39,"column_start":5,"column_end":9},"name":"None","qualname":"::offset::LocalResult::None","value":"LocalResult::None","parent":{"krate":0,"index":1135},"children":[],"decl_id":null,"docs":" Given local time representation is invalid.\n This can occur when, for example, the positive timezone transition.\n","sig":null,"attributes":[{"value":"/ Given local time representation is invalid.","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\offset\\mod.rs","byte_start":32177,"byte_end":32224,"line_start":37,"line_end":37,"column_start":5,"column_end":52}},{"value":"/ This can occur when, for example, the positive timezone transition.","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\offset\\mod.rs","byte_start":32229,"byte_end":32300,"line_start":38,"line_end":38,"column_start":5,"column_end":76}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1139},"span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\offset\\mod.rs","byte_start":32383,"byte_end":32389,"line_start":41,"line_end":41,"column_start":5,"column_end":11},"name":"Single","qualname":"::offset::LocalResult::Single","value":"LocalResult::Single(T)","parent":{"krate":0,"index":1135},"children":[],"decl_id":null,"docs":" Given local time representation has a single unique result.\n","sig":null,"attributes":[{"value":"/ Given local time representation has a single unique result.","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\offset\\mod.rs","byte_start":32315,"byte_end":32378,"line_start":40,"line_end":40,"column_start":5,"column_end":68}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1142},"span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\offset\\mod.rs","byte_start":32555,"byte_end":32564,"line_start":44,"line_end":44,"column_start":5,"column_end":14},"name":"Ambiguous","qualname":"::offset::LocalResult::Ambiguous","value":"LocalResult::Ambiguous(T, T)","parent":{"krate":0,"index":1135},"children":[],"decl_id":null,"docs":" Given local time representation has multiple results and thus ambiguous.\n This can occur when, for example, the negative timezone transition.\n","sig":null,"attributes":[{"value":"/ Given local time representation has multiple results and thus ambiguous.","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\offset\\mod.rs","byte_start":32398,"byte_end":32474,"line_start":42,"line_end":42,"column_start":5,"column_end":81}},{"value":"/ This can occur when, for example, the negative timezone transition.","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\offset\\mod.rs","byte_start":32479,"byte_end":32550,"line_start":43,"line_end":43,"column_start":5,"column_end":76}}]},{"kind":"Enum","id":{"krate":0,"index":1135},"span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\offset\\mod.rs","byte_start":32156,"byte_end":32167,"line_start":36,"line_end":36,"column_start":10,"column_end":21},"name":"LocalResult","qualname":"::offset::LocalResult","value":"LocalResult::{None, Single, Ambiguous}","parent":null,"children":[{"krate":0,"index":1137},{"krate":0,"index":1139},{"krate":0,"index":1142}],"decl_id":null,"docs":" The conversion result from the local time to the timezone-aware datetime types.\n","sig":null,"attributes":[{"value":"/ The conversion result from the local time to the timezone-aware datetime types.","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\offset\\mod.rs","byte_start":32028,"byte_end":32111,"line_start":34,"line_end":34,"column_start":1,"column_end":84}}]},{"kind":"Method","id":{"krate":0,"index":46},"span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\offset\\mod.rs","byte_start":32714,"byte_end":32720,"line_start":49,"line_end":49,"column_start":12,"column_end":18},"name":"single","qualname":"<LocalResult<T>>::single","value":"fn (self) -> Option<T>","parent":null,"children":[],"decl_id":null,"docs":" Returns `Some` only when the conversion result is unique, or `None` otherwise.\n","sig":null,"attributes":[{"value":"/ Returns `Some` only when the conversion result is unique, or `None` otherwise.","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\offset\\mod.rs","byte_start":32620,"byte_end":32702,"line_start":48,"line_end":48,"column_start":5,"column_end":87}}]},{"kind":"Method","id":{"krate":0,"index":47},"span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\offset\\mod.rs","byte_start":32915,"byte_end":32923,"line_start":54,"line_end":54,"column_start":12,"column_end":20},"name":"earliest","qualname":"<LocalResult<T>>::earliest","value":"fn (self) -> Option<T>","parent":null,"children":[],"decl_id":null,"docs":" Returns `Some` for the earliest possible conversion result, or `None` if none.\n","sig":null,"attributes":[{"value":"/ Returns `Some` for the earliest possible conversion result, or `None` if none.","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\offset\\mod.rs","byte_start":32821,"byte_end":32903,"line_start":53,"line_end":53,"column_start":5,"column_end":87}}]},{"kind":"Method","id":{"krate":0,"index":48},"span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\offset\\mod.rs","byte_start":33146,"byte_end":33152,"line_start":59,"line_end":59,"column_start":12,"column_end":18},"name":"latest","qualname":"<LocalResult<T>>::latest","value":"fn (self) -> Option<T>","parent":null,"children":[],"decl_id":null,"docs":" Returns `Some` for the latest possible conversion result, or `None` if none.\n","sig":null,"attributes":[{"value":"/ Returns `Some` for the latest possible conversion result, or `None` if none.","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\offset\\mod.rs","byte_start":33054,"byte_end":33134,"line_start":58,"line_end":58,"column_start":5,"column_end":85}}]},{"kind":"Method","id":{"krate":0,"index":49},"span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\offset\\mod.rs","byte_start":33365,"byte_end":33368,"line_start":64,"line_end":64,"column_start":12,"column_end":15},"name":"map","qualname":"<LocalResult<T>>::map","value":"fn <U, F> (self, mut f: F) -> LocalResult<U>","parent":null,"children":[],"decl_id":null,"docs":" Maps a `LocalResult<T>` into `LocalResult<U>` with given function.\n","sig":null,"attributes":[{"value":"/ Maps a `LocalResult<T>` into `LocalResult<U>` with given function.","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\offset\\mod.rs","byte_start":33283,"byte_end":33353,"line_start":63,"line_end":63,"column_start":5,"column_end":75}}]},{"kind":"Method","id":{"krate":0,"index":54},"span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\offset\\mod.rs","byte_start":33943,"byte_end":33951,"line_start":79,"line_end":79,"column_start":12,"column_end":20},"name":"and_time","qualname":"<LocalResult<Date<Tz>>>::and_time","value":"fn (self, time: NaiveTime) -> LocalResult<DateTime<Tz>>","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `DateTime` from the current date and given `NaiveTime`.\n The offset in the current date is preserved.","sig":null,"attributes":[{"value":"/ Makes a new `DateTime` from the current date and given `NaiveTime`.","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\offset\\mod.rs","byte_start":33718,"byte_end":33789,"line_start":74,"line_end":74,"column_start":5,"column_end":76}},{"value":"/ The offset in the current date is preserved.","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\offset\\mod.rs","byte_start":33794,"byte_end":33842,"line_start":75,"line_end":75,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\offset\\mod.rs","byte_start":33847,"byte_end":33850,"line_start":76,"line_end":76,"column_start":5,"column_end":8}},{"value":"/ Propagates any error. Ambiguous result would be discarded.","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\offset\\mod.rs","byte_start":33855,"byte_end":33917,"line_start":77,"line_end":77,"column_start":5,"column_end":67}},{"value":"inline","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\offset\\mod.rs","byte_start":33922,"byte_end":33931,"line_start":78,"line_end":78,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":55},"span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\offset\\mod.rs","byte_start":34455,"byte_end":34466,"line_start":92,"line_end":92,"column_start":12,"column_end":23},"name":"and_hms_opt","qualname":"<LocalResult<Date<Tz>>>::and_hms_opt","value":"fn (self, hour: u32, min: u32, sec: u32) -> LocalResult<DateTime<Tz>>","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `DateTime` from the current date, hour, minute and second.\n The offset in the current date is preserved.","sig":null,"attributes":[{"value":"/ Makes a new `DateTime` from the current date, hour, minute and second.","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\offset\\mod.rs","byte_start":34227,"byte_end":34301,"line_start":87,"line_end":87,"column_start":5,"column_end":79}},{"value":"/ The offset in the current date is preserved.","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\offset\\mod.rs","byte_start":34306,"byte_end":34354,"line_start":88,"line_end":88,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\offset\\mod.rs","byte_start":34359,"byte_end":34362,"line_start":89,"line_end":89,"column_start":5,"column_end":8}},{"value":"/ Propagates any error. Ambiguous result would be discarded.","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\offset\\mod.rs","byte_start":34367,"byte_end":34429,"line_start":90,"line_end":90,"column_start":5,"column_end":67}},{"value":"inline","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\offset\\mod.rs","byte_start":34434,"byte_end":34443,"line_start":91,"line_end":91,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":56},"span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\offset\\mod.rs","byte_start":35095,"byte_end":35112,"line_start":106,"line_end":106,"column_start":12,"column_end":29},"name":"and_hms_milli_opt","qualname":"<LocalResult<Date<Tz>>>::and_hms_milli_opt","value":"fn (self, hour: u32, min: u32, sec: u32, milli: u32) -> LocalResult<DateTime<Tz>>","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `DateTime` from the current date, hour, minute, second and millisecond.\n The millisecond part can exceed 1,000 in order to represent the leap second.\n The offset in the current date is preserved.","sig":null,"attributes":[{"value":"/ Makes a new `DateTime` from the current date, hour, minute, second and millisecond.","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\offset\\mod.rs","byte_start":34769,"byte_end":34856,"line_start":100,"line_end":100,"column_start":5,"column_end":92}},{"value":"/ The millisecond part can exceed 1,000 in order to represent the leap second.","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\offset\\mod.rs","byte_start":34861,"byte_end":34941,"line_start":101,"line_end":101,"column_start":5,"column_end":85}},{"value":"/ The offset in the current date is preserved.","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\offset\\mod.rs","byte_start":34946,"byte_end":34994,"line_start":102,"line_end":102,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\offset\\mod.rs","byte_start":34999,"byte_end":35002,"line_start":103,"line_end":103,"column_start":5,"column_end":8}},{"value":"/ Propagates any error. Ambiguous result would be discarded.","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\offset\\mod.rs","byte_start":35007,"byte_end":35069,"line_start":104,"line_end":104,"column_start":5,"column_end":67}},{"value":"inline","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\offset\\mod.rs","byte_start":35074,"byte_end":35083,"line_start":105,"line_end":105,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":57},"span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\offset\\mod.rs","byte_start":35799,"byte_end":35816,"line_start":121,"line_end":121,"column_start":12,"column_end":29},"name":"and_hms_micro_opt","qualname":"<LocalResult<Date<Tz>>>::and_hms_micro_opt","value":"fn (self, hour: u32, min: u32, sec: u32, micro: u32) -> LocalResult<DateTime<Tz>>","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `DateTime` from the current date, hour, minute, second and microsecond.\n The microsecond part can exceed 1,000,000 in order to represent the leap second.\n The offset in the current date is preserved.","sig":null,"attributes":[{"value":"/ Makes a new `DateTime` from the current date, hour, minute, second and microsecond.","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\offset\\mod.rs","byte_start":35469,"byte_end":35556,"line_start":115,"line_end":115,"column_start":5,"column_end":92}},{"value":"/ The microsecond part can exceed 1,000,000 in order to represent the leap second.","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\offset\\mod.rs","byte_start":35561,"byte_end":35645,"line_start":116,"line_end":116,"column_start":5,"column_end":89}},{"value":"/ The offset in the current date is preserved.","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\offset\\mod.rs","byte_start":35650,"byte_end":35698,"line_start":117,"line_end":117,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\offset\\mod.rs","byte_start":35703,"byte_end":35706,"line_start":118,"line_end":118,"column_start":5,"column_end":8}},{"value":"/ Propagates any error. Ambiguous result would be discarded.","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\offset\\mod.rs","byte_start":35711,"byte_end":35773,"line_start":119,"line_end":119,"column_start":5,"column_end":67}},{"value":"inline","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\offset\\mod.rs","byte_start":35778,"byte_end":35787,"line_start":120,"line_end":120,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":58},"span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\offset\\mod.rs","byte_start":36505,"byte_end":36521,"line_start":136,"line_end":136,"column_start":12,"column_end":28},"name":"and_hms_nano_opt","qualname":"<LocalResult<Date<Tz>>>::and_hms_nano_opt","value":"fn (self, hour: u32, min: u32, sec: u32, nano: u32) -> LocalResult<DateTime<Tz>>","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `DateTime` from the current date, hour, minute, second and nanosecond.\n The nanosecond part can exceed 1,000,000,000 in order to represent the leap second.\n The offset in the current date is preserved.","sig":null,"attributes":[{"value":"/ Makes a new `DateTime` from the current date, hour, minute, second and nanosecond.","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\offset\\mod.rs","byte_start":36173,"byte_end":36259,"line_start":130,"line_end":130,"column_start":5,"column_end":91}},{"value":"/ The nanosecond part can exceed 1,000,000,000 in order to represent the leap second.","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\offset\\mod.rs","byte_start":36264,"byte_end":36351,"line_start":131,"line_end":131,"column_start":5,"column_end":92}},{"value":"/ The offset in the current date is preserved.","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\offset\\mod.rs","byte_start":36356,"byte_end":36404,"line_start":132,"line_end":132,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\offset\\mod.rs","byte_start":36409,"byte_end":36412,"line_start":133,"line_end":133,"column_start":5,"column_end":8}},{"value":"/ Propagates any error. Ambiguous result would be discarded.","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\offset\\mod.rs","byte_start":36417,"byte_end":36479,"line_start":134,"line_end":134,"column_start":5,"column_end":67}},{"value":"inline","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\offset\\mod.rs","byte_start":36484,"byte_end":36493,"line_start":135,"line_end":135,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":61},"span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\offset\\mod.rs","byte_start":36997,"byte_end":37003,"line_start":149,"line_end":149,"column_start":12,"column_end":18},"name":"unwrap","qualname":"<LocalResult<T>>::unwrap","value":"fn (self) -> T","parent":null,"children":[],"decl_id":null,"docs":" Returns the single unique conversion result, or panics accordingly.\n","sig":null,"attributes":[{"value":"/ Returns the single unique conversion result, or panics accordingly.","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\offset\\mod.rs","byte_start":36914,"byte_end":36985,"line_start":148,"line_end":148,"column_start":5,"column_end":76}}]},{"kind":"Trait","id":{"krate":0,"index":62},"span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\offset\\mod.rs","byte_start":37357,"byte_end":37363,"line_start":161,"line_end":161,"column_start":11,"column_end":17},"name":"Offset","qualname":"::offset::Offset","value":"Offset: Sized + Clone + fmt::Debug","parent":null,"children":[{"krate":0,"index":63}],"decl_id":null,"docs":" The offset from the local time to UTC.\n","sig":null,"attributes":[{"value":"/ The offset from the local time to UTC.","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\offset\\mod.rs","byte_start":37304,"byte_end":37346,"line_start":160,"line_end":160,"column_start":1,"column_end":43}}]},{"kind":"Method","id":{"krate":0,"index":63},"span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\offset\\mod.rs","byte_start":37463,"byte_end":37478,"line_start":163,"line_end":163,"column_start":8,"column_end":23},"name":"local_minus_utc","qualname":"::offset::Offset::local_minus_utc","value":"fn (&self) -> Duration","parent":{"krate":0,"index":62},"children":[],"decl_id":null,"docs":" Returns the offset from UTC to the local time stored.\n","sig":null,"attributes":[{"value":"/ Returns the offset from UTC to the local time stored.","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\offset\\mod.rs","byte_start":37398,"byte_end":37455,"line_start":162,"line_end":162,"column_start":5,"column_end":62}}]},{"kind":"Trait","id":{"krate":0,"index":64},"span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\offset\\mod.rs","byte_start":37531,"byte_end":37539,"line_start":167,"line_end":167,"column_start":11,"column_end":19},"name":"TimeZone","qualname":"::offset::TimeZone","value":"TimeZone: Sized + Clone","parent":null,"children":[{"krate":0,"index":65},{"krate":0,"index":66},{"krate":0,"index":67},{"krate":0,"index":68},{"krate":0,"index":69},{"krate":0,"index":70},{"krate":0,"index":71},{"krate":0,"index":72},{"krate":0,"index":73},{"krate":0,"index":74},{"krate":0,"index":75},{"krate":0,"index":76},{"krate":0,"index":77},{"krate":0,"index":78},{"krate":0,"index":80},{"krate":0,"index":82},{"krate":0,"index":83},{"krate":0,"index":84},{"krate":0,"index":85}],"decl_id":null,"docs":" The time zone.\n","sig":null,"attributes":[{"value":"/ The time zone.","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\offset\\mod.rs","byte_start":37502,"byte_end":37520,"line_start":166,"line_end":166,"column_start":1,"column_end":19}}]},{"kind":"Type","id":{"krate":0,"index":65},"span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\offset\\mod.rs","byte_start":37762,"byte_end":37768,"line_start":171,"line_end":171,"column_start":10,"column_end":16},"name":"Offset","qualname":"::offset::TimeZone::Offset","value":"type Offset: Offset;","parent":{"krate":0,"index":64},"children":[],"decl_id":null,"docs":" An associated offset type.\n This type is used to store the actual offset in date and time types.\n The original `TimeZone` value can be recovered via `TimeZone::from_offset`.\n","sig":null,"attributes":[{"value":"/ An associated offset type.","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\offset\\mod.rs","byte_start":37561,"byte_end":37591,"line_start":168,"line_end":168,"column_start":5,"column_end":35}},{"value":"/ This type is used to store the actual offset in date and time types.","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\offset\\mod.rs","byte_start":37596,"byte_end":37668,"line_start":169,"line_end":169,"column_start":5,"column_end":77}},{"value":"/ The original `TimeZone` value can be recovered via `TimeZone::from_offset`.","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\offset\\mod.rs","byte_start":37673,"byte_end":37752,"line_start":170,"line_end":170,"column_start":5,"column_end":84}}]},{"kind":"Method","id":{"krate":0,"index":66},"span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\offset\\mod.rs","byte_start":38209,"byte_end":38212,"line_start":180,"line_end":180,"column_start":8,"column_end":11},"name":"ymd","qualname":"::offset::TimeZone::ymd","value":"fn (&self, year: i32, month: u32, day: u32) -> Date<Self>","parent":{"krate":0,"index":64},"children":[],"decl_id":null,"docs":" Makes a new `Date` from year, month, day and the current time zone.\n This assumes the proleptic Gregorian calendar, with the year 0 being 1 BCE.","sig":null,"attributes":[{"value":"/ Makes a new `Date` from year, month, day and the current time zone.","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\offset\\mod.rs","byte_start":37783,"byte_end":37854,"line_start":173,"line_end":173,"column_start":5,"column_end":76}},{"value":"/ This assumes the proleptic Gregorian calendar, with the year 0 being 1 BCE.","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\offset\\mod.rs","byte_start":37859,"byte_end":37938,"line_start":174,"line_end":174,"column_start":5,"column_end":84}},{"value":"/","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\offset\\mod.rs","byte_start":37943,"byte_end":37946,"line_start":175,"line_end":175,"column_start":5,"column_end":8}},{"value":"/ The time zone normally does not affect the date (unless it is between UTC-24 and UTC+24),","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\offset\\mod.rs","byte_start":37951,"byte_end":38044,"line_start":176,"line_end":176,"column_start":5,"column_end":98}},{"value":"/ but it will propagate to the `DateTime` values constructed via this date.","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\offset\\mod.rs","byte_start":38049,"byte_end":38126,"line_start":177,"line_end":177,"column_start":5,"column_end":82}},{"value":"/","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\offset\\mod.rs","byte_start":38131,"byte_end":38134,"line_start":178,"line_end":178,"column_start":5,"column_end":8}},{"value":"/ Panics on the out-of-range date, invalid month and/or day.","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\offset\\mod.rs","byte_start":38139,"byte_end":38201,"line_start":179,"line_end":179,"column_start":5,"column_end":67}}]},{"kind":"Method","id":{"krate":0,"index":67},"span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\offset\\mod.rs","byte_start":38762,"byte_end":38769,"line_start":191,"line_end":191,"column_start":8,"column_end":15},"name":"ymd_opt","qualname":"::offset::TimeZone::ymd_opt","value":"fn (&self, year: i32, month: u32, day: u32) -> LocalResult<Date<Self>>","parent":{"krate":0,"index":64},"children":[],"decl_id":null,"docs":" Makes a new `Date` from year, month, day and the current time zone.\n This assumes the proleptic Gregorian calendar, with the year 0 being 1 BCE.","sig":null,"attributes":[{"value":"/ Makes a new `Date` from year, month, day and the current time zone.","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\offset\\mod.rs","byte_start":38328,"byte_end":38399,"line_start":184,"line_end":184,"column_start":5,"column_end":76}},{"value":"/ This assumes the proleptic Gregorian calendar, with the year 0 being 1 BCE.","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\offset\\mod.rs","byte_start":38404,"byte_end":38483,"line_start":185,"line_end":185,"column_start":5,"column_end":84}},{"value":"/","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\offset\\mod.rs","byte_start":38488,"byte_end":38491,"line_start":186,"line_end":186,"column_start":5,"column_end":8}},{"value":"/ The time zone normally does not affect the date (unless it is between UTC-24 and UTC+24),","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\offset\\mod.rs","byte_start":38496,"byte_end":38589,"line_start":187,"line_end":187,"column_start":5,"column_end":98}},{"value":"/ but it will propagate to the `DateTime` values constructed via this date.","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\offset\\mod.rs","byte_start":38594,"byte_end":38671,"line_start":188,"line_end":188,"column_start":5,"column_end":82}},{"value":"/","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\offset\\mod.rs","byte_start":38676,"byte_end":38679,"line_start":189,"line_end":189,"column_start":5,"column_end":8}},{"value":"/ Returns `None` on the out-of-range date, invalid month and/or day.","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\offset\\mod.rs","byte_start":38684,"byte_end":38754,"line_start":190,"line_end":190,"column_start":5,"column_end":75}}]},{"kind":"Method","id":{"krate":0,"index":68},"span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\offset\\mod.rs","byte_start":39445,"byte_end":39447,"line_start":205,"line_end":205,"column_start":8,"column_end":10},"name":"yo","qualname":"::offset::TimeZone::yo","value":"fn (&self, year: i32, ordinal: u32) -> Date<Self>","parent":{"krate":0,"index":64},"children":[],"decl_id":null,"docs":" Makes a new `Date` from year, day of year (DOY or \"ordinal\") and the current time zone.\n This assumes the proleptic Gregorian calendar, with the year 0 being 1 BCE.","sig":null,"attributes":[{"value":"/ Makes a new `Date` from year, day of year (DOY or \"ordinal\") and the current time zone.","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\offset\\mod.rs","byte_start":39006,"byte_end":39097,"line_start":198,"line_end":198,"column_start":5,"column_end":96}},{"value":"/ This assumes the proleptic Gregorian calendar, with the year 0 being 1 BCE.","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\offset\\mod.rs","byte_start":39102,"byte_end":39181,"line_start":199,"line_end":199,"column_start":5,"column_end":84}},{"value":"/","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\offset\\mod.rs","byte_start":39186,"byte_end":39189,"line_start":200,"line_end":200,"column_start":5,"column_end":8}},{"value":"/ The time zone normally does not affect the date (unless it is between UTC-24 and UTC+24),","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\offset\\mod.rs","byte_start":39194,"byte_end":39287,"line_start":201,"line_end":201,"column_start":5,"column_end":98}},{"value":"/ but it will propagate to the `DateTime` values constructed via this date.","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\offset\\mod.rs","byte_start":39292,"byte_end":39369,"line_start":202,"line_end":202,"column_start":5,"column_end":82}},{"value":"/","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\offset\\mod.rs","byte_start":39374,"byte_end":39377,"line_start":203,"line_end":203,"column_start":5,"column_end":8}},{"value":"/ Panics on the out-of-range date and/or invalid DOY.","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\offset\\mod.rs","byte_start":39382,"byte_end":39437,"line_start":204,"line_end":204,"column_start":5,"column_end":60}}]},{"kind":"Method","id":{"krate":0,"index":69},"span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\offset\\mod.rs","byte_start":39998,"byte_end":40004,"line_start":216,"line_end":216,"column_start":8,"column_end":14},"name":"yo_opt","qualname":"::offset::TimeZone::yo_opt","value":"fn (&self, year: i32, ordinal: u32) -> LocalResult<Date<Self>>","parent":{"krate":0,"index":64},"children":[],"decl_id":null,"docs":" Makes a new `Date` from year, day of year (DOY or \"ordinal\") and the current time zone.\n This assumes the proleptic Gregorian calendar, with the year 0 being 1 BCE.","sig":null,"attributes":[{"value":"/ Makes a new `Date` from year, day of year (DOY or \"ordinal\") and the current time zone.","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\offset\\mod.rs","byte_start":39551,"byte_end":39642,"line_start":209,"line_end":209,"column_start":5,"column_end":96}},{"value":"/ This assumes the proleptic Gregorian calendar, with the year 0 being 1 BCE.","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\offset\\mod.rs","byte_start":39647,"byte_end":39726,"line_start":210,"line_end":210,"column_start":5,"column_end":84}},{"value":"/","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\offset\\mod.rs","byte_start":39731,"byte_end":39734,"line_start":211,"line_end":211,"column_start":5,"column_end":8}},{"value":"/ The time zone normally does not affect the date (unless it is between UTC-24 and UTC+24),","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\offset\\mod.rs","byte_start":39739,"byte_end":39832,"line_start":212,"line_end":212,"column_start":5,"column_end":98}},{"value":"/ but it will propagate to the `DateTime` values constructed via this date.","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\offset\\mod.rs","byte_start":39837,"byte_end":39914,"line_start":213,"line_end":213,"column_start":5,"column_end":82}},{"value":"/","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\offset\\mod.rs","byte_start":39919,"byte_end":39922,"line_start":214,"line_end":214,"column_start":5,"column_end":8}},{"value":"/ Returns `None` on the out-of-range date and/or invalid DOY.","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\offset\\mod.rs","byte_start":39927,"byte_end":39990,"line_start":215,"line_end":215,"column_start":5,"column_end":68}}]},{"kind":"Method","id":{"krate":0,"index":70},"span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\offset\\mod.rs","byte_start":40783,"byte_end":40789,"line_start":232,"line_end":232,"column_start":8,"column_end":14},"name":"isoywd","qualname":"::offset::TimeZone::isoywd","value":"fn (&self, year: i32, week: u32, weekday: Weekday) -> Date<Self>","parent":{"krate":0,"index":64},"children":[],"decl_id":null,"docs":" Makes a new `Date` from ISO week date (year and week number), day of the week (DOW) and\n the current time zone.\n This assumes the proleptic Gregorian calendar, with the year 0 being 1 BCE.\n The resulting `Date` may have a different year from the input year.","sig":null,"attributes":[{"value":"/ Makes a new `Date` from ISO week date (year and week number), day of the week (DOW) and","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\offset\\mod.rs","byte_start":40229,"byte_end":40320,"line_start":223,"line_end":223,"column_start":5,"column_end":96}},{"value":"/ the current time zone.","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\offset\\mod.rs","byte_start":40325,"byte_end":40351,"line_start":224,"line_end":224,"column_start":5,"column_end":31}},{"value":"/ This assumes the proleptic Gregorian calendar, with the year 0 being 1 BCE.","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\offset\\mod.rs","byte_start":40356,"byte_end":40435,"line_start":225,"line_end":225,"column_start":5,"column_end":84}},{"value":"/ The resulting `Date` may have a different year from the input year.","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\offset\\mod.rs","byte_start":40440,"byte_end":40511,"line_start":226,"line_end":226,"column_start":5,"column_end":76}},{"value":"/","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\offset\\mod.rs","byte_start":40516,"byte_end":40519,"line_start":227,"line_end":227,"column_start":5,"column_end":8}},{"value":"/ The time zone normally does not affect the date (unless it is between UTC-24 and UTC+24),","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\offset\\mod.rs","byte_start":40524,"byte_end":40617,"line_start":228,"line_end":228,"column_start":5,"column_end":98}},{"value":"/ but it will propagate to the `DateTime` values constructed via this date.","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\offset\\mod.rs","byte_start":40622,"byte_end":40699,"line_start":229,"line_end":229,"column_start":5,"column_end":82}},{"value":"/","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\offset\\mod.rs","byte_start":40704,"byte_end":40707,"line_start":230,"line_end":230,"column_start":5,"column_end":8}},{"value":"/ Panics on the out-of-range date and/or invalid week number.","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\offset\\mod.rs","byte_start":40712,"byte_end":40775,"line_start":231,"line_end":231,"column_start":5,"column_end":68}}]},{"kind":"Method","id":{"krate":0,"index":71},"span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\offset\\mod.rs","byte_start":41480,"byte_end":41490,"line_start":245,"line_end":245,"column_start":8,"column_end":18},"name":"isoywd_opt","qualname":"::offset::TimeZone::isoywd_opt","value":"fn (&self, year: i32, week: u32, weekday: Weekday) -> LocalResult<Date<Self>>","parent":{"krate":0,"index":64},"children":[],"decl_id":null,"docs":" Makes a new `Date` from ISO week date (year and week number), day of the week (DOW) and\n the current time zone.\n This assumes the proleptic Gregorian calendar, with the year 0 being 1 BCE.\n The resulting `Date` may have a different year from the input year.","sig":null,"attributes":[{"value":"/ Makes a new `Date` from ISO week date (year and week number), day of the week (DOW) and","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\offset\\mod.rs","byte_start":40918,"byte_end":41009,"line_start":236,"line_end":236,"column_start":5,"column_end":96}},{"value":"/ the current time zone.","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\offset\\mod.rs","byte_start":41014,"byte_end":41040,"line_start":237,"line_end":237,"column_start":5,"column_end":31}},{"value":"/ This assumes the proleptic Gregorian calendar, with the year 0 being 1 BCE.","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\offset\\mod.rs","byte_start":41045,"byte_end":41124,"line_start":238,"line_end":238,"column_start":5,"column_end":84}},{"value":"/ The resulting `Date` may have a different year from the input year.","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\offset\\mod.rs","byte_start":41129,"byte_end":41200,"line_start":239,"line_end":239,"column_start":5,"column_end":76}},{"value":"/","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\offset\\mod.rs","byte_start":41205,"byte_end":41208,"line_start":240,"line_end":240,"column_start":5,"column_end":8}},{"value":"/ The time zone normally does not affect the date (unless it is between UTC-24 and UTC+24),","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\offset\\mod.rs","byte_start":41213,"byte_end":41306,"line_start":241,"line_end":241,"column_start":5,"column_end":98}},{"value":"/ but it will propagate to the `DateTime` values constructed via this date.","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\offset\\mod.rs","byte_start":41311,"byte_end":41388,"line_start":242,"line_end":242,"column_start":5,"column_end":82}},{"value":"/","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\offset\\mod.rs","byte_start":41393,"byte_end":41396,"line_start":243,"line_end":243,"column_start":5,"column_end":8}},{"value":"/ Returns `None` on the out-of-range date and/or invalid week number.","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\offset\\mod.rs","byte_start":41401,"byte_end":41472,"line_start":244,"line_end":244,"column_start":5,"column_end":76}}]},{"kind":"Method","id":{"krate":0,"index":72},"span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\offset\\mod.rs","byte_start":42039,"byte_end":42048,"line_start":257,"line_end":257,"column_start":8,"column_end":17},"name":"timestamp","qualname":"::offset::TimeZone::timestamp","value":"fn (&self, secs: i64, nsecs: u32) -> DateTime<Self>","parent":{"krate":0,"index":64},"children":[],"decl_id":null,"docs":" Makes a new `DateTime` from the number of non-leap seconds\n since January 1, 1970 0:00:00 UTC (aka \"UNIX timestamp\")\n and the number of nanoseconds since the last whole non-leap second.","sig":null,"attributes":[{"value":"/ Makes a new `DateTime` from the number of non-leap seconds","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\offset\\mod.rs","byte_start":41740,"byte_end":41802,"line_start":252,"line_end":252,"column_start":5,"column_end":67}},{"value":"/ since January 1, 1970 0:00:00 UTC (aka \"UNIX timestamp\")","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\offset\\mod.rs","byte_start":41807,"byte_end":41867,"line_start":253,"line_end":253,"column_start":5,"column_end":65}},{"value":"/ and the number of nanoseconds since the last whole non-leap second.","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\offset\\mod.rs","byte_start":41872,"byte_end":41943,"line_start":254,"line_end":254,"column_start":5,"column_end":76}},{"value":"/","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\offset\\mod.rs","byte_start":41948,"byte_end":41951,"line_start":255,"line_end":255,"column_start":5,"column_end":8}},{"value":"/ Panics on the out-of-range number of seconds and/or invalid nanosecond.","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\offset\\mod.rs","byte_start":41956,"byte_end":42031,"line_start":256,"line_end":256,"column_start":5,"column_end":80}}]},{"kind":"Method","id":{"krate":0,"index":73},"span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\offset\\mod.rs","byte_start":42466,"byte_end":42479,"line_start":266,"line_end":266,"column_start":8,"column_end":21},"name":"timestamp_opt","qualname":"::offset::TimeZone::timestamp_opt","value":"fn (&self, secs: i64, nsecs: u32) -> LocalResult<DateTime<Self>>","parent":{"krate":0,"index":64},"children":[],"decl_id":null,"docs":" Makes a new `DateTime` from the number of non-leap seconds\n since January 1, 1970 0:00:00 UTC (aka \"UNIX timestamp\")\n and the number of nanoseconds since the last whole non-leap second.","sig":null,"attributes":[{"value":"/ Makes a new `DateTime` from the number of non-leap seconds","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\offset\\mod.rs","byte_start":42159,"byte_end":42221,"line_start":261,"line_end":261,"column_start":5,"column_end":67}},{"value":"/ since January 1, 1970 0:00:00 UTC (aka \"UNIX timestamp\")","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\offset\\mod.rs","byte_start":42226,"byte_end":42286,"line_start":262,"line_end":262,"column_start":5,"column_end":65}},{"value":"/ and the number of nanoseconds since the last whole non-leap second.","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\offset\\mod.rs","byte_start":42291,"byte_end":42362,"line_start":263,"line_end":263,"column_start":5,"column_end":76}},{"value":"/","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\offset\\mod.rs","byte_start":42367,"byte_end":42370,"line_start":264,"line_end":264,"column_start":5,"column_end":8}},{"value":"/ Returns `None` on the out-of-range number of seconds and/or invalid nanosecond.","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\offset\\mod.rs","byte_start":42375,"byte_end":42458,"line_start":265,"line_end":265,"column_start":5,"column_end":88}}]},{"kind":"Method","id":{"krate":0,"index":74},"span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\offset\\mod.rs","byte_start":43247,"byte_end":43264,"line_start":283,"line_end":283,"column_start":8,"column_end":25},"name":"datetime_from_str","qualname":"::offset::TimeZone::datetime_from_str","value":"fn (&self, s: &str, fmt: &str) -> ParseResult<DateTime<Self>>","parent":{"krate":0,"index":64},"children":[],"decl_id":null,"docs":" Parses a string with the specified format string and\n returns a `DateTime` with the current offset.\n See the [`format::strftime` module](../../format/strftime/index.html)\n on the supported escape sequences.","sig":null,"attributes":[{"value":"/ Parses a string with the specified format string and","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\offset\\mod.rs","byte_start":42740,"byte_end":42796,"line_start":273,"line_end":273,"column_start":5,"column_end":61}},{"value":"/ returns a `DateTime` with the current offset.","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\offset\\mod.rs","byte_start":42801,"byte_end":42850,"line_start":274,"line_end":274,"column_start":5,"column_end":54}},{"value":"/ See the [`format::strftime` module](../../format/strftime/index.html)","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\offset\\mod.rs","byte_start":42855,"byte_end":42928,"line_start":275,"line_end":275,"column_start":5,"column_end":78}},{"value":"/ on the supported escape sequences.","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\offset\\mod.rs","byte_start":42933,"byte_end":42971,"line_start":276,"line_end":276,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\offset\\mod.rs","byte_start":42976,"byte_end":42979,"line_start":277,"line_end":277,"column_start":5,"column_end":8}},{"value":"/ If the format does not include offsets, the current offset is assumed;","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\offset\\mod.rs","byte_start":42984,"byte_end":43058,"line_start":278,"line_end":278,"column_start":5,"column_end":79}},{"value":"/ otherwise the input should have a matching UTC offset.","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\offset\\mod.rs","byte_start":43063,"byte_end":43121,"line_start":279,"line_end":279,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\offset\\mod.rs","byte_start":43126,"byte_end":43129,"line_start":280,"line_end":280,"column_start":5,"column_end":8}},{"value":"/ See also `DateTime::parse_from_str` which gives a local `DateTime`","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\offset\\mod.rs","byte_start":43134,"byte_end":43204,"line_start":281,"line_end":281,"column_start":5,"column_end":75}},{"value":"/ with parsed `FixedOffset`.","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\offset\\mod.rs","byte_start":43209,"byte_end":43239,"line_start":282,"line_end":282,"column_start":5,"column_end":35}}]},{"kind":"Method","id":{"krate":0,"index":75},"span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\offset\\mod.rs","byte_start":43540,"byte_end":43551,"line_start":290,"line_end":290,"column_start":8,"column_end":19},"name":"from_offset","qualname":"::offset::TimeZone::from_offset","value":"fn (offset: &Self::Offset) -> Self","parent":{"krate":0,"index":64},"children":[],"decl_id":null,"docs":" Reconstructs the time zone from the offset.\n","sig":null,"attributes":[{"value":"/ Reconstructs the time zone from the offset.","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\offset\\mod.rs","byte_start":43485,"byte_end":43532,"line_start":289,"line_end":289,"column_start":5,"column_end":52}}]},{"kind":"Method","id":{"krate":0,"index":76},"span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\offset\\mod.rs","byte_start":43663,"byte_end":43685,"line_start":293,"line_end":293,"column_start":8,"column_end":30},"name":"offset_from_local_date","qualname":"::offset::TimeZone::offset_from_local_date","value":"fn (&self, local: &NaiveDate) -> LocalResult<Self::Offset>","parent":{"krate":0,"index":64},"children":[],"decl_id":null,"docs":" Creates the offset(s) for given local `NaiveDate` if possible.\n","sig":null,"attributes":[{"value":"/ Creates the offset(s) for given local `NaiveDate` if possible.","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\offset\\mod.rs","byte_start":43589,"byte_end":43655,"line_start":292,"line_end":292,"column_start":5,"column_end":71}}]},{"kind":"Method","id":{"krate":0,"index":77},"span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\offset\\mod.rs","byte_start":43825,"byte_end":43851,"line_start":296,"line_end":296,"column_start":8,"column_end":34},"name":"offset_from_local_datetime","qualname":"::offset::TimeZone::offset_from_local_datetime","value":"fn (&self, local: &NaiveDateTime) -> LocalResult<Self::Offset>","parent":{"krate":0,"index":64},"children":[],"decl_id":null,"docs":" Creates the offset(s) for given local `NaiveDateTime` if possible.\n","sig":null,"attributes":[{"value":"/ Creates the offset(s) for given local `NaiveDateTime` if possible.","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\offset\\mod.rs","byte_start":43747,"byte_end":43817,"line_start":295,"line_end":295,"column_start":5,"column_end":75}}]},{"kind":"Method","id":{"krate":0,"index":78},"span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\offset\\mod.rs","byte_start":44001,"byte_end":44016,"line_start":299,"line_end":299,"column_start":8,"column_end":23},"name":"from_local_date","qualname":"::offset::TimeZone::from_local_date","value":"fn (&self, local: &NaiveDate) -> LocalResult<Date<Self>>","parent":{"krate":0,"index":64},"children":[],"decl_id":null,"docs":" Converts the local `NaiveDate` to the timezone-aware `Date` if possible.\n","sig":null,"attributes":[{"value":"/ Converts the local `NaiveDate` to the timezone-aware `Date` if possible.","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\offset\\mod.rs","byte_start":43917,"byte_end":43993,"line_start":298,"line_end":298,"column_start":5,"column_end":81}}]},{"kind":"Method","id":{"krate":0,"index":80},"span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\offset\\mod.rs","byte_start":44314,"byte_end":44333,"line_start":306,"line_end":306,"column_start":8,"column_end":27},"name":"from_local_datetime","qualname":"::offset::TimeZone::from_local_datetime","value":"fn (&self, local: &NaiveDateTime) -> LocalResult<DateTime<Self>>","parent":{"krate":0,"index":64},"children":[],"decl_id":null,"docs":" Converts the local `NaiveDateTime` to the timezone-aware `DateTime` if possible.\n","sig":null,"attributes":[{"value":"/ Converts the local `NaiveDateTime` to the timezone-aware `DateTime` if possible.","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\offset\\mod.rs","byte_start":44222,"byte_end":44306,"line_start":305,"line_end":305,"column_start":5,"column_end":89}}]},{"kind":"Method","id":{"krate":0,"index":82},"span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\offset\\mod.rs","byte_start":44630,"byte_end":44650,"line_start":313,"line_end":313,"column_start":8,"column_end":28},"name":"offset_from_utc_date","qualname":"::offset::TimeZone::offset_from_utc_date","value":"fn (&self, utc: &NaiveDate) -> Self::Offset","parent":{"krate":0,"index":64},"children":[],"decl_id":null,"docs":" Creates the offset for given UTC `NaiveDate`. This cannot fail.\n","sig":null,"attributes":[{"value":"/ Creates the offset for given UTC `NaiveDate`. This cannot fail.","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\offset\\mod.rs","byte_start":44555,"byte_end":44622,"line_start":312,"line_end":312,"column_start":5,"column_end":72}}]},{"kind":"Method","id":{"krate":0,"index":83},"span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\offset\\mod.rs","byte_start":44776,"byte_end":44800,"line_start":316,"line_end":316,"column_start":8,"column_end":32},"name":"offset_from_utc_datetime","qualname":"::offset::TimeZone::offset_from_utc_datetime","value":"fn (&self, utc: &NaiveDateTime) -> Self::Offset","parent":{"krate":0,"index":64},"children":[],"decl_id":null,"docs":" Creates the offset for given UTC `NaiveDateTime`. This cannot fail.\n","sig":null,"attributes":[{"value":"/ Creates the offset for given UTC `NaiveDateTime`. This cannot fail.","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\offset\\mod.rs","byte_start":44697,"byte_end":44768,"line_start":315,"line_end":315,"column_start":5,"column_end":76}}]},{"kind":"Method","id":{"krate":0,"index":84},"span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\offset\\mod.rs","byte_start":45007,"byte_end":45020,"line_start":320,"line_end":320,"column_start":8,"column_end":21},"name":"from_utc_date","qualname":"::offset::TimeZone::from_utc_date","value":"fn (&self, utc: &NaiveDate) -> Date<Self>","parent":{"krate":0,"index":64},"children":[],"decl_id":null,"docs":" Converts the UTC `NaiveDate` to the local time.\n The UTC is continuous and thus this cannot fail (but can give the duplicate local time).\n","sig":null,"attributes":[{"value":"/ Converts the UTC `NaiveDate` to the local time.","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\offset\\mod.rs","byte_start":44851,"byte_end":44902,"line_start":318,"line_end":318,"column_start":5,"column_end":56}},{"value":"/ The UTC is continuous and thus this cannot fail (but can give the duplicate local time).","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\offset\\mod.rs","byte_start":44907,"byte_end":44999,"line_start":319,"line_end":319,"column_start":5,"column_end":97}}]},{"kind":"Method","id":{"krate":0,"index":85},"span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\offset\\mod.rs","byte_start":45300,"byte_end":45317,"line_start":326,"line_end":326,"column_start":8,"column_end":25},"name":"from_utc_datetime","qualname":"::offset::TimeZone::from_utc_datetime","value":"fn (&self, utc: &NaiveDateTime) -> DateTime<Self>","parent":{"krate":0,"index":64},"children":[],"decl_id":null,"docs":" Converts the UTC `NaiveDateTime` to the local time.\n The UTC is continuous and thus this cannot fail (but can give the duplicate local time).\n","sig":null,"attributes":[{"value":"/ Converts the UTC `NaiveDateTime` to the local time.","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\offset\\mod.rs","byte_start":45140,"byte_end":45195,"line_start":324,"line_end":324,"column_start":5,"column_end":60}},{"value":"/ The UTC is continuous and thus this cannot fail (but can give the duplicate local time).","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\offset\\mod.rs","byte_start":45200,"byte_end":45292,"line_start":325,"line_end":325,"column_start":5,"column_end":97}}]},{"kind":"Mod","id":{"krate":0,"index":86},"span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\offset\\utc.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"utc","qualname":"::offset::utc","value":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\offset\\utc.rs","parent":null,"children":[{"krate":0,"index":87},{"krate":0,"index":88},{"krate":0,"index":89},{"krate":0,"index":90},{"krate":0,"index":91},{"krate":0,"index":92},{"krate":0,"index":93},{"krate":0,"index":94},{"krate":0,"index":1158},{"krate":0,"index":1168},{"krate":0,"index":1166},{"krate":0,"index":1163},{"krate":0,"index":1164},{"krate":0,"index":1160},{"krate":0,"index":1161},{"krate":0,"index":98},{"krate":0,"index":101},{"krate":0,"index":108},{"krate":0,"index":110},{"krate":0,"index":112}],"decl_id":null,"docs":" The UTC (Coordinated Universal Time) time zone.\n","sig":null,"attributes":[{"value":"!\n * The UTC (Coordinated Universal Time) time zone.\n */","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\offset\\utc.rs","byte_start":45616,"byte_end":45674,"line_start":5,"line_end":7,"column_start":1,"column_end":4}}]},{"kind":"Struct","id":{"krate":0,"index":1158},"span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\offset\\utc.rs","byte_start":46166,"byte_end":46169,"line_start":23,"line_end":23,"column_start":12,"column_end":15},"name":"UTC","qualname":"::offset::utc::UTC","value":"","parent":null,"children":[],"decl_id":null,"docs":" The UTC time zone. This is the most efficient time zone when you don't need the local time.\n It is also used as an offset (which is also a dummy type).\n","sig":null,"attributes":[{"value":"/ The UTC time zone. This is the most efficient time zone when you don't need the local time.","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\offset\\utc.rs","byte_start":45877,"byte_end":45972,"line_start":19,"line_end":19,"column_start":1,"column_end":96}},{"value":"/ It is also used as an offset (which is also a dummy type).","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\offset\\utc.rs","byte_start":45973,"byte_end":46035,"line_start":20,"line_end":20,"column_start":1,"column_end":63}}]},{"kind":"Method","id":{"krate":0,"index":99},"span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\offset\\utc.rs","byte_start":46258,"byte_end":46263,"line_start":27,"line_end":27,"column_start":12,"column_end":17},"name":"today","qualname":"<UTC>::today","value":"fn () -> Date<UTC>","parent":null,"children":[],"decl_id":null,"docs":" Returns a `Date` which corresponds to the current date.\n","sig":null,"attributes":[{"value":"/ Returns a `Date` which corresponds to the current date.","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\offset\\utc.rs","byte_start":46187,"byte_end":46246,"line_start":26,"line_end":26,"column_start":5,"column_end":64}}]},{"kind":"Method","id":{"krate":0,"index":100},"span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\offset\\utc.rs","byte_start":46381,"byte_end":46384,"line_start":30,"line_end":30,"column_start":12,"column_end":15},"name":"now","qualname":"<UTC>::now","value":"fn () -> DateTime<UTC>","parent":null,"children":[],"decl_id":null,"docs":" Returns a `DateTime` which corresponds to the current date.\n","sig":null,"attributes":[{"value":"/ Returns a `DateTime` which corresponds to the current date.","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\offset\\utc.rs","byte_start":46306,"byte_end":46369,"line_start":29,"line_end":29,"column_start":5,"column_end":68}}]},{"kind":"Mod","id":{"krate":0,"index":114},"span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\offset\\fixed.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"fixed","qualname":"::offset::fixed","value":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\offset\\fixed.rs","parent":null,"children":[{"krate":0,"index":115},{"krate":0,"index":116},{"krate":0,"index":117},{"krate":0,"index":118},{"krate":0,"index":119},{"krate":0,"index":120},{"krate":0,"index":1169},{"krate":0,"index":1180},{"krate":0,"index":1178},{"krate":0,"index":1174},{"krate":0,"index":1175},{"krate":0,"index":1171},{"krate":0,"index":1172},{"krate":0,"index":124},{"krate":0,"index":129},{"krate":0,"index":136},{"krate":0,"index":138},{"krate":0,"index":140}],"decl_id":null,"docs":" The time zone which has a fixed offset from UTC.\n","sig":null,"attributes":[{"value":"!\n * The time zone which has a fixed offset from UTC.\n */","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\offset\\fixed.rs","byte_start":47484,"byte_end":47543,"line_start":5,"line_end":7,"column_start":1,"column_end":4}}]},{"kind":"Struct","id":{"krate":0,"index":1169},"span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\offset\\fixed.rs","byte_start":47838,"byte_end":47849,"line_start":19,"line_end":19,"column_start":12,"column_end":23},"name":"FixedOffset","qualname":"::offset::fixed::FixedOffset","value":"FixedOffset {  }","parent":null,"children":[{"krate":0,"index":1170}],"decl_id":null,"docs":" The time zone with fixed offset, from UTC-23:59:59 to UTC+23:59:59.\n","sig":null,"attributes":[{"value":"/ The time zone with fixed offset, from UTC-23:59:59 to UTC+23:59:59.","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\offset\\fixed.rs","byte_start":47717,"byte_end":47788,"line_start":17,"line_end":17,"column_start":1,"column_end":72}}]},{"kind":"Method","id":{"krate":0,"index":125},"span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\offset\\fixed.rs","byte_start":48699,"byte_end":48703,"line_start":45,"line_end":45,"column_start":12,"column_end":16},"name":"east","qualname":"<FixedOffset>::east","value":"fn (secs: i32) -> FixedOffset","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `FixedOffset` for the Eastern Hemisphere with given timezone difference.\n The negative `secs` means the Western Hemisphere.","sig":null,"attributes":[{"value":"/ Makes a new `FixedOffset` for the Eastern Hemisphere with given timezone difference.","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\offset\\fixed.rs","byte_start":48490,"byte_end":48578,"line_start":41,"line_end":41,"column_start":5,"column_end":93}},{"value":"/ The negative `secs` means the Western Hemisphere.","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\offset\\fixed.rs","byte_start":48583,"byte_end":48636,"line_start":42,"line_end":42,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\offset\\fixed.rs","byte_start":48641,"byte_end":48644,"line_start":43,"line_end":43,"column_start":5,"column_end":8}},{"value":"/ Panics on the out-of-bound `secs`.","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\offset\\fixed.rs","byte_start":48649,"byte_end":48687,"line_start":44,"line_end":44,"column_start":5,"column_end":43}}]},{"kind":"Method","id":{"krate":0,"index":126},"span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\offset\\fixed.rs","byte_start":49038,"byte_end":49046,"line_start":53,"line_end":53,"column_start":12,"column_end":20},"name":"east_opt","qualname":"<FixedOffset>::east_opt","value":"fn (secs: i32) -> Option<FixedOffset>","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `FixedOffset` for the Eastern Hemisphere with given timezone difference.\n The negative `secs` means the Western Hemisphere.","sig":null,"attributes":[{"value":"/ Makes a new `FixedOffset` for the Eastern Hemisphere with given timezone difference.","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\offset\\fixed.rs","byte_start":48821,"byte_end":48909,"line_start":49,"line_end":49,"column_start":5,"column_end":93}},{"value":"/ The negative `secs` means the Western Hemisphere.","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\offset\\fixed.rs","byte_start":48914,"byte_end":48967,"line_start":50,"line_end":50,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\offset\\fixed.rs","byte_start":48972,"byte_end":48975,"line_start":51,"line_end":51,"column_start":5,"column_end":8}},{"value":"/ Returns `None` on the out-of-bound `secs`.","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\offset\\fixed.rs","byte_start":48980,"byte_end":49026,"line_start":52,"line_end":52,"column_start":5,"column_end":51}}]},{"kind":"Method","id":{"krate":0,"index":127},"span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\offset\\fixed.rs","byte_start":49446,"byte_end":49450,"line_start":65,"line_end":65,"column_start":12,"column_end":16},"name":"west","qualname":"<FixedOffset>::west","value":"fn (secs: i32) -> FixedOffset","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `FixedOffset` for the Western Hemisphere with given timezone difference.\n The negative `secs` means the Eastern Hemisphere.","sig":null,"attributes":[{"value":"/ Makes a new `FixedOffset` for the Western Hemisphere with given timezone difference.","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\offset\\fixed.rs","byte_start":49237,"byte_end":49325,"line_start":61,"line_end":61,"column_start":5,"column_end":93}},{"value":"/ The negative `secs` means the Eastern Hemisphere.","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\offset\\fixed.rs","byte_start":49330,"byte_end":49383,"line_start":62,"line_end":62,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\offset\\fixed.rs","byte_start":49388,"byte_end":49391,"line_start":63,"line_end":63,"column_start":5,"column_end":8}},{"value":"/ Panics on the out-of-bound `secs`.","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\offset\\fixed.rs","byte_start":49396,"byte_end":49434,"line_start":64,"line_end":64,"column_start":5,"column_end":43}}]},{"kind":"Method","id":{"krate":0,"index":128},"span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\offset\\fixed.rs","byte_start":49785,"byte_end":49793,"line_start":73,"line_end":73,"column_start":12,"column_end":20},"name":"west_opt","qualname":"<FixedOffset>::west_opt","value":"fn (secs: i32) -> Option<FixedOffset>","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `FixedOffset` for the Western Hemisphere with given timezone difference.\n The negative `secs` means the Eastern Hemisphere.","sig":null,"attributes":[{"value":"/ Makes a new `FixedOffset` for the Western Hemisphere with given timezone difference.","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\offset\\fixed.rs","byte_start":49568,"byte_end":49656,"line_start":69,"line_end":69,"column_start":5,"column_end":93}},{"value":"/ The negative `secs` means the Eastern Hemisphere.","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\offset\\fixed.rs","byte_start":49661,"byte_end":49714,"line_start":70,"line_end":70,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\offset\\fixed.rs","byte_start":49719,"byte_end":49722,"line_start":71,"line_end":71,"column_start":5,"column_end":8}},{"value":"/ Returns `None` on the out-of-bound `secs`.","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\offset\\fixed.rs","byte_start":49727,"byte_end":49773,"line_start":72,"line_end":72,"column_start":5,"column_end":51}}]},{"kind":"Mod","id":{"krate":0,"index":142},"span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\offset\\local.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"local","qualname":"::offset::local","value":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\offset\\local.rs","parent":null,"children":[{"krate":0,"index":143},{"krate":0,"index":144},{"krate":0,"index":147},{"krate":0,"index":148},{"krate":0,"index":149},{"krate":0,"index":150},{"krate":0,"index":151},{"krate":0,"index":152},{"krate":0,"index":153},{"krate":0,"index":156},{"krate":0,"index":157},{"krate":0,"index":159},{"krate":0,"index":1181},{"krate":0,"index":1185},{"krate":0,"index":1183},{"krate":0,"index":160},{"krate":0,"index":163}],"decl_id":null,"docs":" The local (system) time zone.\n","sig":null,"attributes":[{"value":"!\n * The local (system) time zone.\n */","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\offset\\local.rs","byte_start":54473,"byte_end":54513,"line_start":5,"line_end":7,"column_start":1,"column_end":4}}]},{"kind":"Struct","id":{"krate":0,"index":1181},"span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\offset\\local.rs","byte_start":57037,"byte_end":57042,"line_start":74,"line_end":74,"column_start":12,"column_end":17},"name":"Local","qualname":"::offset::local::Local","value":"","parent":null,"children":[],"decl_id":null,"docs":" The local timescale. This is implemented via the standard `time` crate.\n","sig":null,"attributes":[{"value":"/ The local timescale. This is implemented via the standard `time` crate.","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\offset\\local.rs","byte_start":56846,"byte_end":56921,"line_start":71,"line_end":71,"column_start":1,"column_end":76}}]},{"kind":"Method","id":{"krate":0,"index":161},"span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\offset\\local.rs","byte_start":57133,"byte_end":57138,"line_start":78,"line_end":78,"column_start":12,"column_end":17},"name":"today","qualname":"<Local>::today","value":"fn () -> Date<Local>","parent":null,"children":[],"decl_id":null,"docs":" Returns a `Date` which corresponds to the current date.\n","sig":null,"attributes":[{"value":"/ Returns a `Date` which corresponds to the current date.","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\offset\\local.rs","byte_start":57062,"byte_end":57121,"line_start":77,"line_end":77,"column_start":5,"column_end":64}}]},{"kind":"Method","id":{"krate":0,"index":162},"span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\offset\\local.rs","byte_start":57272,"byte_end":57275,"line_start":83,"line_end":83,"column_start":12,"column_end":15},"name":"now","qualname":"<Local>::now","value":"fn () -> DateTime<Local>","parent":null,"children":[],"decl_id":null,"docs":" Returns a `DateTime` which corresponds to the current date.\n","sig":null,"attributes":[{"value":"/ Returns a `DateTime` which corresponds to the current date.","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\offset\\local.rs","byte_start":57197,"byte_end":57260,"line_start":82,"line_end":82,"column_start":5,"column_end":68}}]},{"kind":"Mod","id":{"krate":0,"index":177},"span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\lib.rs","byte_start":16434,"byte_end":16439,"line_start":361,"line_end":361,"column_start":9,"column_end":14},"name":"naive","qualname":"::naive","value":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\lib.rs","parent":null,"children":[{"krate":0,"index":178},{"krate":0,"index":373},{"krate":0,"index":446}],"decl_id":null,"docs":" Date and time types which do not concern about the timezones.","sig":null,"attributes":[{"value":"! Date and time types which do not concern about the timezones.","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\lib.rs","byte_start":16446,"byte_end":16511,"line_start":362,"line_end":362,"column_start":5,"column_end":70}},{"value":"!","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\lib.rs","byte_start":16516,"byte_end":16519,"line_start":363,"line_end":363,"column_start":5,"column_end":8}},{"value":"! They are primarily building blocks for other types","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\lib.rs","byte_start":16524,"byte_end":16578,"line_start":364,"line_end":364,"column_start":5,"column_end":59}},{"value":"! (e.g. [`TimeZone`](../offset/trait.TimeZone.html)),","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\lib.rs","byte_start":16583,"byte_end":16638,"line_start":365,"line_end":365,"column_start":5,"column_end":60}},{"value":"! but can be also used for the simpler date and time handling.","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\lib.rs","byte_start":16643,"byte_end":16707,"line_start":366,"line_end":366,"column_start":5,"column_end":69}}]},{"kind":"Mod","id":{"krate":0,"index":178},"span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\date.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"date","qualname":"::naive::date","value":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\date.rs","parent":null,"children":[{"krate":0,"index":179},{"krate":0,"index":183},{"krate":0,"index":186},{"krate":0,"index":187},{"krate":0,"index":190},{"krate":0,"index":191},{"krate":0,"index":192},{"krate":0,"index":193},{"krate":0,"index":194},{"krate":0,"index":198},{"krate":0,"index":205},{"krate":0,"index":210},{"krate":0,"index":211},{"krate":0,"index":1186},{"krate":0,"index":1202},{"krate":0,"index":1203},{"krate":0,"index":1199},{"krate":0,"index":1200},{"krate":0,"index":1193},{"krate":0,"index":1191},{"krate":0,"index":1190},{"krate":0,"index":1188},{"krate":0,"index":212},{"krate":0,"index":213},{"krate":0,"index":214},{"krate":0,"index":256},{"krate":0,"index":273},{"krate":0,"index":276},{"krate":0,"index":279},{"krate":0,"index":282},{"krate":0,"index":285},{"krate":0,"index":287},{"krate":0,"index":289},{"krate":0,"index":293}],"decl_id":null,"docs":" ISO 8601 calendar date without timezone.","sig":null,"attributes":[{"value":"! ISO 8601 calendar date without timezone.","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\date.rs","byte_start":59387,"byte_end":59431,"line_start":5,"line_end":5,"column_start":1,"column_end":45}},{"value":"!","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\date.rs","byte_start":59432,"byte_end":59435,"line_start":6,"line_end":6,"column_start":1,"column_end":4}},{"value":"! # Calendar Date","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\date.rs","byte_start":59436,"byte_end":59455,"line_start":7,"line_end":7,"column_start":1,"column_end":20}},{"value":"!","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\date.rs","byte_start":59456,"byte_end":59459,"line_start":8,"line_end":8,"column_start":1,"column_end":4}},{"value":"! The ISO 8601 **calendar date** follows the proleptic Gregorian calendar.","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\date.rs","byte_start":59460,"byte_end":59536,"line_start":9,"line_end":9,"column_start":1,"column_end":77}},{"value":"! It is like a normal civil calendar but note some slight differences:","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\date.rs","byte_start":59537,"byte_end":59609,"line_start":10,"line_end":10,"column_start":1,"column_end":73}},{"value":"!","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\date.rs","byte_start":59610,"byte_end":59613,"line_start":11,"line_end":11,"column_start":1,"column_end":4}},{"value":"! * Dates before the Gregorian calendar's inception in 1582 are defined via the extrapolation.","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\date.rs","byte_start":59614,"byte_end":59710,"line_start":12,"line_end":12,"column_start":1,"column_end":97}},{"value":"!   Be careful, as historical dates are often noted in the Julian calendar and others","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\date.rs","byte_start":59711,"byte_end":59798,"line_start":13,"line_end":13,"column_start":1,"column_end":88}},{"value":"!   and the transition to Gregorian may differ across countries (as late as early 20C).","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\date.rs","byte_start":59799,"byte_end":59888,"line_start":14,"line_end":14,"column_start":1,"column_end":90}},{"value":"!","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\date.rs","byte_start":59889,"byte_end":59892,"line_start":15,"line_end":15,"column_start":1,"column_end":4}},{"value":"!   (Some example: Both Shakespeare from Britain and Cervantes from Spain seemingly died","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\date.rs","byte_start":59893,"byte_end":59983,"line_start":16,"line_end":16,"column_start":1,"column_end":91}},{"value":"!   on the same calendar date---April 23, 1616---but in the different calendar.","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\date.rs","byte_start":59984,"byte_end":60065,"line_start":17,"line_end":17,"column_start":1,"column_end":82}},{"value":"!   Britain used the Julian calendar at that time, so Shakespeare's death is later.)","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\date.rs","byte_start":60066,"byte_end":60152,"line_start":18,"line_end":18,"column_start":1,"column_end":87}},{"value":"!","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\date.rs","byte_start":60153,"byte_end":60156,"line_start":19,"line_end":19,"column_start":1,"column_end":4}},{"value":"! * ISO 8601 calendars has the year 0, which is 1 BCE (a year before 1 CE).","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\date.rs","byte_start":60157,"byte_end":60234,"line_start":20,"line_end":20,"column_start":1,"column_end":78}},{"value":"!   If you need a typical BCE/BC and CE/AD notation for year numbers,","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\date.rs","byte_start":60235,"byte_end":60306,"line_start":21,"line_end":21,"column_start":1,"column_end":72}},{"value":"!   use the [`Datelike::year_ce`](../../trait.Datelike.html#method.year_ce) method.","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\date.rs","byte_start":60307,"byte_end":60392,"line_start":22,"line_end":22,"column_start":1,"column_end":86}},{"value":"!","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\date.rs","byte_start":60393,"byte_end":60396,"line_start":23,"line_end":23,"column_start":1,"column_end":4}},{"value":"! # Week Date","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\date.rs","byte_start":60397,"byte_end":60412,"line_start":24,"line_end":24,"column_start":1,"column_end":16}},{"value":"!","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\date.rs","byte_start":60413,"byte_end":60416,"line_start":25,"line_end":25,"column_start":1,"column_end":4}},{"value":"! The ISO 8601 **week date** is a triple of year number, week number","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\date.rs","byte_start":60417,"byte_end":60487,"line_start":26,"line_end":26,"column_start":1,"column_end":71}},{"value":"! and [day of the week](../../enum.Weekday.html) with the following rules:","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\date.rs","byte_start":60488,"byte_end":60564,"line_start":27,"line_end":27,"column_start":1,"column_end":77}},{"value":"!","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\date.rs","byte_start":60565,"byte_end":60568,"line_start":28,"line_end":28,"column_start":1,"column_end":4}},{"value":"! * A week consists of Monday through Sunday, and is always numbered within some year.","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\date.rs","byte_start":60569,"byte_end":60657,"line_start":29,"line_end":29,"column_start":1,"column_end":89}},{"value":"!   The week number ranges from 1 to 52 or 53 depending on the year.","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\date.rs","byte_start":60658,"byte_end":60728,"line_start":30,"line_end":30,"column_start":1,"column_end":71}},{"value":"!","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\date.rs","byte_start":60729,"byte_end":60732,"line_start":31,"line_end":31,"column_start":1,"column_end":4}},{"value":"! * The week 1 of given year is defined as the first week containing January 4 of that year,","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\date.rs","byte_start":60733,"byte_end":60827,"line_start":32,"line_end":32,"column_start":1,"column_end":95}},{"value":"!   or equivalently, the first week containing four or more days in that year.","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\date.rs","byte_start":60828,"byte_end":60908,"line_start":33,"line_end":33,"column_start":1,"column_end":81}},{"value":"!","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\date.rs","byte_start":60909,"byte_end":60912,"line_start":34,"line_end":34,"column_start":1,"column_end":4}},{"value":"! * The year number in the week date may *not* correspond to the actual Gregorian year.","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\date.rs","byte_start":60913,"byte_end":61002,"line_start":35,"line_end":35,"column_start":1,"column_end":90}},{"value":"!   For example, January 3, 2016 (Sunday) was on the last (53rd) week of 2015.","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\date.rs","byte_start":61003,"byte_end":61083,"line_start":36,"line_end":36,"column_start":1,"column_end":81}},{"value":"!","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\date.rs","byte_start":61084,"byte_end":61087,"line_start":37,"line_end":37,"column_start":1,"column_end":4}},{"value":"! Chrono's date types default to the ISO 8601 [calendar date](#calendar-date),","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\date.rs","byte_start":61088,"byte_end":61168,"line_start":38,"line_end":38,"column_start":1,"column_end":81}},{"value":"! but the [`Datelike::isoweekdate`](../../trait.Datelike.html#tymethod.isoweekdate) method","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\date.rs","byte_start":61169,"byte_end":61261,"line_start":39,"line_end":39,"column_start":1,"column_end":93}},{"value":"! can be used to get the corresponding week date.","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\date.rs","byte_start":61262,"byte_end":61313,"line_start":40,"line_end":40,"column_start":1,"column_end":52}},{"value":"!","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\date.rs","byte_start":61314,"byte_end":61317,"line_start":41,"line_end":41,"column_start":1,"column_end":4}},{"value":"! # Ordinal Date","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\date.rs","byte_start":61318,"byte_end":61336,"line_start":42,"line_end":42,"column_start":1,"column_end":19}},{"value":"!","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\date.rs","byte_start":61337,"byte_end":61340,"line_start":43,"line_end":43,"column_start":1,"column_end":4}},{"value":"! The ISO 8601 **ordinal date** is a pair of year number and day of the year (\"ordinal\").","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\date.rs","byte_start":61341,"byte_end":61432,"line_start":44,"line_end":44,"column_start":1,"column_end":92}},{"value":"! The ordinal number ranges from 1 to 365 or 366 depending on the year.","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\date.rs","byte_start":61433,"byte_end":61506,"line_start":45,"line_end":45,"column_start":1,"column_end":74}},{"value":"! The year number is same to that of the [calendar date](#calendar-date).","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\date.rs","byte_start":61507,"byte_end":61582,"line_start":46,"line_end":46,"column_start":1,"column_end":76}},{"value":"!","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\date.rs","byte_start":61583,"byte_end":61586,"line_start":47,"line_end":47,"column_start":1,"column_end":4}},{"value":"! This is currently the internal format of Chrono's date types.","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\date.rs","byte_start":61587,"byte_end":61652,"line_start":48,"line_end":48,"column_start":1,"column_end":66}}]},{"kind":"Struct","id":{"krate":0,"index":1186},"span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\date.rs","byte_start":63509,"byte_end":63518,"line_start":94,"line_end":94,"column_start":12,"column_end":21},"name":"NaiveDate","qualname":"::naive::date::NaiveDate","value":"NaiveDate {  }","parent":null,"children":[{"krate":0,"index":1187}],"decl_id":null,"docs":" ISO 8601 calendar date without timezone.\n Allows for every [proleptic Gregorian date](./index.html#calendar-date)\n from Jan 1, 262145 BCE to Dec 31, 262143 CE.\n Also supports the conversion from ISO 8601 ordinal and week date.\n","sig":null,"attributes":[{"value":"/ ISO 8601 calendar date without timezone.","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\date.rs","byte_start":63203,"byte_end":63247,"line_start":89,"line_end":89,"column_start":1,"column_end":45}},{"value":"/ Allows for every [proleptic Gregorian date](./index.html#calendar-date)","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\date.rs","byte_start":63248,"byte_end":63323,"line_start":90,"line_end":90,"column_start":1,"column_end":76}},{"value":"/ from Jan 1, 262145 BCE to Dec 31, 262143 CE.","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\date.rs","byte_start":63324,"byte_end":63372,"line_start":91,"line_end":91,"column_start":1,"column_end":49}},{"value":"/ Also supports the conversion from ISO 8601 ordinal and week date.","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\date.rs","byte_start":63373,"byte_end":63442,"line_start":92,"line_end":92,"column_start":1,"column_end":70}}]},{"kind":"Const","id":{"krate":0,"index":212},"span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\date.rs","byte_start":63637,"byte_end":63640,"line_start":99,"line_end":99,"column_start":11,"column_end":14},"name":"MIN","qualname":"::naive::date::MIN","value":"NaiveDate","parent":null,"children":[],"decl_id":null,"docs":" The minimum possible `NaiveDate` (January 1, 262145 BCE).\n","sig":null,"attributes":[{"value":"/ The minimum possible `NaiveDate` (January 1, 262145 BCE).","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\date.rs","byte_start":63565,"byte_end":63626,"line_start":98,"line_end":98,"column_start":1,"column_end":62}}]},{"kind":"Const","id":{"krate":0,"index":213},"span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\date.rs","byte_start":63790,"byte_end":63793,"line_start":101,"line_end":101,"column_start":11,"column_end":14},"name":"MAX","qualname":"::naive::date::MAX","value":"NaiveDate","parent":null,"children":[],"decl_id":null,"docs":" The maximum possible `NaiveDate` (December 31, 262143 CE).\n","sig":null,"attributes":[{"value":"/ The maximum possible `NaiveDate` (December 31, 262143 CE).","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\date.rs","byte_start":63717,"byte_end":63779,"line_start":100,"line_end":100,"column_start":1,"column_end":63}}]},{"kind":"Method","id":{"krate":0,"index":217},"span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\date.rs","byte_start":66302,"byte_end":66310,"line_start":168,"line_end":168,"column_start":12,"column_end":20},"name":"from_ymd","qualname":"<NaiveDate>::from_ymd","value":"fn (year: i32, month: u32, day: u32) -> NaiveDate","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `NaiveDate` from the [calendar date](./index.html#calendar-date)\n (year, month and day).","sig":null,"attributes":[{"value":"/ Makes a new `NaiveDate` from the [calendar date](./index.html#calendar-date)","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\date.rs","byte_start":65612,"byte_end":65692,"line_start":150,"line_end":150,"column_start":5,"column_end":85}},{"value":"/ (year, month and day).","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\date.rs","byte_start":65697,"byte_end":65723,"line_start":151,"line_end":151,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\date.rs","byte_start":65728,"byte_end":65731,"line_start":152,"line_end":152,"column_start":5,"column_end":8}},{"value":"/ Panics on the out-of-range date, invalid month and/or day.","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\date.rs","byte_start":65736,"byte_end":65798,"line_start":153,"line_end":153,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\date.rs","byte_start":65803,"byte_end":65806,"line_start":154,"line_end":154,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\date.rs","byte_start":65811,"byte_end":65824,"line_start":155,"line_end":155,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\date.rs","byte_start":65829,"byte_end":65832,"line_start":156,"line_end":156,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\date.rs","byte_start":65837,"byte_end":65845,"line_start":157,"line_end":157,"column_start":5,"column_end":13}},{"value":"/ use chrono::{NaiveDate, Datelike, Weekday};","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\date.rs","byte_start":65850,"byte_end":65897,"line_start":158,"line_end":158,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\date.rs","byte_start":65902,"byte_end":65905,"line_start":159,"line_end":159,"column_start":5,"column_end":8}},{"value":"/ let d = NaiveDate::from_ymd(2015, 3, 14);","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\date.rs","byte_start":65910,"byte_end":65955,"line_start":160,"line_end":160,"column_start":5,"column_end":50}},{"value":"/ assert_eq!(d.year(), 2015);","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\date.rs","byte_start":65960,"byte_end":65991,"line_start":161,"line_end":161,"column_start":5,"column_end":36}},{"value":"/ assert_eq!(d.month(), 3);","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\date.rs","byte_start":65996,"byte_end":66025,"line_start":162,"line_end":162,"column_start":5,"column_end":34}},{"value":"/ assert_eq!(d.day(), 14);","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\date.rs","byte_start":66030,"byte_end":66058,"line_start":163,"line_end":163,"column_start":5,"column_end":33}},{"value":"/ assert_eq!(d.ordinal(), 73); // day of year","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\date.rs","byte_start":66063,"byte_end":66110,"line_start":164,"line_end":164,"column_start":5,"column_end":52}},{"value":"/ assert_eq!(d.isoweekdate(), (2015, 11, Weekday::Sat)); // ISO week and weekday","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\date.rs","byte_start":66115,"byte_end":66197,"line_start":165,"line_end":165,"column_start":5,"column_end":87}},{"value":"/ assert_eq!(d.num_days_from_ce(), 735671); // days since January 1, 1 CE","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\date.rs","byte_start":66202,"byte_end":66277,"line_start":166,"line_end":166,"column_start":5,"column_end":80}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\date.rs","byte_start":66282,"byte_end":66290,"line_start":167,"line_end":167,"column_start":5,"column_end":13}}]},{"kind":"Method","id":{"krate":0,"index":218},"span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\date.rs","byte_start":67119,"byte_end":67131,"line_start":190,"line_end":190,"column_start":12,"column_end":24},"name":"from_ymd_opt","qualname":"<NaiveDate>::from_ymd_opt","value":"fn (year: i32, month: u32, day: u32) -> Option<NaiveDate>","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `NaiveDate` from the [calendar date](./index.html#calendar-date)\n (year, month and day).","sig":null,"attributes":[{"value":"/ Makes a new `NaiveDate` from the [calendar date](./index.html#calendar-date)","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\date.rs","byte_start":66459,"byte_end":66539,"line_start":172,"line_end":172,"column_start":5,"column_end":85}},{"value":"/ (year, month and day).","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\date.rs","byte_start":66544,"byte_end":66570,"line_start":173,"line_end":173,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\date.rs","byte_start":66575,"byte_end":66578,"line_start":174,"line_end":174,"column_start":5,"column_end":8}},{"value":"/ Returns `None` on the out-of-range date, invalid month and/or day.","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\date.rs","byte_start":66583,"byte_end":66653,"line_start":175,"line_end":175,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\date.rs","byte_start":66658,"byte_end":66661,"line_start":176,"line_end":176,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\date.rs","byte_start":66666,"byte_end":66679,"line_start":177,"line_end":177,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\date.rs","byte_start":66684,"byte_end":66687,"line_start":178,"line_end":178,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\date.rs","byte_start":66692,"byte_end":66700,"line_start":179,"line_end":179,"column_start":5,"column_end":13}},{"value":"/ use chrono::NaiveDate;","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\date.rs","byte_start":66705,"byte_end":66731,"line_start":180,"line_end":180,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\date.rs","byte_start":66736,"byte_end":66739,"line_start":181,"line_end":181,"column_start":5,"column_end":8}},{"value":"/ let ymd = |y,m,d| NaiveDate::from_ymd_opt(y, m, d);","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\date.rs","byte_start":66744,"byte_end":66799,"line_start":182,"line_end":182,"column_start":5,"column_end":60}},{"value":"/ assert!(ymd(2015, 3, 14).is_some());","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\date.rs","byte_start":66804,"byte_end":66844,"line_start":183,"line_end":183,"column_start":5,"column_end":45}},{"value":"/ assert!(ymd(2015, 0, 14).is_none());","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\date.rs","byte_start":66849,"byte_end":66889,"line_start":184,"line_end":184,"column_start":5,"column_end":45}},{"value":"/ assert!(ymd(2015, 2, 29).is_none());","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\date.rs","byte_start":66894,"byte_end":66934,"line_start":185,"line_end":185,"column_start":5,"column_end":45}},{"value":"/ assert!(ymd(-4, 2, 29).is_some()); // 5 BCE is a leap year","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\date.rs","byte_start":66939,"byte_end":67001,"line_start":186,"line_end":186,"column_start":5,"column_end":67}},{"value":"/ assert!(ymd(400000, 1, 1).is_none());","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\date.rs","byte_start":67006,"byte_end":67047,"line_start":187,"line_end":187,"column_start":5,"column_end":46}},{"value":"/ assert!(ymd(-400000, 1, 1).is_none());","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\date.rs","byte_start":67052,"byte_end":67094,"line_start":188,"line_end":188,"column_start":5,"column_end":47}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\date.rs","byte_start":67099,"byte_end":67107,"line_start":189,"line_end":189,"column_start":5,"column_end":13}}]},{"kind":"Method","id":{"krate":0,"index":219},"span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\date.rs","byte_start":67985,"byte_end":67992,"line_start":213,"line_end":213,"column_start":12,"column_end":19},"name":"from_yo","qualname":"<NaiveDate>::from_yo","value":"fn (year: i32, ordinal: u32) -> NaiveDate","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `NaiveDate` from the [ordinal date](./index.html#ordinal-date)\n (year and day of the year).","sig":null,"attributes":[{"value":"/ Makes a new `NaiveDate` from the [ordinal date](./index.html#ordinal-date)","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\date.rs","byte_start":67310,"byte_end":67388,"line_start":195,"line_end":195,"column_start":5,"column_end":83}},{"value":"/ (year and day of the year).","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\date.rs","byte_start":67393,"byte_end":67424,"line_start":196,"line_end":196,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\date.rs","byte_start":67429,"byte_end":67432,"line_start":197,"line_end":197,"column_start":5,"column_end":8}},{"value":"/ Panics on the out-of-range date and/or invalid day of year.","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\date.rs","byte_start":67437,"byte_end":67500,"line_start":198,"line_end":198,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\date.rs","byte_start":67505,"byte_end":67508,"line_start":199,"line_end":199,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\date.rs","byte_start":67513,"byte_end":67526,"line_start":200,"line_end":200,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\date.rs","byte_start":67531,"byte_end":67534,"line_start":201,"line_end":201,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\date.rs","byte_start":67539,"byte_end":67547,"line_start":202,"line_end":202,"column_start":5,"column_end":13}},{"value":"/ use chrono::{NaiveDate, Datelike, Weekday};","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\date.rs","byte_start":67552,"byte_end":67599,"line_start":203,"line_end":203,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\date.rs","byte_start":67604,"byte_end":67607,"line_start":204,"line_end":204,"column_start":5,"column_end":8}},{"value":"/ let d = NaiveDate::from_yo(2015, 73);","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\date.rs","byte_start":67612,"byte_end":67653,"line_start":205,"line_end":205,"column_start":5,"column_end":46}},{"value":"/ assert_eq!(d.ordinal(), 73);","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\date.rs","byte_start":67658,"byte_end":67690,"line_start":206,"line_end":206,"column_start":5,"column_end":37}},{"value":"/ assert_eq!(d.year(), 2015);","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\date.rs","byte_start":67695,"byte_end":67726,"line_start":207,"line_end":207,"column_start":5,"column_end":36}},{"value":"/ assert_eq!(d.month(), 3);","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\date.rs","byte_start":67731,"byte_end":67760,"line_start":208,"line_end":208,"column_start":5,"column_end":34}},{"value":"/ assert_eq!(d.day(), 14);","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\date.rs","byte_start":67765,"byte_end":67793,"line_start":209,"line_end":209,"column_start":5,"column_end":33}},{"value":"/ assert_eq!(d.isoweekdate(), (2015, 11, Weekday::Sat)); // ISO week and weekday","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\date.rs","byte_start":67798,"byte_end":67880,"line_start":210,"line_end":210,"column_start":5,"column_end":87}},{"value":"/ assert_eq!(d.num_days_from_ce(), 735671); // days since January 1, 1 CE","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\date.rs","byte_start":67885,"byte_end":67960,"line_start":211,"line_end":211,"column_start":5,"column_end":80}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\date.rs","byte_start":67965,"byte_end":67973,"line_start":212,"line_end":212,"column_start":5,"column_end":13}}]},{"kind":"Method","id":{"krate":0,"index":220},"span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\date.rs","byte_start":68806,"byte_end":68817,"line_start":236,"line_end":236,"column_start":12,"column_end":23},"name":"from_yo_opt","qualname":"<NaiveDate>::from_yo_opt","value":"fn (year: i32, ordinal: u32) -> Option<NaiveDate>","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `NaiveDate` from the [ordinal date](./index.html#ordinal-date)\n (year and day of the year).","sig":null,"attributes":[{"value":"/ Makes a new `NaiveDate` from the [ordinal date](./index.html#ordinal-date)","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\date.rs","byte_start":68129,"byte_end":68207,"line_start":217,"line_end":217,"column_start":5,"column_end":83}},{"value":"/ (year and day of the year).","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\date.rs","byte_start":68212,"byte_end":68243,"line_start":218,"line_end":218,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\date.rs","byte_start":68248,"byte_end":68251,"line_start":219,"line_end":219,"column_start":5,"column_end":8}},{"value":"/ Returns `None` on the out-of-range date and/or invalid day of year.","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\date.rs","byte_start":68256,"byte_end":68327,"line_start":220,"line_end":220,"column_start":5,"column_end":76}},{"value":"/","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\date.rs","byte_start":68332,"byte_end":68335,"line_start":221,"line_end":221,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\date.rs","byte_start":68340,"byte_end":68353,"line_start":222,"line_end":222,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\date.rs","byte_start":68358,"byte_end":68361,"line_start":223,"line_end":223,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\date.rs","byte_start":68366,"byte_end":68374,"line_start":224,"line_end":224,"column_start":5,"column_end":13}},{"value":"/ use chrono::NaiveDate;","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\date.rs","byte_start":68379,"byte_end":68405,"line_start":225,"line_end":225,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\date.rs","byte_start":68410,"byte_end":68413,"line_start":226,"line_end":226,"column_start":5,"column_end":8}},{"value":"/ let yo = |y,o| NaiveDate::from_yo_opt(y, o);","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\date.rs","byte_start":68418,"byte_end":68466,"line_start":227,"line_end":227,"column_start":5,"column_end":53}},{"value":"/ assert!(yo(2015, 100).is_some());","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\date.rs","byte_start":68471,"byte_end":68508,"line_start":228,"line_end":228,"column_start":5,"column_end":42}},{"value":"/ assert!(yo(2015, 0).is_none());","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\date.rs","byte_start":68513,"byte_end":68548,"line_start":229,"line_end":229,"column_start":5,"column_end":40}},{"value":"/ assert!(yo(2015, 365).is_some());","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\date.rs","byte_start":68553,"byte_end":68590,"line_start":230,"line_end":230,"column_start":5,"column_end":42}},{"value":"/ assert!(yo(2015, 366).is_none());","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\date.rs","byte_start":68595,"byte_end":68632,"line_start":231,"line_end":231,"column_start":5,"column_end":42}},{"value":"/ assert!(yo(-4, 366).is_some()); // 5 BCE is a leap year","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\date.rs","byte_start":68637,"byte_end":68696,"line_start":232,"line_end":232,"column_start":5,"column_end":64}},{"value":"/ assert!(yo(400000, 1).is_none());","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\date.rs","byte_start":68701,"byte_end":68738,"line_start":233,"line_end":233,"column_start":5,"column_end":42}},{"value":"/ assert!(yo(-400000, 1).is_none());","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\date.rs","byte_start":68743,"byte_end":68781,"line_start":234,"line_end":234,"column_start":5,"column_end":43}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\date.rs","byte_start":68786,"byte_end":68794,"line_start":235,"line_end":235,"column_start":5,"column_end":13}}]},{"kind":"Method","id":{"krate":0,"index":221},"span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\date.rs","byte_start":69759,"byte_end":69770,"line_start":260,"line_end":260,"column_start":12,"column_end":23},"name":"from_isoywd","qualname":"<NaiveDate>::from_isoywd","value":"fn (year: i32, week: u32, weekday: Weekday) -> NaiveDate","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `NaiveDate` from the [ISO week date](./index.html#week-date)\n (year, week number and day of the week).\n The resulting `NaiveDate` may have a different year from the input year.","sig":null,"attributes":[{"value":"/ Makes a new `NaiveDate` from the [ISO week date](./index.html#week-date)","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\date.rs","byte_start":68983,"byte_end":69059,"line_start":241,"line_end":241,"column_start":5,"column_end":81}},{"value":"/ (year, week number and day of the week).","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\date.rs","byte_start":69064,"byte_end":69108,"line_start":242,"line_end":242,"column_start":5,"column_end":49}},{"value":"/ The resulting `NaiveDate` may have a different year from the input year.","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\date.rs","byte_start":69113,"byte_end":69189,"line_start":243,"line_end":243,"column_start":5,"column_end":81}},{"value":"/","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\date.rs","byte_start":69194,"byte_end":69197,"line_start":244,"line_end":244,"column_start":5,"column_end":8}},{"value":"/ Panics on the out-of-range date and/or invalid week number.","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\date.rs","byte_start":69202,"byte_end":69265,"line_start":245,"line_end":245,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\date.rs","byte_start":69270,"byte_end":69273,"line_start":246,"line_end":246,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\date.rs","byte_start":69278,"byte_end":69291,"line_start":247,"line_end":247,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\date.rs","byte_start":69296,"byte_end":69299,"line_start":248,"line_end":248,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\date.rs","byte_start":69304,"byte_end":69312,"line_start":249,"line_end":249,"column_start":5,"column_end":13}},{"value":"/ use chrono::{NaiveDate, Datelike, Weekday};","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\date.rs","byte_start":69317,"byte_end":69364,"line_start":250,"line_end":250,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\date.rs","byte_start":69369,"byte_end":69372,"line_start":251,"line_end":251,"column_start":5,"column_end":8}},{"value":"/ let d = NaiveDate::from_isoywd(2015, 11, Weekday::Sat);","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\date.rs","byte_start":69377,"byte_end":69436,"line_start":252,"line_end":252,"column_start":5,"column_end":64}},{"value":"/ assert_eq!(d.isoweekdate(), (2015, 11, Weekday::Sat));","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\date.rs","byte_start":69441,"byte_end":69499,"line_start":253,"line_end":253,"column_start":5,"column_end":63}},{"value":"/ assert_eq!(d.year(), 2015);","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\date.rs","byte_start":69504,"byte_end":69535,"line_start":254,"line_end":254,"column_start":5,"column_end":36}},{"value":"/ assert_eq!(d.month(), 3);","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\date.rs","byte_start":69540,"byte_end":69569,"line_start":255,"line_end":255,"column_start":5,"column_end":34}},{"value":"/ assert_eq!(d.day(), 14);","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\date.rs","byte_start":69574,"byte_end":69602,"line_start":256,"line_end":256,"column_start":5,"column_end":33}},{"value":"/ assert_eq!(d.ordinal(), 73); // day of year","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\date.rs","byte_start":69607,"byte_end":69654,"line_start":257,"line_end":257,"column_start":5,"column_end":52}},{"value":"/ assert_eq!(d.num_days_from_ce(), 735671); // days since January 1, 1 CE","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\date.rs","byte_start":69659,"byte_end":69734,"line_start":258,"line_end":258,"column_start":5,"column_end":80}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\date.rs","byte_start":69739,"byte_end":69747,"line_start":259,"line_end":259,"column_start":5,"column_end":13}}]},{"kind":"Method","id":{"krate":0,"index":222},"span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\date.rs","byte_start":72033,"byte_end":72048,"line_start":308,"line_end":308,"column_start":12,"column_end":27},"name":"from_isoywd_opt","qualname":"<NaiveDate>::from_isoywd_opt","value":"fn (year: i32, week: u32, weekday: Weekday) -> Option<NaiveDate>","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `NaiveDate` from the [ISO week date](./index.html#week-date)\n (year, week number and day of the week).\n The resulting `NaiveDate` may have a different year from the input year.","sig":null,"attributes":[{"value":"/ Makes a new `NaiveDate` from the [ISO week date](./index.html#week-date)","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\date.rs","byte_start":69932,"byte_end":70008,"line_start":264,"line_end":264,"column_start":5,"column_end":81}},{"value":"/ (year, week number and day of the week).","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\date.rs","byte_start":70013,"byte_end":70057,"line_start":265,"line_end":265,"column_start":5,"column_end":49}},{"value":"/ The resulting `NaiveDate` may have a different year from the input year.","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\date.rs","byte_start":70062,"byte_end":70138,"line_start":266,"line_end":266,"column_start":5,"column_end":81}},{"value":"/","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\date.rs","byte_start":70143,"byte_end":70146,"line_start":267,"line_end":267,"column_start":5,"column_end":8}},{"value":"/ Returns `None` on the out-of-range date and/or invalid week number.","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\date.rs","byte_start":70151,"byte_end":70222,"line_start":268,"line_end":268,"column_start":5,"column_end":76}},{"value":"/","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\date.rs","byte_start":70227,"byte_end":70230,"line_start":269,"line_end":269,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\date.rs","byte_start":70235,"byte_end":70248,"line_start":270,"line_end":270,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\date.rs","byte_start":70253,"byte_end":70256,"line_start":271,"line_end":271,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\date.rs","byte_start":70261,"byte_end":70269,"line_start":272,"line_end":272,"column_start":5,"column_end":13}},{"value":"/ use chrono::{NaiveDate, Weekday};","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\date.rs","byte_start":70274,"byte_end":70311,"line_start":273,"line_end":273,"column_start":5,"column_end":42}},{"value":"/","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\date.rs","byte_start":70316,"byte_end":70319,"line_start":274,"line_end":274,"column_start":5,"column_end":8}},{"value":"/ let ymd = |y,m,d| NaiveDate::from_ymd(y, m, d);","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\date.rs","byte_start":70324,"byte_end":70375,"line_start":275,"line_end":275,"column_start":5,"column_end":56}},{"value":"/ let isoywd = |y,w,d| NaiveDate::from_isoywd_opt(y, w, d);","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\date.rs","byte_start":70380,"byte_end":70441,"line_start":276,"line_end":276,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\date.rs","byte_start":70446,"byte_end":70449,"line_start":277,"line_end":277,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(isoywd(2015, 0, Weekday::Sun), None);","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\date.rs","byte_start":70454,"byte_end":70506,"line_start":278,"line_end":278,"column_start":5,"column_end":57}},{"value":"/ assert_eq!(isoywd(2015, 10, Weekday::Sun), Some(ymd(2015, 3, 8)));","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\date.rs","byte_start":70511,"byte_end":70581,"line_start":279,"line_end":279,"column_start":5,"column_end":75}},{"value":"/ assert_eq!(isoywd(2015, 30, Weekday::Mon), Some(ymd(2015, 7, 20)));","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\date.rs","byte_start":70586,"byte_end":70657,"line_start":280,"line_end":280,"column_start":5,"column_end":76}},{"value":"/ assert_eq!(isoywd(2015, 60, Weekday::Mon), None);","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\date.rs","byte_start":70662,"byte_end":70715,"line_start":281,"line_end":281,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\date.rs","byte_start":70720,"byte_end":70723,"line_start":282,"line_end":282,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(isoywd(400000, 10, Weekday::Fri), None);","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\date.rs","byte_start":70728,"byte_end":70783,"line_start":283,"line_end":283,"column_start":5,"column_end":60}},{"value":"/ assert_eq!(isoywd(-400000, 10, Weekday::Sat), None);","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\date.rs","byte_start":70788,"byte_end":70844,"line_start":284,"line_end":284,"column_start":5,"column_end":61}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\date.rs","byte_start":70849,"byte_end":70857,"line_start":285,"line_end":285,"column_start":5,"column_end":13}},{"value":"/","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\date.rs","byte_start":70862,"byte_end":70865,"line_start":286,"line_end":286,"column_start":5,"column_end":8}},{"value":"/ The year number of ISO week date may differ from that of the calendar date.","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\date.rs","byte_start":70870,"byte_end":70949,"line_start":287,"line_end":287,"column_start":5,"column_end":84}},{"value":"/","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\date.rs","byte_start":70954,"byte_end":70957,"line_start":288,"line_end":288,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\date.rs","byte_start":70962,"byte_end":70970,"line_start":289,"line_end":289,"column_start":5,"column_end":13}},{"value":"/ # use chrono::{NaiveDate, Weekday};","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\date.rs","byte_start":70975,"byte_end":71014,"line_start":290,"line_end":290,"column_start":5,"column_end":44}},{"value":"/ # let ymd = |y,m,d| NaiveDate::from_ymd(y, m, d);","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\date.rs","byte_start":71019,"byte_end":71072,"line_start":291,"line_end":291,"column_start":5,"column_end":58}},{"value":"/ # let isoywd = |y,w,d| NaiveDate::from_isoywd_opt(y, w, d);","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\date.rs","byte_start":71077,"byte_end":71140,"line_start":292,"line_end":292,"column_start":5,"column_end":68}},{"value":"/ //           Mo Tu We Th Fr Sa Su","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\date.rs","byte_start":71145,"byte_end":71182,"line_start":293,"line_end":293,"column_start":5,"column_end":42}},{"value":"/ // 2014-W52  22 23 24 25 26 27 28    has 4+ days of new year,","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\date.rs","byte_start":71187,"byte_end":71252,"line_start":294,"line_end":294,"column_start":5,"column_end":70}},{"value":"/ // 2015-W01  29 30 31  1  2  3  4 <- so this is the first week","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\date.rs","byte_start":71257,"byte_end":71323,"line_start":295,"line_end":295,"column_start":5,"column_end":71}},{"value":"/ assert_eq!(isoywd(2014, 52, Weekday::Sun), Some(ymd(2014, 12, 28)));","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\date.rs","byte_start":71328,"byte_end":71400,"line_start":296,"line_end":296,"column_start":5,"column_end":77}},{"value":"/ assert_eq!(isoywd(2014, 53, Weekday::Mon), None);","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\date.rs","byte_start":71405,"byte_end":71458,"line_start":297,"line_end":297,"column_start":5,"column_end":58}},{"value":"/ assert_eq!(isoywd(2015, 1, Weekday::Mon), Some(ymd(2014, 12, 29)));","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\date.rs","byte_start":71463,"byte_end":71534,"line_start":298,"line_end":298,"column_start":5,"column_end":76}},{"value":"/","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\date.rs","byte_start":71539,"byte_end":71542,"line_start":299,"line_end":299,"column_start":5,"column_end":8}},{"value":"/ // 2015-W52  21 22 23 24 25 26 27    has 4+ days of old year,","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\date.rs","byte_start":71547,"byte_end":71612,"line_start":300,"line_end":300,"column_start":5,"column_end":70}},{"value":"/ // 2015-W53  28 29 30 31  1  2  3 <- so this is the last week","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\date.rs","byte_start":71617,"byte_end":71682,"line_start":301,"line_end":301,"column_start":5,"column_end":70}},{"value":"/ // 2016-W01   4  5  6  7  8  9 10","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\date.rs","byte_start":71687,"byte_end":71724,"line_start":302,"line_end":302,"column_start":5,"column_end":42}},{"value":"/ assert_eq!(isoywd(2015, 52, Weekday::Sun), Some(ymd(2015, 12, 27)));","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\date.rs","byte_start":71729,"byte_end":71801,"line_start":303,"line_end":303,"column_start":5,"column_end":77}},{"value":"/ assert_eq!(isoywd(2015, 53, Weekday::Sun), Some(ymd(2016, 1, 3)));","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\date.rs","byte_start":71806,"byte_end":71876,"line_start":304,"line_end":304,"column_start":5,"column_end":75}},{"value":"/ assert_eq!(isoywd(2015, 54, Weekday::Mon), None);","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\date.rs","byte_start":71881,"byte_end":71934,"line_start":305,"line_end":305,"column_start":5,"column_end":58}},{"value":"/ assert_eq!(isoywd(2016, 1, Weekday::Mon), Some(ymd(2016, 1, 4)));","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\date.rs","byte_start":71939,"byte_end":72008,"line_start":306,"line_end":306,"column_start":5,"column_end":74}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\date.rs","byte_start":72013,"byte_end":72021,"line_start":307,"line_end":307,"column_start":5,"column_end":13}}]},{"kind":"Method","id":{"krate":0,"index":223},"span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\date.rs","byte_start":74874,"byte_end":74895,"line_start":376,"line_end":376,"column_start":12,"column_end":33},"name":"from_num_days_from_ce","qualname":"<NaiveDate>::from_num_days_from_ce","value":"fn (days: i32) -> NaiveDate","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `NaiveDate` from the number of days since January 1, 1 (Day 1)\n in the proleptic Gregorian calendar.","sig":null,"attributes":[{"value":"/ Makes a new `NaiveDate` from the number of days since January 1, 1 (Day 1)","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\date.rs","byte_start":73198,"byte_end":73276,"line_start":334,"line_end":334,"column_start":5,"column_end":83}},{"value":"/ in the proleptic Gregorian calendar.","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\date.rs","byte_start":73281,"byte_end":73321,"line_start":335,"line_end":335,"column_start":5,"column_end":45}},{"value":"/","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\date.rs","byte_start":73326,"byte_end":73329,"line_start":336,"line_end":336,"column_start":5,"column_end":8}},{"value":"/ Panics on the out-of-range date.","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\date.rs","byte_start":73334,"byte_end":73370,"line_start":337,"line_end":337,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\date.rs","byte_start":73375,"byte_end":73378,"line_start":338,"line_end":338,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\date.rs","byte_start":73383,"byte_end":73396,"line_start":339,"line_end":339,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\date.rs","byte_start":73401,"byte_end":73404,"line_start":340,"line_end":340,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\date.rs","byte_start":73409,"byte_end":73417,"line_start":341,"line_end":341,"column_start":5,"column_end":13}},{"value":"/ use chrono::{NaiveDate, Datelike, Weekday};","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\date.rs","byte_start":73422,"byte_end":73469,"line_start":342,"line_end":342,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\date.rs","byte_start":73474,"byte_end":73477,"line_start":343,"line_end":343,"column_start":5,"column_end":8}},{"value":"/ let d = NaiveDate::from_num_days_from_ce(735671);","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\date.rs","byte_start":73482,"byte_end":73535,"line_start":344,"line_end":344,"column_start":5,"column_end":58}},{"value":"/ assert_eq!(d.num_days_from_ce(), 735671); // days since January 1, 1 CE","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\date.rs","byte_start":73540,"byte_end":73615,"line_start":345,"line_end":345,"column_start":5,"column_end":80}},{"value":"/ assert_eq!(d.year(), 2015);","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\date.rs","byte_start":73620,"byte_end":73651,"line_start":346,"line_end":346,"column_start":5,"column_end":36}},{"value":"/ assert_eq!(d.month(), 3);","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\date.rs","byte_start":73656,"byte_end":73685,"line_start":347,"line_end":347,"column_start":5,"column_end":34}},{"value":"/ assert_eq!(d.day(), 14);","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\date.rs","byte_start":73690,"byte_end":73718,"line_start":348,"line_end":348,"column_start":5,"column_end":33}},{"value":"/ assert_eq!(d.ordinal(), 73); // day of year","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\date.rs","byte_start":73723,"byte_end":73770,"line_start":349,"line_end":349,"column_start":5,"column_end":52}},{"value":"/ assert_eq!(d.isoweekdate(), (2015, 11, Weekday::Sat)); // ISO week and weekday","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\date.rs","byte_start":73775,"byte_end":73857,"line_start":350,"line_end":350,"column_start":5,"column_end":87}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\date.rs","byte_start":73862,"byte_end":73870,"line_start":351,"line_end":351,"column_start":5,"column_end":13}},{"value":"/","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\date.rs","byte_start":73875,"byte_end":73878,"line_start":352,"line_end":352,"column_start":5,"column_end":8}},{"value":"/ While not directly supported by Chrono,","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\date.rs","byte_start":73883,"byte_end":73926,"line_start":353,"line_end":353,"column_start":5,"column_end":48}},{"value":"/ it is easy to convert from the Julian day number","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\date.rs","byte_start":73931,"byte_end":73983,"line_start":354,"line_end":354,"column_start":5,"column_end":57}},{"value":"/ (January 1, 4713 BCE in the *Julian* calendar being Day 0)","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\date.rs","byte_start":73988,"byte_end":74050,"line_start":355,"line_end":355,"column_start":5,"column_end":67}},{"value":"/ to Gregorian with this method.","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\date.rs","byte_start":74055,"byte_end":74089,"line_start":356,"line_end":356,"column_start":5,"column_end":39}},{"value":"/ (Note that this panics when `jd` is out of range.)","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\date.rs","byte_start":74094,"byte_end":74148,"line_start":357,"line_end":357,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\date.rs","byte_start":74153,"byte_end":74156,"line_start":358,"line_end":358,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\date.rs","byte_start":74161,"byte_end":74169,"line_start":359,"line_end":359,"column_start":5,"column_end":13}},{"value":"/ use chrono::NaiveDate;","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\date.rs","byte_start":74174,"byte_end":74200,"line_start":360,"line_end":360,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\date.rs","byte_start":74205,"byte_end":74208,"line_start":361,"line_end":361,"column_start":5,"column_end":8}},{"value":"/ fn jd_to_date(jd: i32) -> NaiveDate {","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\date.rs","byte_start":74213,"byte_end":74254,"line_start":362,"line_end":362,"column_start":5,"column_end":46}},{"value":"/     // keep in mind that the Julian day number is 0-based","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\date.rs","byte_start":74259,"byte_end":74320,"line_start":363,"line_end":363,"column_start":5,"column_end":66}},{"value":"/     // while this method requires an 1-based number.","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\date.rs","byte_start":74325,"byte_end":74381,"line_start":364,"line_end":364,"column_start":5,"column_end":61}},{"value":"/     NaiveDate::from_num_days_from_ce(jd - 1721425)","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\date.rs","byte_start":74386,"byte_end":74440,"line_start":365,"line_end":365,"column_start":5,"column_end":59}},{"value":"/ }","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\date.rs","byte_start":74445,"byte_end":74450,"line_start":366,"line_end":366,"column_start":5,"column_end":10}},{"value":"/","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\date.rs","byte_start":74455,"byte_end":74458,"line_start":367,"line_end":367,"column_start":5,"column_end":8}},{"value":"/ // January 1, 4713 BCE in Julian = November 24, 4714 BCE in Gregorian","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\date.rs","byte_start":74463,"byte_end":74536,"line_start":368,"line_end":368,"column_start":5,"column_end":78}},{"value":"/ assert_eq!(jd_to_date(0), NaiveDate::from_ymd(-4713, 11, 24));","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\date.rs","byte_start":74541,"byte_end":74607,"line_start":369,"line_end":369,"column_start":5,"column_end":71}},{"value":"/","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\date.rs","byte_start":74612,"byte_end":74615,"line_start":370,"line_end":370,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(jd_to_date(1721426), NaiveDate::from_ymd(1, 1, 1));","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\date.rs","byte_start":74620,"byte_end":74686,"line_start":371,"line_end":371,"column_start":5,"column_end":71}},{"value":"/ assert_eq!(jd_to_date(2450000), NaiveDate::from_ymd(1995, 10, 9));","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\date.rs","byte_start":74691,"byte_end":74761,"line_start":372,"line_end":372,"column_start":5,"column_end":75}},{"value":"/ assert_eq!(jd_to_date(2451545), NaiveDate::from_ymd(2000, 1, 1));","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\date.rs","byte_start":74766,"byte_end":74835,"line_start":373,"line_end":373,"column_start":5,"column_end":74}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\date.rs","byte_start":74840,"byte_end":74848,"line_start":374,"line_end":374,"column_start":5,"column_end":13}},{"value":"inline","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\date.rs","byte_start":74853,"byte_end":74862,"line_start":375,"line_end":375,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":224},"span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\date.rs","byte_start":75766,"byte_end":75791,"line_start":398,"line_end":398,"column_start":12,"column_end":37},"name":"from_num_days_from_ce_opt","qualname":"<NaiveDate>::from_num_days_from_ce_opt","value":"fn (days: i32) -> Option<NaiveDate>","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `NaiveDate` from the number of days since January 1, 1 (Day 1)\n in the proleptic Gregorian calendar.","sig":null,"attributes":[{"value":"/ Makes a new `NaiveDate` from the number of days since January 1, 1 (Day 1)","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\date.rs","byte_start":75012,"byte_end":75090,"line_start":380,"line_end":380,"column_start":5,"column_end":83}},{"value":"/ in the proleptic Gregorian calendar.","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\date.rs","byte_start":75095,"byte_end":75135,"line_start":381,"line_end":381,"column_start":5,"column_end":45}},{"value":"/","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\date.rs","byte_start":75140,"byte_end":75143,"line_start":382,"line_end":382,"column_start":5,"column_end":8}},{"value":"/ Returns `None` on the out-of-range date.","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\date.rs","byte_start":75148,"byte_end":75192,"line_start":383,"line_end":383,"column_start":5,"column_end":49}},{"value":"/","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\date.rs","byte_start":75197,"byte_end":75200,"line_start":384,"line_end":384,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\date.rs","byte_start":75205,"byte_end":75218,"line_start":385,"line_end":385,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\date.rs","byte_start":75223,"byte_end":75226,"line_start":386,"line_end":386,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\date.rs","byte_start":75231,"byte_end":75239,"line_start":387,"line_end":387,"column_start":5,"column_end":13}},{"value":"/ use chrono::NaiveDate;","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\date.rs","byte_start":75244,"byte_end":75270,"line_start":388,"line_end":388,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\date.rs","byte_start":75275,"byte_end":75278,"line_start":389,"line_end":389,"column_start":5,"column_end":8}},{"value":"/ let days = |ndays| NaiveDate::from_num_days_from_ce_opt(ndays);","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\date.rs","byte_start":75283,"byte_end":75350,"line_start":390,"line_end":390,"column_start":5,"column_end":72}},{"value":"/ assert_eq!(days(730000),     Some(NaiveDate::from_ymd(1999, 9, 3)));","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\date.rs","byte_start":75355,"byte_end":75427,"line_start":391,"line_end":391,"column_start":5,"column_end":77}},{"value":"/ assert_eq!(days(1),          Some(NaiveDate::from_ymd(1, 1, 1)));","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\date.rs","byte_start":75432,"byte_end":75501,"line_start":392,"line_end":392,"column_start":5,"column_end":74}},{"value":"/ assert_eq!(days(0),          Some(NaiveDate::from_ymd(0, 12, 31)));","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\date.rs","byte_start":75506,"byte_end":75577,"line_start":393,"line_end":393,"column_start":5,"column_end":76}},{"value":"/ assert_eq!(days(-1),         Some(NaiveDate::from_ymd(0, 12, 30)));","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\date.rs","byte_start":75582,"byte_end":75653,"line_start":394,"line_end":394,"column_start":5,"column_end":76}},{"value":"/ assert_eq!(days(100000000),  None);","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\date.rs","byte_start":75658,"byte_end":75697,"line_start":395,"line_end":395,"column_start":5,"column_end":44}},{"value":"/ assert_eq!(days(-100000000), None);","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\date.rs","byte_start":75702,"byte_end":75741,"line_start":396,"line_end":396,"column_start":5,"column_end":44}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\date.rs","byte_start":75746,"byte_end":75754,"line_start":397,"line_end":397,"column_start":5,"column_end":13}}]},{"kind":"Method","id":{"krate":0,"index":225},"span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\date.rs","byte_start":77643,"byte_end":77657,"line_start":444,"line_end":444,"column_start":12,"column_end":26},"name":"parse_from_str","qualname":"<NaiveDate>::parse_from_str","value":"fn (s: &str, fmt: &str) -> ParseResult<NaiveDate>","parent":null,"children":[],"decl_id":null,"docs":" Parses a string with the specified format string and returns a new `NaiveDate`.\n See the [`format::strftime` module](../../format/strftime/index.html)\n on the supported escape sequences.","sig":null,"attributes":[{"value":"/ Parses a string with the specified format string and returns a new `NaiveDate`.","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\date.rs","byte_start":76243,"byte_end":76326,"line_start":407,"line_end":407,"column_start":5,"column_end":88}},{"value":"/ See the [`format::strftime` module](../../format/strftime/index.html)","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\date.rs","byte_start":76331,"byte_end":76404,"line_start":408,"line_end":408,"column_start":5,"column_end":78}},{"value":"/ on the supported escape sequences.","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\date.rs","byte_start":76409,"byte_end":76447,"line_start":409,"line_end":409,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\date.rs","byte_start":76452,"byte_end":76455,"line_start":410,"line_end":410,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\date.rs","byte_start":76460,"byte_end":76473,"line_start":411,"line_end":411,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\date.rs","byte_start":76478,"byte_end":76481,"line_start":412,"line_end":412,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\date.rs","byte_start":76486,"byte_end":76494,"line_start":413,"line_end":413,"column_start":5,"column_end":13}},{"value":"/ use chrono::NaiveDate;","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\date.rs","byte_start":76499,"byte_end":76525,"line_start":414,"line_end":414,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\date.rs","byte_start":76530,"byte_end":76533,"line_start":415,"line_end":415,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(NaiveDate::parse_from_str(\"2015-09-05\", \"%Y-%m-%d\"),","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\date.rs","byte_start":76538,"byte_end":76605,"line_start":416,"line_end":416,"column_start":5,"column_end":72}},{"value":"/            Ok(NaiveDate::from_ymd(2015, 9, 5)));","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\date.rs","byte_start":76610,"byte_end":76662,"line_start":417,"line_end":417,"column_start":5,"column_end":57}},{"value":"/ assert_eq!(NaiveDate::parse_from_str(\"5sep2015\", \"%d%b%Y\"),","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\date.rs","byte_start":76667,"byte_end":76730,"line_start":418,"line_end":418,"column_start":5,"column_end":68}},{"value":"/            Ok(NaiveDate::from_ymd(2015, 9, 5)));","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\date.rs","byte_start":76735,"byte_end":76787,"line_start":419,"line_end":419,"column_start":5,"column_end":57}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\date.rs","byte_start":76792,"byte_end":76800,"line_start":420,"line_end":420,"column_start":5,"column_end":13}},{"value":"/","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\date.rs","byte_start":76805,"byte_end":76808,"line_start":421,"line_end":421,"column_start":5,"column_end":8}},{"value":"/ Time and offset is ignored for the purpose of parsing.","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\date.rs","byte_start":76813,"byte_end":76871,"line_start":422,"line_end":422,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\date.rs","byte_start":76876,"byte_end":76879,"line_start":423,"line_end":423,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\date.rs","byte_start":76884,"byte_end":76892,"line_start":424,"line_end":424,"column_start":5,"column_end":13}},{"value":"/ # use chrono::NaiveDate;","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\date.rs","byte_start":76897,"byte_end":76925,"line_start":425,"line_end":425,"column_start":5,"column_end":33}},{"value":"/ assert_eq!(NaiveDate::parse_from_str(\"2014-5-17T12:34:56+09:30\", \"%Y-%m-%dT%H:%M:%S%z\"),","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\date.rs","byte_start":76930,"byte_end":77022,"line_start":426,"line_end":426,"column_start":5,"column_end":97}},{"value":"/            Ok(NaiveDate::from_ymd(2014, 5, 17)));","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\date.rs","byte_start":77027,"byte_end":77080,"line_start":427,"line_end":427,"column_start":5,"column_end":58}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\date.rs","byte_start":77085,"byte_end":77093,"line_start":428,"line_end":428,"column_start":5,"column_end":13}},{"value":"/","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\date.rs","byte_start":77098,"byte_end":77101,"line_start":429,"line_end":429,"column_start":5,"column_end":8}},{"value":"/ Out-of-bound dates or insufficient fields are errors.","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\date.rs","byte_start":77106,"byte_end":77163,"line_start":430,"line_end":430,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\date.rs","byte_start":77168,"byte_end":77171,"line_start":431,"line_end":431,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\date.rs","byte_start":77176,"byte_end":77184,"line_start":432,"line_end":432,"column_start":5,"column_end":13}},{"value":"/ # use chrono::NaiveDate;","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\date.rs","byte_start":77189,"byte_end":77217,"line_start":433,"line_end":433,"column_start":5,"column_end":33}},{"value":"/ assert!(NaiveDate::parse_from_str(\"2015/9\", \"%Y/%m\").is_err());","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\date.rs","byte_start":77222,"byte_end":77289,"line_start":434,"line_end":434,"column_start":5,"column_end":72}},{"value":"/ assert!(NaiveDate::parse_from_str(\"2015/9/31\", \"%Y/%m/%d\").is_err());","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\date.rs","byte_start":77294,"byte_end":77367,"line_start":435,"line_end":435,"column_start":5,"column_end":78}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\date.rs","byte_start":77372,"byte_end":77380,"line_start":436,"line_end":436,"column_start":5,"column_end":13}},{"value":"/","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\date.rs","byte_start":77385,"byte_end":77388,"line_start":437,"line_end":437,"column_start":5,"column_end":8}},{"value":"/ All parsed fields should be consistent to each other, otherwise it's an error.","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\date.rs","byte_start":77393,"byte_end":77475,"line_start":438,"line_end":438,"column_start":5,"column_end":87}},{"value":"/","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\date.rs","byte_start":77480,"byte_end":77483,"line_start":439,"line_end":439,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\date.rs","byte_start":77488,"byte_end":77496,"line_start":440,"line_end":440,"column_start":5,"column_end":13}},{"value":"/ # use chrono::NaiveDate;","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\date.rs","byte_start":77501,"byte_end":77529,"line_start":441,"line_end":441,"column_start":5,"column_end":33}},{"value":"/ assert!(NaiveDate::parse_from_str(\"Sat, 09 Aug 2013\", \"%a, %d %b %Y\").is_err());","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\date.rs","byte_start":77534,"byte_end":77618,"line_start":442,"line_end":442,"column_start":5,"column_end":89}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\date.rs","byte_start":77623,"byte_end":77631,"line_start":443,"line_end":443,"column_start":5,"column_end":13}}]},{"kind":"Method","id":{"krate":0,"index":226},"span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\date.rs","byte_start":78311,"byte_end":78319,"line_start":465,"line_end":465,"column_start":12,"column_end":20},"name":"and_time","qualname":"<NaiveDate>::and_time","value":"fn (&self, time: NaiveTime) -> NaiveDateTime","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `NaiveDateTime` from the current date and given `NaiveTime`.","sig":null,"attributes":[{"value":"/ Makes a new `NaiveDateTime` from the current date and given `NaiveTime`.","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\date.rs","byte_start":77850,"byte_end":77926,"line_start":450,"line_end":450,"column_start":5,"column_end":81}},{"value":"/","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\date.rs","byte_start":77931,"byte_end":77934,"line_start":451,"line_end":451,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\date.rs","byte_start":77939,"byte_end":77952,"line_start":452,"line_end":452,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\date.rs","byte_start":77957,"byte_end":77960,"line_start":453,"line_end":453,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\date.rs","byte_start":77965,"byte_end":77973,"line_start":454,"line_end":454,"column_start":5,"column_end":13}},{"value":"/ use chrono::{NaiveDate, NaiveTime, NaiveDateTime};","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\date.rs","byte_start":77978,"byte_end":78032,"line_start":455,"line_end":455,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\date.rs","byte_start":78037,"byte_end":78040,"line_start":456,"line_end":456,"column_start":5,"column_end":8}},{"value":"/ let d = NaiveDate::from_ymd(2015, 6, 3);","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\date.rs","byte_start":78045,"byte_end":78089,"line_start":457,"line_end":457,"column_start":5,"column_end":49}},{"value":"/ let t = NaiveTime::from_hms_milli(12, 34, 56, 789);","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\date.rs","byte_start":78094,"byte_end":78149,"line_start":458,"line_end":458,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\date.rs","byte_start":78154,"byte_end":78157,"line_start":459,"line_end":459,"column_start":5,"column_end":8}},{"value":"/ let dt: NaiveDateTime = d.and_time(t);","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\date.rs","byte_start":78162,"byte_end":78204,"line_start":460,"line_end":460,"column_start":5,"column_end":47}},{"value":"/ assert_eq!(dt.date(), d);","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\date.rs","byte_start":78209,"byte_end":78238,"line_start":461,"line_end":461,"column_start":5,"column_end":34}},{"value":"/ assert_eq!(dt.time(), t);","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\date.rs","byte_start":78243,"byte_end":78272,"line_start":462,"line_end":462,"column_start":5,"column_end":34}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\date.rs","byte_start":78277,"byte_end":78285,"line_start":463,"line_end":463,"column_start":5,"column_end":13}},{"value":"inline","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\date.rs","byte_start":78290,"byte_end":78299,"line_start":464,"line_end":464,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":227},"span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\date.rs","byte_start":79137,"byte_end":79144,"line_start":489,"line_end":489,"column_start":12,"column_end":19},"name":"and_hms","qualname":"<NaiveDate>::and_hms","value":"fn (&self, hour: u32, min: u32, sec: u32) -> NaiveDateTime","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `NaiveDateTime` from the current date, hour, minute and second.","sig":null,"attributes":[{"value":"/ Makes a new `NaiveDateTime` from the current date, hour, minute and second.","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\date.rs","byte_start":78421,"byte_end":78500,"line_start":469,"line_end":469,"column_start":5,"column_end":84}},{"value":"/","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\date.rs","byte_start":78505,"byte_end":78508,"line_start":470,"line_end":470,"column_start":5,"column_end":8}},{"value":"/ No [leap second](../time/index.html#leap-second-handling) is allowed here;","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\date.rs","byte_start":78513,"byte_end":78591,"line_start":471,"line_end":471,"column_start":5,"column_end":83}},{"value":"/ use `NaiveDate::and_hms_*` methods with a subsecond parameter instead.","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\date.rs","byte_start":78596,"byte_end":78670,"line_start":472,"line_end":472,"column_start":5,"column_end":79}},{"value":"/","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\date.rs","byte_start":78675,"byte_end":78678,"line_start":473,"line_end":473,"column_start":5,"column_end":8}},{"value":"/ Panics on invalid hour, minute and/or second.","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\date.rs","byte_start":78683,"byte_end":78732,"line_start":474,"line_end":474,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\date.rs","byte_start":78737,"byte_end":78740,"line_start":475,"line_end":475,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\date.rs","byte_start":78745,"byte_end":78758,"line_start":476,"line_end":476,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\date.rs","byte_start":78763,"byte_end":78766,"line_start":477,"line_end":477,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\date.rs","byte_start":78771,"byte_end":78779,"line_start":478,"line_end":478,"column_start":5,"column_end":13}},{"value":"/ use chrono::{NaiveDate, NaiveDateTime, Datelike, Timelike, Weekday};","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\date.rs","byte_start":78784,"byte_end":78856,"line_start":479,"line_end":479,"column_start":5,"column_end":77}},{"value":"/","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\date.rs","byte_start":78861,"byte_end":78864,"line_start":480,"line_end":480,"column_start":5,"column_end":8}},{"value":"/ let d = NaiveDate::from_ymd(2015, 6, 3);","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\date.rs","byte_start":78869,"byte_end":78913,"line_start":481,"line_end":481,"column_start":5,"column_end":49}},{"value":"/","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\date.rs","byte_start":78918,"byte_end":78921,"line_start":482,"line_end":482,"column_start":5,"column_end":8}},{"value":"/ let dt: NaiveDateTime = d.and_hms(12, 34, 56);","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\date.rs","byte_start":78926,"byte_end":78976,"line_start":483,"line_end":483,"column_start":5,"column_end":55}},{"value":"/ assert_eq!(dt.year(), 2015);","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\date.rs","byte_start":78981,"byte_end":79013,"line_start":484,"line_end":484,"column_start":5,"column_end":37}},{"value":"/ assert_eq!(dt.weekday(), Weekday::Wed);","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\date.rs","byte_start":79018,"byte_end":79061,"line_start":485,"line_end":485,"column_start":5,"column_end":48}},{"value":"/ assert_eq!(dt.second(), 56);","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\date.rs","byte_start":79066,"byte_end":79098,"line_start":486,"line_end":486,"column_start":5,"column_end":37}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\date.rs","byte_start":79103,"byte_end":79111,"line_start":487,"line_end":487,"column_start":5,"column_end":13}},{"value":"inline","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\date.rs","byte_start":79116,"byte_end":79125,"line_start":488,"line_end":488,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":228},"span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\date.rs","byte_start":80025,"byte_end":80036,"line_start":512,"line_end":512,"column_start":12,"column_end":23},"name":"and_hms_opt","qualname":"<NaiveDate>::and_hms_opt","value":"fn (&self, hour: u32, min: u32, sec: u32) -> Option<NaiveDateTime>","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `NaiveDateTime` from the current date, hour, minute and second.","sig":null,"attributes":[{"value":"/ Makes a new `NaiveDateTime` from the current date, hour, minute and second.","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\date.rs","byte_start":79277,"byte_end":79356,"line_start":493,"line_end":493,"column_start":5,"column_end":84}},{"value":"/","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\date.rs","byte_start":79361,"byte_end":79364,"line_start":494,"line_end":494,"column_start":5,"column_end":8}},{"value":"/ No [leap second](../time/index.html#leap-second-handling) is allowed here;","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\date.rs","byte_start":79369,"byte_end":79447,"line_start":495,"line_end":495,"column_start":5,"column_end":83}},{"value":"/ use `NaiveDate::and_hms_*_opt` methods with a subsecond parameter instead.","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\date.rs","byte_start":79452,"byte_end":79530,"line_start":496,"line_end":496,"column_start":5,"column_end":83}},{"value":"/","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\date.rs","byte_start":79535,"byte_end":79538,"line_start":497,"line_end":497,"column_start":5,"column_end":8}},{"value":"/ Returns `None` on invalid hour, minute and/or second.","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\date.rs","byte_start":79543,"byte_end":79600,"line_start":498,"line_end":498,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\date.rs","byte_start":79605,"byte_end":79608,"line_start":499,"line_end":499,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\date.rs","byte_start":79613,"byte_end":79626,"line_start":500,"line_end":500,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\date.rs","byte_start":79631,"byte_end":79634,"line_start":501,"line_end":501,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\date.rs","byte_start":79639,"byte_end":79647,"line_start":502,"line_end":502,"column_start":5,"column_end":13}},{"value":"/ use chrono::NaiveDate;","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\date.rs","byte_start":79652,"byte_end":79678,"line_start":503,"line_end":503,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\date.rs","byte_start":79683,"byte_end":79686,"line_start":504,"line_end":504,"column_start":5,"column_end":8}},{"value":"/ let d = NaiveDate::from_ymd(2015, 6, 3);","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\date.rs","byte_start":79691,"byte_end":79735,"line_start":505,"line_end":505,"column_start":5,"column_end":49}},{"value":"/ assert!(d.and_hms_opt(12, 34, 56).is_some());","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\date.rs","byte_start":79740,"byte_end":79789,"line_start":506,"line_end":506,"column_start":5,"column_end":54}},{"value":"/ assert!(d.and_hms_opt(12, 34, 60).is_none()); // use `and_hms_milli_opt` instead","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\date.rs","byte_start":79794,"byte_end":79878,"line_start":507,"line_end":507,"column_start":5,"column_end":89}},{"value":"/ assert!(d.and_hms_opt(12, 60, 56).is_none());","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\date.rs","byte_start":79883,"byte_end":79932,"line_start":508,"line_end":508,"column_start":5,"column_end":54}},{"value":"/ assert!(d.and_hms_opt(24, 34, 56).is_none());","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\date.rs","byte_start":79937,"byte_end":79986,"line_start":509,"line_end":509,"column_start":5,"column_end":54}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\date.rs","byte_start":79991,"byte_end":79999,"line_start":510,"line_end":510,"column_start":5,"column_end":13}},{"value":"inline","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\date.rs","byte_start":80004,"byte_end":80013,"line_start":511,"line_end":511,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":230},"span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\date.rs","byte_start":80970,"byte_end":80983,"line_start":537,"line_end":537,"column_start":12,"column_end":25},"name":"and_hms_milli","qualname":"<NaiveDate>::and_hms_milli","value":"fn (&self, hour: u32, min: u32, sec: u32, milli: u32) -> NaiveDateTime","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `NaiveDateTime` from the current date, hour, minute, second and millisecond.","sig":null,"attributes":[{"value":"/ Makes a new `NaiveDateTime` from the current date, hour, minute, second and millisecond.","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\date.rs","byte_start":80193,"byte_end":80285,"line_start":516,"line_end":516,"column_start":5,"column_end":97}},{"value":"/","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\date.rs","byte_start":80290,"byte_end":80293,"line_start":517,"line_end":517,"column_start":5,"column_end":8}},{"value":"/ The millisecond part can exceed 1,000","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\date.rs","byte_start":80298,"byte_end":80339,"line_start":518,"line_end":518,"column_start":5,"column_end":46}},{"value":"/ in order to represent the [leap second](../time/index.html#leap-second-handling).","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\date.rs","byte_start":80344,"byte_end":80429,"line_start":519,"line_end":519,"column_start":5,"column_end":90}},{"value":"/","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\date.rs","byte_start":80434,"byte_end":80437,"line_start":520,"line_end":520,"column_start":5,"column_end":8}},{"value":"/ Panics on invalid hour, minute, second and/or millisecond.","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\date.rs","byte_start":80442,"byte_end":80504,"line_start":521,"line_end":521,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\date.rs","byte_start":80509,"byte_end":80512,"line_start":522,"line_end":522,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\date.rs","byte_start":80517,"byte_end":80530,"line_start":523,"line_end":523,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\date.rs","byte_start":80535,"byte_end":80538,"line_start":524,"line_end":524,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\date.rs","byte_start":80543,"byte_end":80551,"line_start":525,"line_end":525,"column_start":5,"column_end":13}},{"value":"/ use chrono::{NaiveDate, NaiveDateTime, Datelike, Timelike, Weekday};","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\date.rs","byte_start":80556,"byte_end":80628,"line_start":526,"line_end":526,"column_start":5,"column_end":77}},{"value":"/","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\date.rs","byte_start":80633,"byte_end":80636,"line_start":527,"line_end":527,"column_start":5,"column_end":8}},{"value":"/ let d = NaiveDate::from_ymd(2015, 6, 3);","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\date.rs","byte_start":80641,"byte_end":80685,"line_start":528,"line_end":528,"column_start":5,"column_end":49}},{"value":"/","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\date.rs","byte_start":80690,"byte_end":80693,"line_start":529,"line_end":529,"column_start":5,"column_end":8}},{"value":"/ let dt: NaiveDateTime = d.and_hms_milli(12, 34, 56, 789);","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\date.rs","byte_start":80698,"byte_end":80759,"line_start":530,"line_end":530,"column_start":5,"column_end":66}},{"value":"/ assert_eq!(dt.year(), 2015);","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\date.rs","byte_start":80764,"byte_end":80796,"line_start":531,"line_end":531,"column_start":5,"column_end":37}},{"value":"/ assert_eq!(dt.weekday(), Weekday::Wed);","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\date.rs","byte_start":80801,"byte_end":80844,"line_start":532,"line_end":532,"column_start":5,"column_end":48}},{"value":"/ assert_eq!(dt.second(), 56);","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\date.rs","byte_start":80849,"byte_end":80881,"line_start":533,"line_end":533,"column_start":5,"column_end":37}},{"value":"/ assert_eq!(dt.nanosecond(), 789_000_000);","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\date.rs","byte_start":80886,"byte_end":80931,"line_start":534,"line_end":534,"column_start":5,"column_end":50}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\date.rs","byte_start":80936,"byte_end":80944,"line_start":535,"line_end":535,"column_start":5,"column_end":13}},{"value":"inline","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\date.rs","byte_start":80949,"byte_end":80958,"line_start":536,"line_end":536,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":231},"span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\date.rs","byte_start":82051,"byte_end":82068,"line_start":562,"line_end":562,"column_start":12,"column_end":29},"name":"and_hms_milli_opt","qualname":"<NaiveDate>::and_hms_milli_opt","value":"fn (&self, hour: u32, min: u32, sec: u32, milli: u32) -> Option<NaiveDateTime>","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `NaiveDateTime` from the current date, hour, minute, second and millisecond.","sig":null,"attributes":[{"value":"/ Makes a new `NaiveDateTime` from the current date, hour, minute, second and millisecond.","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\date.rs","byte_start":81141,"byte_end":81233,"line_start":541,"line_end":541,"column_start":5,"column_end":97}},{"value":"/","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\date.rs","byte_start":81238,"byte_end":81241,"line_start":542,"line_end":542,"column_start":5,"column_end":8}},{"value":"/ The millisecond part can exceed 1,000","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\date.rs","byte_start":81246,"byte_end":81287,"line_start":543,"line_end":543,"column_start":5,"column_end":46}},{"value":"/ in order to represent the [leap second](../time/index.html#leap-second-handling).","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\date.rs","byte_start":81292,"byte_end":81377,"line_start":544,"line_end":544,"column_start":5,"column_end":90}},{"value":"/","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\date.rs","byte_start":81382,"byte_end":81385,"line_start":545,"line_end":545,"column_start":5,"column_end":8}},{"value":"/ Returns `None` on invalid hour, minute, second and/or millisecond.","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\date.rs","byte_start":81390,"byte_end":81460,"line_start":546,"line_end":546,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\date.rs","byte_start":81465,"byte_end":81468,"line_start":547,"line_end":547,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\date.rs","byte_start":81473,"byte_end":81486,"line_start":548,"line_end":548,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\date.rs","byte_start":81491,"byte_end":81494,"line_start":549,"line_end":549,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\date.rs","byte_start":81499,"byte_end":81507,"line_start":550,"line_end":550,"column_start":5,"column_end":13}},{"value":"/ use chrono::NaiveDate;","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\date.rs","byte_start":81512,"byte_end":81538,"line_start":551,"line_end":551,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\date.rs","byte_start":81543,"byte_end":81546,"line_start":552,"line_end":552,"column_start":5,"column_end":8}},{"value":"/ let d = NaiveDate::from_ymd(2015, 6, 3);","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\date.rs","byte_start":81551,"byte_end":81595,"line_start":553,"line_end":553,"column_start":5,"column_end":49}},{"value":"/ assert!(d.and_hms_milli_opt(12, 34, 56,   789).is_some());","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\date.rs","byte_start":81600,"byte_end":81662,"line_start":554,"line_end":554,"column_start":5,"column_end":67}},{"value":"/ assert!(d.and_hms_milli_opt(12, 34, 59, 1_789).is_some()); // leap second","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\date.rs","byte_start":81667,"byte_end":81744,"line_start":555,"line_end":555,"column_start":5,"column_end":82}},{"value":"/ assert!(d.and_hms_milli_opt(12, 34, 59, 2_789).is_none());","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\date.rs","byte_start":81749,"byte_end":81811,"line_start":556,"line_end":556,"column_start":5,"column_end":67}},{"value":"/ assert!(d.and_hms_milli_opt(12, 34, 60,   789).is_none());","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\date.rs","byte_start":81816,"byte_end":81878,"line_start":557,"line_end":557,"column_start":5,"column_end":67}},{"value":"/ assert!(d.and_hms_milli_opt(12, 60, 56,   789).is_none());","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\date.rs","byte_start":81883,"byte_end":81945,"line_start":558,"line_end":558,"column_start":5,"column_end":67}},{"value":"/ assert!(d.and_hms_milli_opt(24, 34, 56,   789).is_none());","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\date.rs","byte_start":81950,"byte_end":82012,"line_start":559,"line_end":559,"column_start":5,"column_end":67}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\date.rs","byte_start":82017,"byte_end":82025,"line_start":560,"line_end":560,"column_start":5,"column_end":13}},{"value":"inline","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\date.rs","byte_start":82030,"byte_end":82039,"line_start":561,"line_end":561,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":233},"span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\date.rs","byte_start":83064,"byte_end":83077,"line_start":588,"line_end":588,"column_start":12,"column_end":25},"name":"and_hms_micro","qualname":"<NaiveDate>::and_hms_micro","value":"fn (&self, hour: u32, min: u32, sec: u32, micro: u32) -> NaiveDateTime","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `NaiveDateTime` from the current date, hour, minute, second and microsecond.","sig":null,"attributes":[{"value":"/ Makes a new `NaiveDateTime` from the current date, hour, minute, second and microsecond.","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\date.rs","byte_start":82279,"byte_end":82371,"line_start":567,"line_end":567,"column_start":5,"column_end":97}},{"value":"/","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\date.rs","byte_start":82376,"byte_end":82379,"line_start":568,"line_end":568,"column_start":5,"column_end":8}},{"value":"/ The microsecond part can exceed 1,000,000","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\date.rs","byte_start":82384,"byte_end":82429,"line_start":569,"line_end":569,"column_start":5,"column_end":50}},{"value":"/ in order to represent the [leap second](../time/index.html#leap-second-handling).","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\date.rs","byte_start":82434,"byte_end":82519,"line_start":570,"line_end":570,"column_start":5,"column_end":90}},{"value":"/","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\date.rs","byte_start":82524,"byte_end":82527,"line_start":571,"line_end":571,"column_start":5,"column_end":8}},{"value":"/ Panics on invalid hour, minute, second and/or microsecond.","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\date.rs","byte_start":82532,"byte_end":82594,"line_start":572,"line_end":572,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\date.rs","byte_start":82599,"byte_end":82602,"line_start":573,"line_end":573,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\date.rs","byte_start":82607,"byte_end":82620,"line_start":574,"line_end":574,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\date.rs","byte_start":82625,"byte_end":82628,"line_start":575,"line_end":575,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\date.rs","byte_start":82633,"byte_end":82641,"line_start":576,"line_end":576,"column_start":5,"column_end":13}},{"value":"/ use chrono::{NaiveDate, NaiveDateTime, Datelike, Timelike, Weekday};","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\date.rs","byte_start":82646,"byte_end":82718,"line_start":577,"line_end":577,"column_start":5,"column_end":77}},{"value":"/","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\date.rs","byte_start":82723,"byte_end":82726,"line_start":578,"line_end":578,"column_start":5,"column_end":8}},{"value":"/ let d = NaiveDate::from_ymd(2015, 6, 3);","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\date.rs","byte_start":82731,"byte_end":82775,"line_start":579,"line_end":579,"column_start":5,"column_end":49}},{"value":"/","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\date.rs","byte_start":82780,"byte_end":82783,"line_start":580,"line_end":580,"column_start":5,"column_end":8}},{"value":"/ let dt: NaiveDateTime = d.and_hms_micro(12, 34, 56, 789_012);","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\date.rs","byte_start":82788,"byte_end":82853,"line_start":581,"line_end":581,"column_start":5,"column_end":70}},{"value":"/ assert_eq!(dt.year(), 2015);","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\date.rs","byte_start":82858,"byte_end":82890,"line_start":582,"line_end":582,"column_start":5,"column_end":37}},{"value":"/ assert_eq!(dt.weekday(), Weekday::Wed);","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\date.rs","byte_start":82895,"byte_end":82938,"line_start":583,"line_end":583,"column_start":5,"column_end":48}},{"value":"/ assert_eq!(dt.second(), 56);","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\date.rs","byte_start":82943,"byte_end":82975,"line_start":584,"line_end":584,"column_start":5,"column_end":37}},{"value":"/ assert_eq!(dt.nanosecond(), 789_012_000);","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\date.rs","byte_start":82980,"byte_end":83025,"line_start":585,"line_end":585,"column_start":5,"column_end":50}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\date.rs","byte_start":83030,"byte_end":83038,"line_start":586,"line_end":586,"column_start":5,"column_end":13}},{"value":"inline","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\date.rs","byte_start":83043,"byte_end":83052,"line_start":587,"line_end":587,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":234},"span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\date.rs","byte_start":84173,"byte_end":84190,"line_start":613,"line_end":613,"column_start":12,"column_end":29},"name":"and_hms_micro_opt","qualname":"<NaiveDate>::and_hms_micro_opt","value":"fn (&self, hour: u32, min: u32, sec: u32, micro: u32) -> Option<NaiveDateTime>","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `NaiveDateTime` from the current date, hour, minute, second and microsecond.","sig":null,"attributes":[{"value":"/ Makes a new `NaiveDateTime` from the current date, hour, minute, second and microsecond.","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\date.rs","byte_start":83235,"byte_end":83327,"line_start":592,"line_end":592,"column_start":5,"column_end":97}},{"value":"/","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\date.rs","byte_start":83332,"byte_end":83335,"line_start":593,"line_end":593,"column_start":5,"column_end":8}},{"value":"/ The microsecond part can exceed 1,000,000","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\date.rs","byte_start":83340,"byte_end":83385,"line_start":594,"line_end":594,"column_start":5,"column_end":50}},{"value":"/ in order to represent the [leap second](../time/index.html#leap-second-handling).","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\date.rs","byte_start":83390,"byte_end":83475,"line_start":595,"line_end":595,"column_start":5,"column_end":90}},{"value":"/","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\date.rs","byte_start":83480,"byte_end":83483,"line_start":596,"line_end":596,"column_start":5,"column_end":8}},{"value":"/ Returns `None` on invalid hour, minute, second and/or microsecond.","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\date.rs","byte_start":83488,"byte_end":83558,"line_start":597,"line_end":597,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\date.rs","byte_start":83563,"byte_end":83566,"line_start":598,"line_end":598,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\date.rs","byte_start":83571,"byte_end":83584,"line_start":599,"line_end":599,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\date.rs","byte_start":83589,"byte_end":83592,"line_start":600,"line_end":600,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\date.rs","byte_start":83597,"byte_end":83605,"line_start":601,"line_end":601,"column_start":5,"column_end":13}},{"value":"/ use chrono::NaiveDate;","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\date.rs","byte_start":83610,"byte_end":83636,"line_start":602,"line_end":602,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\date.rs","byte_start":83641,"byte_end":83644,"line_start":603,"line_end":603,"column_start":5,"column_end":8}},{"value":"/ let d = NaiveDate::from_ymd(2015, 6, 3);","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\date.rs","byte_start":83649,"byte_end":83693,"line_start":604,"line_end":604,"column_start":5,"column_end":49}},{"value":"/ assert!(d.and_hms_micro_opt(12, 34, 56,   789_012).is_some());","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\date.rs","byte_start":83698,"byte_end":83764,"line_start":605,"line_end":605,"column_start":5,"column_end":71}},{"value":"/ assert!(d.and_hms_micro_opt(12, 34, 59, 1_789_012).is_some()); // leap second","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\date.rs","byte_start":83769,"byte_end":83850,"line_start":606,"line_end":606,"column_start":5,"column_end":86}},{"value":"/ assert!(d.and_hms_micro_opt(12, 34, 59, 2_789_012).is_none());","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\date.rs","byte_start":83855,"byte_end":83921,"line_start":607,"line_end":607,"column_start":5,"column_end":71}},{"value":"/ assert!(d.and_hms_micro_opt(12, 34, 60,   789_012).is_none());","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\date.rs","byte_start":83926,"byte_end":83992,"line_start":608,"line_end":608,"column_start":5,"column_end":71}},{"value":"/ assert!(d.and_hms_micro_opt(12, 60, 56,   789_012).is_none());","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\date.rs","byte_start":83997,"byte_end":84063,"line_start":609,"line_end":609,"column_start":5,"column_end":71}},{"value":"/ assert!(d.and_hms_micro_opt(24, 34, 56,   789_012).is_none());","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\date.rs","byte_start":84068,"byte_end":84134,"line_start":610,"line_end":610,"column_start":5,"column_end":71}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\date.rs","byte_start":84139,"byte_end":84147,"line_start":611,"line_end":611,"column_start":5,"column_end":13}},{"value":"inline","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\date.rs","byte_start":84152,"byte_end":84161,"line_start":612,"line_end":612,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":236},"span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\date.rs","byte_start":85190,"byte_end":85202,"line_start":639,"line_end":639,"column_start":12,"column_end":24},"name":"and_hms_nano","qualname":"<NaiveDate>::and_hms_nano","value":"fn (&self, hour: u32, min: u32, sec: u32, nano: u32) -> NaiveDateTime","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `NaiveDateTime` from the current date, hour, minute, second and nanosecond.","sig":null,"attributes":[{"value":"/ Makes a new `NaiveDateTime` from the current date, hour, minute, second and nanosecond.","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\date.rs","byte_start":84401,"byte_end":84492,"line_start":618,"line_end":618,"column_start":5,"column_end":96}},{"value":"/","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\date.rs","byte_start":84497,"byte_end":84500,"line_start":619,"line_end":619,"column_start":5,"column_end":8}},{"value":"/ The nanosecond part can exceed 1,000,000,000","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\date.rs","byte_start":84505,"byte_end":84553,"line_start":620,"line_end":620,"column_start":5,"column_end":53}},{"value":"/ in order to represent the [leap second](../time/index.html#leap-second-handling).","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\date.rs","byte_start":84558,"byte_end":84643,"line_start":621,"line_end":621,"column_start":5,"column_end":90}},{"value":"/","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\date.rs","byte_start":84648,"byte_end":84651,"line_start":622,"line_end":622,"column_start":5,"column_end":8}},{"value":"/ Panics on invalid hour, minute, second and/or nanosecond.","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\date.rs","byte_start":84656,"byte_end":84717,"line_start":623,"line_end":623,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\date.rs","byte_start":84722,"byte_end":84725,"line_start":624,"line_end":624,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\date.rs","byte_start":84730,"byte_end":84743,"line_start":625,"line_end":625,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\date.rs","byte_start":84748,"byte_end":84751,"line_start":626,"line_end":626,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\date.rs","byte_start":84756,"byte_end":84764,"line_start":627,"line_end":627,"column_start":5,"column_end":13}},{"value":"/ use chrono::{NaiveDate, NaiveDateTime, Datelike, Timelike, Weekday};","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\date.rs","byte_start":84769,"byte_end":84841,"line_start":628,"line_end":628,"column_start":5,"column_end":77}},{"value":"/","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\date.rs","byte_start":84846,"byte_end":84849,"line_start":629,"line_end":629,"column_start":5,"column_end":8}},{"value":"/ let d = NaiveDate::from_ymd(2015, 6, 3);","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\date.rs","byte_start":84854,"byte_end":84898,"line_start":630,"line_end":630,"column_start":5,"column_end":49}},{"value":"/","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\date.rs","byte_start":84903,"byte_end":84906,"line_start":631,"line_end":631,"column_start":5,"column_end":8}},{"value":"/ let dt: NaiveDateTime = d.and_hms_nano(12, 34, 56, 789_012_345);","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\date.rs","byte_start":84911,"byte_end":84979,"line_start":632,"line_end":632,"column_start":5,"column_end":73}},{"value":"/ assert_eq!(dt.year(), 2015);","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\date.rs","byte_start":84984,"byte_end":85016,"line_start":633,"line_end":633,"column_start":5,"column_end":37}},{"value":"/ assert_eq!(dt.weekday(), Weekday::Wed);","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\date.rs","byte_start":85021,"byte_end":85064,"line_start":634,"line_end":634,"column_start":5,"column_end":48}},{"value":"/ assert_eq!(dt.second(), 56);","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\date.rs","byte_start":85069,"byte_end":85101,"line_start":635,"line_end":635,"column_start":5,"column_end":37}},{"value":"/ assert_eq!(dt.nanosecond(), 789_012_345);","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\date.rs","byte_start":85106,"byte_end":85151,"line_start":636,"line_end":636,"column_start":5,"column_end":50}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\date.rs","byte_start":85156,"byte_end":85164,"line_start":637,"line_end":637,"column_start":5,"column_end":13}},{"value":"inline","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\date.rs","byte_start":85169,"byte_end":85178,"line_start":638,"line_end":638,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":237},"span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\date.rs","byte_start":86314,"byte_end":86330,"line_start":664,"line_end":664,"column_start":12,"column_end":28},"name":"and_hms_nano_opt","qualname":"<NaiveDate>::and_hms_nano_opt","value":"fn (&self, hour: u32, min: u32, sec: u32, nano: u32) -> Option<NaiveDateTime>","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `NaiveDateTime` from the current date, hour, minute, second and nanosecond.","sig":null,"attributes":[{"value":"/ Makes a new `NaiveDateTime` from the current date, hour, minute, second and nanosecond.","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\date.rs","byte_start":85357,"byte_end":85448,"line_start":643,"line_end":643,"column_start":5,"column_end":96}},{"value":"/","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\date.rs","byte_start":85453,"byte_end":85456,"line_start":644,"line_end":644,"column_start":5,"column_end":8}},{"value":"/ The nanosecond part can exceed 1,000,000,000","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\date.rs","byte_start":85461,"byte_end":85509,"line_start":645,"line_end":645,"column_start":5,"column_end":53}},{"value":"/ in order to represent the [leap second](../time/index.html#leap-second-handling).","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\date.rs","byte_start":85514,"byte_end":85599,"line_start":646,"line_end":646,"column_start":5,"column_end":90}},{"value":"/","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\date.rs","byte_start":85604,"byte_end":85607,"line_start":647,"line_end":647,"column_start":5,"column_end":8}},{"value":"/ Returns `None` on invalid hour, minute, second and/or nanosecond.","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\date.rs","byte_start":85612,"byte_end":85681,"line_start":648,"line_end":648,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\date.rs","byte_start":85686,"byte_end":85689,"line_start":649,"line_end":649,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\date.rs","byte_start":85694,"byte_end":85707,"line_start":650,"line_end":650,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\date.rs","byte_start":85712,"byte_end":85715,"line_start":651,"line_end":651,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\date.rs","byte_start":85720,"byte_end":85728,"line_start":652,"line_end":652,"column_start":5,"column_end":13}},{"value":"/ use chrono::NaiveDate;","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\date.rs","byte_start":85733,"byte_end":85759,"line_start":653,"line_end":653,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\date.rs","byte_start":85764,"byte_end":85767,"line_start":654,"line_end":654,"column_start":5,"column_end":8}},{"value":"/ let d = NaiveDate::from_ymd(2015, 6, 3);","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\date.rs","byte_start":85772,"byte_end":85816,"line_start":655,"line_end":655,"column_start":5,"column_end":49}},{"value":"/ assert!(d.and_hms_nano_opt(12, 34, 56,   789_012_345).is_some());","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\date.rs","byte_start":85821,"byte_end":85890,"line_start":656,"line_end":656,"column_start":5,"column_end":74}},{"value":"/ assert!(d.and_hms_nano_opt(12, 34, 59, 1_789_012_345).is_some()); // leap second","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\date.rs","byte_start":85895,"byte_end":85979,"line_start":657,"line_end":657,"column_start":5,"column_end":89}},{"value":"/ assert!(d.and_hms_nano_opt(12, 34, 59, 2_789_012_345).is_none());","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\date.rs","byte_start":85984,"byte_end":86053,"line_start":658,"line_end":658,"column_start":5,"column_end":74}},{"value":"/ assert!(d.and_hms_nano_opt(12, 34, 60,   789_012_345).is_none());","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\date.rs","byte_start":86058,"byte_end":86127,"line_start":659,"line_end":659,"column_start":5,"column_end":74}},{"value":"/ assert!(d.and_hms_nano_opt(12, 60, 56,   789_012_345).is_none());","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\date.rs","byte_start":86132,"byte_end":86201,"line_start":660,"line_end":660,"column_start":5,"column_end":74}},{"value":"/ assert!(d.and_hms_nano_opt(24, 34, 56,   789_012_345).is_none());","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\date.rs","byte_start":86206,"byte_end":86275,"line_start":661,"line_end":661,"column_start":5,"column_end":74}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\date.rs","byte_start":86280,"byte_end":86288,"line_start":662,"line_end":662,"column_start":5,"column_end":13}},{"value":"inline","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\date.rs","byte_start":86293,"byte_end":86302,"line_start":663,"line_end":663,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":243},"span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\date.rs","byte_start":88000,"byte_end":88004,"line_start":716,"line_end":716,"column_start":12,"column_end":16},"name":"succ","qualname":"<NaiveDate>::succ","value":"fn (&self) -> NaiveDate","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `NaiveDate` for the next calendar date.","sig":null,"attributes":[{"value":"/ Makes a new `NaiveDate` for the next calendar date.","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\date.rs","byte_start":87468,"byte_end":87523,"line_start":702,"line_end":702,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\date.rs","byte_start":87528,"byte_end":87531,"line_start":703,"line_end":703,"column_start":5,"column_end":8}},{"value":"/ Panics when `self` is the last representable date.","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\date.rs","byte_start":87536,"byte_end":87590,"line_start":704,"line_end":704,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\date.rs","byte_start":87595,"byte_end":87598,"line_start":705,"line_end":705,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\date.rs","byte_start":87603,"byte_end":87616,"line_start":706,"line_end":706,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\date.rs","byte_start":87621,"byte_end":87624,"line_start":707,"line_end":707,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\date.rs","byte_start":87629,"byte_end":87637,"line_start":708,"line_end":708,"column_start":5,"column_end":13}},{"value":"/ use chrono::NaiveDate;","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\date.rs","byte_start":87642,"byte_end":87668,"line_start":709,"line_end":709,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\date.rs","byte_start":87673,"byte_end":87676,"line_start":710,"line_end":710,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(NaiveDate::from_ymd(2015,  6,  3).succ(), NaiveDate::from_ymd(2015, 6, 4));","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\date.rs","byte_start":87681,"byte_end":87771,"line_start":711,"line_end":711,"column_start":5,"column_end":95}},{"value":"/ assert_eq!(NaiveDate::from_ymd(2015,  6, 30).succ(), NaiveDate::from_ymd(2015, 7, 1));","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\date.rs","byte_start":87776,"byte_end":87866,"line_start":712,"line_end":712,"column_start":5,"column_end":95}},{"value":"/ assert_eq!(NaiveDate::from_ymd(2015, 12, 31).succ(), NaiveDate::from_ymd(2016, 1, 1));","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\date.rs","byte_start":87871,"byte_end":87961,"line_start":713,"line_end":713,"column_start":5,"column_end":95}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\date.rs","byte_start":87966,"byte_end":87974,"line_start":714,"line_end":714,"column_start":5,"column_end":13}},{"value":"inline","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\date.rs","byte_start":87979,"byte_end":87988,"line_start":715,"line_end":715,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":244},"span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\date.rs","byte_start":88542,"byte_end":88550,"line_start":735,"line_end":735,"column_start":12,"column_end":20},"name":"succ_opt","qualname":"<NaiveDate>::succ_opt","value":"fn (&self) -> Option<NaiveDate>","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `NaiveDate` for the next calendar date.","sig":null,"attributes":[{"value":"/ Makes a new `NaiveDate` for the next calendar date.","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\date.rs","byte_start":88085,"byte_end":88140,"line_start":720,"line_end":720,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\date.rs","byte_start":88145,"byte_end":88148,"line_start":721,"line_end":721,"column_start":5,"column_end":8}},{"value":"/ Returns `None` when `self` is the last representable date.","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\date.rs","byte_start":88153,"byte_end":88215,"line_start":722,"line_end":722,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\date.rs","byte_start":88220,"byte_end":88223,"line_start":723,"line_end":723,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\date.rs","byte_start":88228,"byte_end":88241,"line_start":724,"line_end":724,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\date.rs","byte_start":88246,"byte_end":88249,"line_start":725,"line_end":725,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\date.rs","byte_start":88254,"byte_end":88262,"line_start":726,"line_end":726,"column_start":5,"column_end":13}},{"value":"/ use chrono::NaiveDate;","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\date.rs","byte_start":88267,"byte_end":88293,"line_start":727,"line_end":727,"column_start":5,"column_end":31}},{"value":"/ use chrono::naive::date::MAX;","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\date.rs","byte_start":88298,"byte_end":88331,"line_start":728,"line_end":728,"column_start":5,"column_end":38}},{"value":"/","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\date.rs","byte_start":88336,"byte_end":88339,"line_start":729,"line_end":729,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(NaiveDate::from_ymd(2015, 6, 3).succ_opt(),","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\date.rs","byte_start":88344,"byte_end":88402,"line_start":730,"line_end":730,"column_start":5,"column_end":63}},{"value":"/            Some(NaiveDate::from_ymd(2015, 6, 4)));","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\date.rs","byte_start":88407,"byte_end":88461,"line_start":731,"line_end":731,"column_start":5,"column_end":59}},{"value":"/ assert_eq!(MAX.succ_opt(), None);","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\date.rs","byte_start":88466,"byte_end":88503,"line_start":732,"line_end":732,"column_start":5,"column_end":42}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\date.rs","byte_start":88508,"byte_end":88516,"line_start":733,"line_end":733,"column_start":5,"column_end":13}},{"value":"inline","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\date.rs","byte_start":88521,"byte_end":88530,"line_start":734,"line_end":734,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":246},"span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\date.rs","byte_start":89227,"byte_end":89231,"line_start":753,"line_end":753,"column_start":12,"column_end":16},"name":"pred","qualname":"<NaiveDate>::pred","value":"fn (&self) -> NaiveDate","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `NaiveDate` for the previous calendar date.","sig":null,"attributes":[{"value":"/ Makes a new `NaiveDate` for the previous calendar date.","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\date.rs","byte_start":88690,"byte_end":88749,"line_start":739,"line_end":739,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\date.rs","byte_start":88754,"byte_end":88757,"line_start":740,"line_end":740,"column_start":5,"column_end":8}},{"value":"/ Panics when `self` is the first representable date.","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\date.rs","byte_start":88762,"byte_end":88817,"line_start":741,"line_end":741,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\date.rs","byte_start":88822,"byte_end":88825,"line_start":742,"line_end":742,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\date.rs","byte_start":88830,"byte_end":88843,"line_start":743,"line_end":743,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\date.rs","byte_start":88848,"byte_end":88851,"line_start":744,"line_end":744,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\date.rs","byte_start":88856,"byte_end":88864,"line_start":745,"line_end":745,"column_start":5,"column_end":13}},{"value":"/ use chrono::NaiveDate;","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\date.rs","byte_start":88869,"byte_end":88895,"line_start":746,"line_end":746,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\date.rs","byte_start":88900,"byte_end":88903,"line_start":747,"line_end":747,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(NaiveDate::from_ymd(2015, 6, 3).pred(), NaiveDate::from_ymd(2015,  6,  2));","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\date.rs","byte_start":88908,"byte_end":88998,"line_start":748,"line_end":748,"column_start":5,"column_end":95}},{"value":"/ assert_eq!(NaiveDate::from_ymd(2015, 6, 1).pred(), NaiveDate::from_ymd(2015,  5, 31));","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\date.rs","byte_start":89003,"byte_end":89093,"line_start":749,"line_end":749,"column_start":5,"column_end":95}},{"value":"/ assert_eq!(NaiveDate::from_ymd(2015, 1, 1).pred(), NaiveDate::from_ymd(2014, 12, 31));","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\date.rs","byte_start":89098,"byte_end":89188,"line_start":750,"line_end":750,"column_start":5,"column_end":95}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\date.rs","byte_start":89193,"byte_end":89201,"line_start":751,"line_end":751,"column_start":5,"column_end":13}},{"value":"inline","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\date.rs","byte_start":89206,"byte_end":89215,"line_start":752,"line_end":752,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":247},"span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\date.rs","byte_start":89774,"byte_end":89782,"line_start":772,"line_end":772,"column_start":12,"column_end":20},"name":"pred_opt","qualname":"<NaiveDate>::pred_opt","value":"fn (&self) -> Option<NaiveDate>","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `NaiveDate` for the previous calendar date.","sig":null,"attributes":[{"value":"/ Makes a new `NaiveDate` for the previous calendar date.","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\date.rs","byte_start":89312,"byte_end":89371,"line_start":757,"line_end":757,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\date.rs","byte_start":89376,"byte_end":89379,"line_start":758,"line_end":758,"column_start":5,"column_end":8}},{"value":"/ Returns `None` when `self` is the first representable date.","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\date.rs","byte_start":89384,"byte_end":89447,"line_start":759,"line_end":759,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\date.rs","byte_start":89452,"byte_end":89455,"line_start":760,"line_end":760,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\date.rs","byte_start":89460,"byte_end":89473,"line_start":761,"line_end":761,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\date.rs","byte_start":89478,"byte_end":89481,"line_start":762,"line_end":762,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\date.rs","byte_start":89486,"byte_end":89494,"line_start":763,"line_end":763,"column_start":5,"column_end":13}},{"value":"/ use chrono::NaiveDate;","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\date.rs","byte_start":89499,"byte_end":89525,"line_start":764,"line_end":764,"column_start":5,"column_end":31}},{"value":"/ use chrono::naive::date::MIN;","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\date.rs","byte_start":89530,"byte_end":89563,"line_start":765,"line_end":765,"column_start":5,"column_end":38}},{"value":"/","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\date.rs","byte_start":89568,"byte_end":89571,"line_start":766,"line_end":766,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(NaiveDate::from_ymd(2015, 6, 3).pred_opt(),","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\date.rs","byte_start":89576,"byte_end":89634,"line_start":767,"line_end":767,"column_start":5,"column_end":63}},{"value":"/            Some(NaiveDate::from_ymd(2015, 6, 2)));","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\date.rs","byte_start":89639,"byte_end":89693,"line_start":768,"line_end":768,"column_start":5,"column_end":59}},{"value":"/ assert_eq!(MIN.pred_opt(), None);","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\date.rs","byte_start":89698,"byte_end":89735,"line_start":769,"line_end":769,"column_start":5,"column_end":42}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\date.rs","byte_start":89740,"byte_end":89748,"line_start":770,"line_end":770,"column_start":5,"column_end":13}},{"value":"inline","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\date.rs","byte_start":89753,"byte_end":89762,"line_start":771,"line_end":771,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":249},"span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\date.rs","byte_start":90660,"byte_end":90671,"line_start":793,"line_end":793,"column_start":12,"column_end":23},"name":"checked_add","qualname":"<NaiveDate>::checked_add","value":"fn (self, rhs: Duration) -> Option<NaiveDate>","parent":null,"children":[],"decl_id":null,"docs":" Adds the `days` part of given `Duration` to the current date.","sig":null,"attributes":[{"value":"/ Adds the `days` part of given `Duration` to the current date.","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\date.rs","byte_start":89924,"byte_end":89989,"line_start":776,"line_end":776,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\date.rs","byte_start":89994,"byte_end":89997,"line_start":777,"line_end":777,"column_start":5,"column_end":8}},{"value":"/ Returns `None` when it will result in overflow.","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\date.rs","byte_start":90002,"byte_end":90053,"line_start":778,"line_end":778,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\date.rs","byte_start":90058,"byte_end":90061,"line_start":779,"line_end":779,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\date.rs","byte_start":90066,"byte_end":90079,"line_start":780,"line_end":780,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\date.rs","byte_start":90084,"byte_end":90087,"line_start":781,"line_end":781,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\date.rs","byte_start":90092,"byte_end":90100,"line_start":782,"line_end":782,"column_start":5,"column_end":13}},{"value":"/ use chrono::{NaiveDate, Duration};","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\date.rs","byte_start":90105,"byte_end":90143,"line_start":783,"line_end":783,"column_start":5,"column_end":43}},{"value":"/ use chrono::naive::date::MAX;","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\date.rs","byte_start":90148,"byte_end":90181,"line_start":784,"line_end":784,"column_start":5,"column_end":38}},{"value":"/","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\date.rs","byte_start":90186,"byte_end":90189,"line_start":785,"line_end":785,"column_start":5,"column_end":8}},{"value":"/ let d = NaiveDate::from_ymd(2015, 9, 5);","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\date.rs","byte_start":90194,"byte_end":90238,"line_start":786,"line_end":786,"column_start":5,"column_end":49}},{"value":"/ assert_eq!(d.checked_add(Duration::days(40)), Some(NaiveDate::from_ymd(2015, 10, 15)));","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\date.rs","byte_start":90243,"byte_end":90334,"line_start":787,"line_end":787,"column_start":5,"column_end":96}},{"value":"/ assert_eq!(d.checked_add(Duration::days(-40)), Some(NaiveDate::from_ymd(2015, 7, 27)));","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\date.rs","byte_start":90339,"byte_end":90430,"line_start":788,"line_end":788,"column_start":5,"column_end":96}},{"value":"/ assert_eq!(d.checked_add(Duration::days(1000_000_000)), None);","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\date.rs","byte_start":90435,"byte_end":90501,"line_start":789,"line_end":789,"column_start":5,"column_end":71}},{"value":"/ assert_eq!(d.checked_add(Duration::days(-1000_000_000)), None);","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\date.rs","byte_start":90506,"byte_end":90573,"line_start":790,"line_end":790,"column_start":5,"column_end":72}},{"value":"/ assert_eq!(MAX.checked_add(Duration::days(1)), None);","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\date.rs","byte_start":90578,"byte_end":90635,"line_start":791,"line_end":791,"column_start":5,"column_end":62}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\date.rs","byte_start":90640,"byte_end":90648,"line_start":792,"line_end":792,"column_start":5,"column_end":13}}]},{"kind":"Method","id":{"krate":0,"index":250},"span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\date.rs","byte_start":92131,"byte_end":92142,"line_start":824,"line_end":824,"column_start":12,"column_end":23},"name":"checked_sub","qualname":"<NaiveDate>::checked_sub","value":"fn (self, rhs: Duration) -> Option<NaiveDate>","parent":null,"children":[],"decl_id":null,"docs":" Subtracts the `days` part of given `Duration` from the current date.","sig":null,"attributes":[{"value":"/ Subtracts the `days` part of given `Duration` from the current date.","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\date.rs","byte_start":91388,"byte_end":91460,"line_start":807,"line_end":807,"column_start":5,"column_end":77}},{"value":"/","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\date.rs","byte_start":91465,"byte_end":91468,"line_start":808,"line_end":808,"column_start":5,"column_end":8}},{"value":"/ Returns `None` when it will result in overflow.","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\date.rs","byte_start":91473,"byte_end":91524,"line_start":809,"line_end":809,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\date.rs","byte_start":91529,"byte_end":91532,"line_start":810,"line_end":810,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\date.rs","byte_start":91537,"byte_end":91550,"line_start":811,"line_end":811,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\date.rs","byte_start":91555,"byte_end":91558,"line_start":812,"line_end":812,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\date.rs","byte_start":91563,"byte_end":91571,"line_start":813,"line_end":813,"column_start":5,"column_end":13}},{"value":"/ use chrono::{NaiveDate, Duration};","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\date.rs","byte_start":91576,"byte_end":91614,"line_start":814,"line_end":814,"column_start":5,"column_end":43}},{"value":"/ use chrono::naive::date::MIN;","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\date.rs","byte_start":91619,"byte_end":91652,"line_start":815,"line_end":815,"column_start":5,"column_end":38}},{"value":"/","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\date.rs","byte_start":91657,"byte_end":91660,"line_start":816,"line_end":816,"column_start":5,"column_end":8}},{"value":"/ let d = NaiveDate::from_ymd(2015, 9, 5);","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\date.rs","byte_start":91665,"byte_end":91709,"line_start":817,"line_end":817,"column_start":5,"column_end":49}},{"value":"/ assert_eq!(d.checked_sub(Duration::days(40)), Some(NaiveDate::from_ymd(2015, 7, 27)));","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\date.rs","byte_start":91714,"byte_end":91804,"line_start":818,"line_end":818,"column_start":5,"column_end":95}},{"value":"/ assert_eq!(d.checked_sub(Duration::days(-40)), Some(NaiveDate::from_ymd(2015, 10, 15)));","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\date.rs","byte_start":91809,"byte_end":91901,"line_start":819,"line_end":819,"column_start":5,"column_end":97}},{"value":"/ assert_eq!(d.checked_sub(Duration::days(1000_000_000)), None);","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\date.rs","byte_start":91906,"byte_end":91972,"line_start":820,"line_end":820,"column_start":5,"column_end":71}},{"value":"/ assert_eq!(d.checked_sub(Duration::days(-1000_000_000)), None);","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\date.rs","byte_start":91977,"byte_end":92044,"line_start":821,"line_end":821,"column_start":5,"column_end":72}},{"value":"/ assert_eq!(MIN.checked_sub(Duration::days(1)), None);","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\date.rs","byte_start":92049,"byte_end":92106,"line_start":822,"line_end":822,"column_start":5,"column_end":62}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\date.rs","byte_start":92111,"byte_end":92119,"line_start":823,"line_end":823,"column_start":5,"column_end":13}}]},{"kind":"Method","id":{"krate":0,"index":251},"span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\date.rs","byte_start":93549,"byte_end":93566,"line_start":856,"line_end":856,"column_start":12,"column_end":29},"name":"format_with_items","qualname":"<NaiveDate>::format_with_items","value":"fn <'a, I> (&self, items: I) -> DelayedFormat<I>","parent":null,"children":[],"decl_id":null,"docs":" Formats the date with the specified formatting items.\n Otherwise it is same to the ordinary `format` method.","sig":null,"attributes":[{"value":"/ Formats the date with the specified formatting items.","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\date.rs","byte_start":92859,"byte_end":92916,"line_start":838,"line_end":838,"column_start":5,"column_end":62}},{"value":"/ Otherwise it is same to the ordinary `format` method.","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\date.rs","byte_start":92921,"byte_end":92978,"line_start":839,"line_end":839,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\date.rs","byte_start":92983,"byte_end":92986,"line_start":840,"line_end":840,"column_start":5,"column_end":8}},{"value":"/ The `Iterator` of items should be `Clone`able,","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\date.rs","byte_start":92991,"byte_end":93041,"line_start":841,"line_end":841,"column_start":5,"column_end":55}},{"value":"/ since the resulting `DelayedFormat` value may be formatted multiple times.","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\date.rs","byte_start":93046,"byte_end":93124,"line_start":842,"line_end":842,"column_start":5,"column_end":83}},{"value":"/","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\date.rs","byte_start":93129,"byte_end":93132,"line_start":843,"line_end":843,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\date.rs","byte_start":93137,"byte_end":93150,"line_start":844,"line_end":844,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\date.rs","byte_start":93155,"byte_end":93158,"line_start":845,"line_end":845,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\date.rs","byte_start":93163,"byte_end":93171,"line_start":846,"line_end":846,"column_start":5,"column_end":13}},{"value":"/ use chrono::NaiveDate;","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\date.rs","byte_start":93176,"byte_end":93202,"line_start":847,"line_end":847,"column_start":5,"column_end":31}},{"value":"/ use chrono::format::strftime::StrftimeItems;","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\date.rs","byte_start":93207,"byte_end":93255,"line_start":848,"line_end":848,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\date.rs","byte_start":93260,"byte_end":93263,"line_start":849,"line_end":849,"column_start":5,"column_end":8}},{"value":"/ let fmt = StrftimeItems::new(\"%Y-%m-%d\");","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\date.rs","byte_start":93268,"byte_end":93313,"line_start":850,"line_end":850,"column_start":5,"column_end":50}},{"value":"/ let d = NaiveDate::from_ymd(2015, 9, 5);","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\date.rs","byte_start":93318,"byte_end":93362,"line_start":851,"line_end":851,"column_start":5,"column_end":49}},{"value":"/ assert_eq!(d.format_with_items(fmt.clone()).to_string(), \"2015-09-05\");","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\date.rs","byte_start":93367,"byte_end":93442,"line_start":852,"line_end":852,"column_start":5,"column_end":80}},{"value":"/ assert_eq!(d.format(\"%Y-%m-%d\").to_string(), \"2015-09-05\");","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\date.rs","byte_start":93447,"byte_end":93510,"line_start":853,"line_end":853,"column_start":5,"column_end":68}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\date.rs","byte_start":93515,"byte_end":93523,"line_start":854,"line_end":854,"column_start":5,"column_end":13}},{"value":"inline","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\date.rs","byte_start":93528,"byte_end":93537,"line_start":855,"line_end":855,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":254},"span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\date.rs","byte_start":94792,"byte_end":94798,"line_start":885,"line_end":885,"column_start":12,"column_end":18},"name":"format","qualname":"<NaiveDate>::format","value":"fn <'a> (&self, fmt: &'a str) -> DelayedFormat<StrftimeItems<'a>>","parent":null,"children":[],"decl_id":null,"docs":" Formats the date with the specified format string.\n See the [`format::strftime` module](../../format/strftime/index.html)\n on the supported escape sequences.","sig":null,"attributes":[{"value":"/ Formats the date with the specified format string.","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\date.rs","byte_start":93737,"byte_end":93791,"line_start":861,"line_end":861,"column_start":5,"column_end":59}},{"value":"/ See the [`format::strftime` module](../../format/strftime/index.html)","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\date.rs","byte_start":93796,"byte_end":93869,"line_start":862,"line_end":862,"column_start":5,"column_end":78}},{"value":"/ on the supported escape sequences.","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\date.rs","byte_start":93874,"byte_end":93912,"line_start":863,"line_end":863,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\date.rs","byte_start":93917,"byte_end":93920,"line_start":864,"line_end":864,"column_start":5,"column_end":8}},{"value":"/ This returns a `DelayedFormat`,","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\date.rs","byte_start":93925,"byte_end":93960,"line_start":865,"line_end":865,"column_start":5,"column_end":40}},{"value":"/ which gets converted to a string only when actual formatting happens.","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\date.rs","byte_start":93965,"byte_end":94038,"line_start":866,"line_end":866,"column_start":5,"column_end":78}},{"value":"/ You may use the `to_string` method to get a `String`,","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\date.rs","byte_start":94043,"byte_end":94100,"line_start":867,"line_end":867,"column_start":5,"column_end":62}},{"value":"/ or just feed it into `print!` and other formatting macros.","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\date.rs","byte_start":94105,"byte_end":94167,"line_start":868,"line_end":868,"column_start":5,"column_end":67}},{"value":"/ (In this way it avoids the redundant memory allocation.)","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\date.rs","byte_start":94172,"byte_end":94232,"line_start":869,"line_end":869,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\date.rs","byte_start":94237,"byte_end":94240,"line_start":870,"line_end":870,"column_start":5,"column_end":8}},{"value":"/ A wrong format string does *not* issue an error immediately.","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\date.rs","byte_start":94245,"byte_end":94309,"line_start":871,"line_end":871,"column_start":5,"column_end":69}},{"value":"/ Rather, converting or formatting the `DelayedFormat` fails.","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\date.rs","byte_start":94314,"byte_end":94377,"line_start":872,"line_end":872,"column_start":5,"column_end":68}},{"value":"/ You are recommended to immediately use `DelayedFormat` for this reason.","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\date.rs","byte_start":94382,"byte_end":94457,"line_start":873,"line_end":873,"column_start":5,"column_end":80}},{"value":"/","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\date.rs","byte_start":94462,"byte_end":94465,"line_start":874,"line_end":874,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\date.rs","byte_start":94470,"byte_end":94483,"line_start":875,"line_end":875,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\date.rs","byte_start":94488,"byte_end":94491,"line_start":876,"line_end":876,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\date.rs","byte_start":94496,"byte_end":94504,"line_start":877,"line_end":877,"column_start":5,"column_end":13}},{"value":"/ use chrono::NaiveDate;","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\date.rs","byte_start":94509,"byte_end":94535,"line_start":878,"line_end":878,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\date.rs","byte_start":94540,"byte_end":94543,"line_start":879,"line_end":879,"column_start":5,"column_end":8}},{"value":"/ let d = NaiveDate::from_ymd(2015, 9, 5);","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\date.rs","byte_start":94548,"byte_end":94592,"line_start":880,"line_end":880,"column_start":5,"column_end":49}},{"value":"/ assert_eq!(d.format(\"%Y-%m-%d\").to_string(), \"2015-09-05\");","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\date.rs","byte_start":94597,"byte_end":94660,"line_start":881,"line_end":881,"column_start":5,"column_end":68}},{"value":"/ assert_eq!(d.format(\"%A, %-d %B, %C%y\").to_string(), \"Saturday, 5 September, 2015\");","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\date.rs","byte_start":94665,"byte_end":94753,"line_start":882,"line_end":882,"column_start":5,"column_end":93}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\date.rs","byte_start":94758,"byte_end":94766,"line_start":883,"line_end":883,"column_start":5,"column_end":13}},{"value":"inline","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\date.rs","byte_start":94771,"byte_end":94780,"line_start":884,"line_end":884,"column_start":5,"column_end":14}}]},{"kind":"Mod","id":{"krate":0,"index":373},"span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\time.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"time","qualname":"::naive::time","value":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\time.rs","parent":null,"children":[{"krate":0,"index":374},{"krate":0,"index":378},{"krate":0,"index":381},{"krate":0,"index":382},{"krate":0,"index":383},{"krate":0,"index":384},{"krate":0,"index":389},{"krate":0,"index":1251},{"krate":0,"index":1272},{"krate":0,"index":1273},{"krate":0,"index":1269},{"krate":0,"index":1270},{"krate":0,"index":1259},{"krate":0,"index":1257},{"krate":0,"index":1256},{"krate":0,"index":1254},{"krate":0,"index":396},{"krate":0,"index":416},{"krate":0,"index":426},{"krate":0,"index":429},{"krate":0,"index":432},{"krate":0,"index":435},{"krate":0,"index":438},{"krate":0,"index":440},{"krate":0,"index":442}],"decl_id":null,"docs":" ISO 8601 time without timezone.","sig":null,"attributes":[{"value":"! ISO 8601 time without timezone.","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\time.rs","byte_start":175658,"byte_end":175693,"line_start":5,"line_end":5,"column_start":1,"column_end":36}},{"value":"!","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\time.rs","byte_start":175694,"byte_end":175697,"line_start":6,"line_end":6,"column_start":1,"column_end":4}},{"value":"! # Leap Second Handling","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\time.rs","byte_start":175698,"byte_end":175724,"line_start":7,"line_end":7,"column_start":1,"column_end":27}},{"value":"!","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\time.rs","byte_start":175725,"byte_end":175728,"line_start":8,"line_end":8,"column_start":1,"column_end":4}},{"value":"! Since 1960s, the manmade atomic clock has been so accurate that","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\time.rs","byte_start":175729,"byte_end":175796,"line_start":9,"line_end":9,"column_start":1,"column_end":68}},{"value":"! it is much more accurate than Earth's own motion.","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\time.rs","byte_start":175797,"byte_end":175850,"line_start":10,"line_end":10,"column_start":1,"column_end":54}},{"value":"! It became desirable to define the civil time in terms of the atomic clock,","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\time.rs","byte_start":175851,"byte_end":175929,"line_start":11,"line_end":11,"column_start":1,"column_end":79}},{"value":"! but that risks the desynchronization of the civil time from Earth.","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\time.rs","byte_start":175930,"byte_end":176000,"line_start":12,"line_end":12,"column_start":1,"column_end":71}},{"value":"! To account for this, the designers of the Coordinated Universal Time (UTC)","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\time.rs","byte_start":176001,"byte_end":176079,"line_start":13,"line_end":13,"column_start":1,"column_end":79}},{"value":"! made that the UTC should be kept within 0.9 seconds of the observed Earth-bound time.","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\time.rs","byte_start":176080,"byte_end":176169,"line_start":14,"line_end":14,"column_start":1,"column_end":90}},{"value":"! When the mean solar day is longer than the ideal (86,400 seconds),","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\time.rs","byte_start":176170,"byte_end":176240,"line_start":15,"line_end":15,"column_start":1,"column_end":71}},{"value":"! the error slowly accumulates and it is necessary to add a **leap second**","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\time.rs","byte_start":176241,"byte_end":176318,"line_start":16,"line_end":16,"column_start":1,"column_end":78}},{"value":"! to slow the UTC down a bit.","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\time.rs","byte_start":176319,"byte_end":176350,"line_start":17,"line_end":17,"column_start":1,"column_end":32}},{"value":"! (We may also remove a second to speed the UTC up a bit, but it never happened.)","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\time.rs","byte_start":176351,"byte_end":176434,"line_start":18,"line_end":18,"column_start":1,"column_end":84}},{"value":"! The leap second, if any, follows 23:59:59 of June 30 or December 31 in the UTC.","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\time.rs","byte_start":176435,"byte_end":176518,"line_start":19,"line_end":19,"column_start":1,"column_end":84}},{"value":"!","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\time.rs","byte_start":176519,"byte_end":176522,"line_start":20,"line_end":20,"column_start":1,"column_end":4}},{"value":"! Fast forward to the 21st century,","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\time.rs","byte_start":176523,"byte_end":176560,"line_start":21,"line_end":21,"column_start":1,"column_end":38}},{"value":"! we have seen 26 leap seconds from January 1972 to December 2015.","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\time.rs","byte_start":176561,"byte_end":176629,"line_start":22,"line_end":22,"column_start":1,"column_end":69}},{"value":"! Yes, 26 seconds. Probably you can read this paragraph within 26 seconds.","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\time.rs","byte_start":176630,"byte_end":176706,"line_start":23,"line_end":23,"column_start":1,"column_end":77}},{"value":"! But those 26 seconds, and possibly more in the future, are never predictable,","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\time.rs","byte_start":176707,"byte_end":176788,"line_start":24,"line_end":24,"column_start":1,"column_end":82}},{"value":"! and whether to add a leap second or not is known only before 6 months.","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\time.rs","byte_start":176789,"byte_end":176863,"line_start":25,"line_end":25,"column_start":1,"column_end":75}},{"value":"! Internet-based clocks (via NTP) do account for known leap seconds,","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\time.rs","byte_start":176864,"byte_end":176934,"line_start":26,"line_end":26,"column_start":1,"column_end":71}},{"value":"! but the system API normally doesn't (and often can't, with no network connection)","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\time.rs","byte_start":176935,"byte_end":177020,"line_start":27,"line_end":27,"column_start":1,"column_end":86}},{"value":"! and there is no reliable way to retrieve leap second information.","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\time.rs","byte_start":177021,"byte_end":177090,"line_start":28,"line_end":28,"column_start":1,"column_end":70}},{"value":"!","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\time.rs","byte_start":177091,"byte_end":177094,"line_start":29,"line_end":29,"column_start":1,"column_end":4}},{"value":"! Chrono does not try to accurately implement leap seconds; it is impossible.","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\time.rs","byte_start":177095,"byte_end":177174,"line_start":30,"line_end":30,"column_start":1,"column_end":80}},{"value":"! Rather, **it allows for leap seconds but behaves as if there are *no other* leap seconds.**","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\time.rs","byte_start":177175,"byte_end":177270,"line_start":31,"line_end":31,"column_start":1,"column_end":96}},{"value":"! Various time arithmetics will ignore any possible leap second(s)","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\time.rs","byte_start":177271,"byte_end":177339,"line_start":32,"line_end":32,"column_start":1,"column_end":69}},{"value":"! except when the operand were actually a leap second.","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\time.rs","byte_start":177340,"byte_end":177396,"line_start":33,"line_end":33,"column_start":1,"column_end":57}},{"value":"! The leap second is indicated via fractional seconds more than 1 second,","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\time.rs","byte_start":177397,"byte_end":177472,"line_start":34,"line_end":34,"column_start":1,"column_end":76}},{"value":"! so values like `NaiveTime::from_hms_milli(23, 56, 4, 1_005)` are allowed;","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\time.rs","byte_start":177473,"byte_end":177550,"line_start":35,"line_end":35,"column_start":1,"column_end":78}},{"value":"! that value would mean 5ms after the beginning of a leap second following 23:56:04.","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\time.rs","byte_start":177551,"byte_end":177637,"line_start":36,"line_end":36,"column_start":1,"column_end":87}},{"value":"! Parsing and formatting will correctly handle times that look like leap seconds,","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\time.rs","byte_start":177638,"byte_end":177721,"line_start":37,"line_end":37,"column_start":1,"column_end":84}},{"value":"! and you can then conveniently ignore leap seconds if you are not prepared for them.","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\time.rs","byte_start":177722,"byte_end":177809,"line_start":38,"line_end":38,"column_start":1,"column_end":88}},{"value":"!","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\time.rs","byte_start":177810,"byte_end":177813,"line_start":39,"line_end":39,"column_start":1,"column_end":4}},{"value":"! If you cannot tolerate this behavior,","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\time.rs","byte_start":177814,"byte_end":177855,"line_start":40,"line_end":40,"column_start":1,"column_end":42}},{"value":"! you must use a separate `TimeZone` for the International Atomic Time (TAI).","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\time.rs","byte_start":177856,"byte_end":177935,"line_start":41,"line_end":41,"column_start":1,"column_end":80}},{"value":"! TAI is like UTC but has no leap seconds, and thus slightly differs from UTC.","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\time.rs","byte_start":177936,"byte_end":178016,"line_start":42,"line_end":42,"column_start":1,"column_end":81}},{"value":"! Chrono 0.2 does not provide such implementation, but it is planned for 0.3.","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\time.rs","byte_start":178017,"byte_end":178096,"line_start":43,"line_end":43,"column_start":1,"column_end":80}}]},{"kind":"Struct","id":{"krate":0,"index":1251},"span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\time.rs","byte_start":178717,"byte_end":178726,"line_start":61,"line_end":61,"column_start":12,"column_end":21},"name":"NaiveTime","qualname":"::naive::time::NaiveTime","value":"NaiveTime {  }","parent":null,"children":[{"krate":0,"index":1252},{"krate":0,"index":1253}],"decl_id":null,"docs":" ISO 8601 time without timezone.\n Allows for the nanosecond precision and optional leap second representation.","sig":null,"attributes":[{"value":"/ ISO 8601 time without timezone.","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\time.rs","byte_start":178340,"byte_end":178375,"line_start":54,"line_end":54,"column_start":1,"column_end":36}},{"value":"/ Allows for the nanosecond precision and optional leap second representation.","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\time.rs","byte_start":178376,"byte_end":178456,"line_start":55,"line_end":55,"column_start":1,"column_end":81}},{"value":"/","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\time.rs","byte_start":178457,"byte_end":178460,"line_start":56,"line_end":56,"column_start":1,"column_end":4}},{"value":"/ <a name=\"leap-second-what?\"></a>","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\time.rs","byte_start":178461,"byte_end":178497,"line_start":57,"line_end":57,"column_start":1,"column_end":37}},{"value":"/ Chrono has a notable policy on the [leap second handling](./index.html#leap-second-handling),","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\time.rs","byte_start":178498,"byte_end":178595,"line_start":58,"line_end":58,"column_start":1,"column_end":98}},{"value":"/ designed to be maximally useful for typical users.","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\time.rs","byte_start":178596,"byte_end":178650,"line_start":59,"line_end":59,"column_start":1,"column_end":55}}]},{"kind":"Method","id":{"krate":0,"index":397},"span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\time.rs","byte_start":180023,"byte_end":180031,"line_start":104,"line_end":104,"column_start":12,"column_end":20},"name":"from_hms","qualname":"<NaiveTime>::from_hms","value":"fn (hour: u32, min: u32, sec: u32) -> NaiveTime","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `NaiveTime` from hour, minute and second.","sig":null,"attributes":[{"value":"/ Makes a new `NaiveTime` from hour, minute and second.","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\time.rs","byte_start":179410,"byte_end":179467,"line_start":85,"line_end":85,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\time.rs","byte_start":179472,"byte_end":179475,"line_start":86,"line_end":86,"column_start":5,"column_end":8}},{"value":"/ No [leap second](./index.html#leap-second-handling) is allowed here;","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\time.rs","byte_start":179480,"byte_end":179552,"line_start":87,"line_end":87,"column_start":5,"column_end":77}},{"value":"/ use `NaiveTime::from_hms_*` methods with a subsecond parameter instead.","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\time.rs","byte_start":179557,"byte_end":179632,"line_start":88,"line_end":88,"column_start":5,"column_end":80}},{"value":"/","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\time.rs","byte_start":179637,"byte_end":179640,"line_start":89,"line_end":89,"column_start":5,"column_end":8}},{"value":"/ Panics on invalid hour, minute and/or second.","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\time.rs","byte_start":179645,"byte_end":179694,"line_start":90,"line_end":90,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\time.rs","byte_start":179699,"byte_end":179702,"line_start":91,"line_end":91,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\time.rs","byte_start":179707,"byte_end":179720,"line_start":92,"line_end":92,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\time.rs","byte_start":179725,"byte_end":179728,"line_start":93,"line_end":93,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\time.rs","byte_start":179733,"byte_end":179741,"line_start":94,"line_end":94,"column_start":5,"column_end":13}},{"value":"/ use chrono::{NaiveTime, Timelike};","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\time.rs","byte_start":179746,"byte_end":179784,"line_start":95,"line_end":95,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\time.rs","byte_start":179789,"byte_end":179792,"line_start":96,"line_end":96,"column_start":5,"column_end":8}},{"value":"/ let t = NaiveTime::from_hms(23, 56, 4);","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\time.rs","byte_start":179797,"byte_end":179840,"line_start":97,"line_end":97,"column_start":5,"column_end":48}},{"value":"/ assert_eq!(t.hour(), 23);","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\time.rs","byte_start":179845,"byte_end":179874,"line_start":98,"line_end":98,"column_start":5,"column_end":34}},{"value":"/ assert_eq!(t.minute(), 56);","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\time.rs","byte_start":179879,"byte_end":179910,"line_start":99,"line_end":99,"column_start":5,"column_end":36}},{"value":"/ assert_eq!(t.second(), 4);","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\time.rs","byte_start":179915,"byte_end":179945,"line_start":100,"line_end":100,"column_start":5,"column_end":35}},{"value":"/ assert_eq!(t.nanosecond(), 0);","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\time.rs","byte_start":179950,"byte_end":179984,"line_start":101,"line_end":101,"column_start":5,"column_end":39}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\time.rs","byte_start":179989,"byte_end":179997,"line_start":102,"line_end":102,"column_start":5,"column_end":13}},{"value":"inline","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\time.rs","byte_start":180002,"byte_end":180011,"line_start":103,"line_end":103,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":398},"span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\time.rs","byte_start":180855,"byte_end":180867,"line_start":128,"line_end":128,"column_start":12,"column_end":24},"name":"from_hms_opt","qualname":"<NaiveTime>::from_hms_opt","value":"fn (hour: u32, min: u32, sec: u32) -> Option<NaiveTime>","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `NaiveTime` from hour, minute and second.","sig":null,"attributes":[{"value":"/ Makes a new `NaiveTime` from hour, minute and second.","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\time.rs","byte_start":180160,"byte_end":180217,"line_start":108,"line_end":108,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\time.rs","byte_start":180222,"byte_end":180225,"line_start":109,"line_end":109,"column_start":5,"column_end":8}},{"value":"/ No [leap second](./index.html#leap-second-handling) is allowed here;","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\time.rs","byte_start":180230,"byte_end":180302,"line_start":110,"line_end":110,"column_start":5,"column_end":77}},{"value":"/ use `NaiveTime::from_hms_*_opt` methods with a subsecond parameter instead.","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\time.rs","byte_start":180307,"byte_end":180386,"line_start":111,"line_end":111,"column_start":5,"column_end":84}},{"value":"/","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\time.rs","byte_start":180391,"byte_end":180394,"line_start":112,"line_end":112,"column_start":5,"column_end":8}},{"value":"/ Returns `None` on invalid hour, minute and/or second.","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\time.rs","byte_start":180399,"byte_end":180456,"line_start":113,"line_end":113,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\time.rs","byte_start":180461,"byte_end":180464,"line_start":114,"line_end":114,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\time.rs","byte_start":180469,"byte_end":180482,"line_start":115,"line_end":115,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\time.rs","byte_start":180487,"byte_end":180490,"line_start":116,"line_end":116,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\time.rs","byte_start":180495,"byte_end":180503,"line_start":117,"line_end":117,"column_start":5,"column_end":13}},{"value":"/ use chrono::NaiveTime;","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\time.rs","byte_start":180508,"byte_end":180534,"line_start":118,"line_end":118,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\time.rs","byte_start":180539,"byte_end":180542,"line_start":119,"line_end":119,"column_start":5,"column_end":8}},{"value":"/ let hms = |h,m,s| NaiveTime::from_hms_opt(h, m, s);","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\time.rs","byte_start":180547,"byte_end":180602,"line_start":120,"line_end":120,"column_start":5,"column_end":60}},{"value":"/ assert!(hms(0, 0, 0).is_some());","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\time.rs","byte_start":180607,"byte_end":180643,"line_start":121,"line_end":121,"column_start":5,"column_end":41}},{"value":"/ assert!(hms(23, 59, 59).is_some());","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\time.rs","byte_start":180648,"byte_end":180687,"line_start":122,"line_end":122,"column_start":5,"column_end":44}},{"value":"/ assert!(hms(24, 0, 0).is_none());","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\time.rs","byte_start":180692,"byte_end":180729,"line_start":123,"line_end":123,"column_start":5,"column_end":42}},{"value":"/ assert!(hms(23, 60, 0).is_none());","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\time.rs","byte_start":180734,"byte_end":180772,"line_start":124,"line_end":124,"column_start":5,"column_end":43}},{"value":"/ assert!(hms(23, 59, 60).is_none());","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\time.rs","byte_start":180777,"byte_end":180816,"line_start":125,"line_end":125,"column_start":5,"column_end":44}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\time.rs","byte_start":180821,"byte_end":180829,"line_start":126,"line_end":126,"column_start":5,"column_end":13}},{"value":"inline","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\time.rs","byte_start":180834,"byte_end":180843,"line_start":127,"line_end":127,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":399},"span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\time.rs","byte_start":181620,"byte_end":181634,"line_start":151,"line_end":151,"column_start":12,"column_end":26},"name":"from_hms_milli","qualname":"<NaiveTime>::from_hms_milli","value":"fn (hour: u32, min: u32, sec: u32, milli: u32) -> NaiveTime","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `NaiveTime` from hour, minute, second and millisecond.","sig":null,"attributes":[{"value":"/ Makes a new `NaiveTime` from hour, minute, second and millisecond.","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\time.rs","byte_start":180989,"byte_end":181059,"line_start":132,"line_end":132,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\time.rs","byte_start":181064,"byte_end":181067,"line_start":133,"line_end":133,"column_start":5,"column_end":8}},{"value":"/ The millisecond part can exceed 1,000","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\time.rs","byte_start":181072,"byte_end":181113,"line_start":134,"line_end":134,"column_start":5,"column_end":46}},{"value":"/ in order to represent the [leap second](./index.html#leap-second-handling).","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\time.rs","byte_start":181118,"byte_end":181197,"line_start":135,"line_end":135,"column_start":5,"column_end":84}},{"value":"/","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\time.rs","byte_start":181202,"byte_end":181205,"line_start":136,"line_end":136,"column_start":5,"column_end":8}},{"value":"/ Panics on invalid hour, minute, second and/or millisecond.","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\time.rs","byte_start":181210,"byte_end":181272,"line_start":137,"line_end":137,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\time.rs","byte_start":181277,"byte_end":181280,"line_start":138,"line_end":138,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\time.rs","byte_start":181285,"byte_end":181298,"line_start":139,"line_end":139,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\time.rs","byte_start":181303,"byte_end":181306,"line_start":140,"line_end":140,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\time.rs","byte_start":181311,"byte_end":181319,"line_start":141,"line_end":141,"column_start":5,"column_end":13}},{"value":"/ use chrono::{NaiveTime, Timelike};","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\time.rs","byte_start":181324,"byte_end":181362,"line_start":142,"line_end":142,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\time.rs","byte_start":181367,"byte_end":181370,"line_start":143,"line_end":143,"column_start":5,"column_end":8}},{"value":"/ let t = NaiveTime::from_hms_milli(23, 56, 4, 12);","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\time.rs","byte_start":181375,"byte_end":181428,"line_start":144,"line_end":144,"column_start":5,"column_end":58}},{"value":"/ assert_eq!(t.hour(), 23);","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\time.rs","byte_start":181433,"byte_end":181462,"line_start":145,"line_end":145,"column_start":5,"column_end":34}},{"value":"/ assert_eq!(t.minute(), 56);","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\time.rs","byte_start":181467,"byte_end":181498,"line_start":146,"line_end":146,"column_start":5,"column_end":36}},{"value":"/ assert_eq!(t.second(), 4);","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\time.rs","byte_start":181503,"byte_end":181533,"line_start":147,"line_end":147,"column_start":5,"column_end":35}},{"value":"/ assert_eq!(t.nanosecond(), 12_000_000);","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\time.rs","byte_start":181538,"byte_end":181581,"line_start":148,"line_end":148,"column_start":5,"column_end":48}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\time.rs","byte_start":181586,"byte_end":181594,"line_start":149,"line_end":149,"column_start":5,"column_end":13}},{"value":"inline","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\time.rs","byte_start":181599,"byte_end":181608,"line_start":150,"line_end":150,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":400},"span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\time.rs","byte_start":182660,"byte_end":182678,"line_start":177,"line_end":177,"column_start":12,"column_end":30},"name":"from_hms_milli_opt","qualname":"<NaiveTime>::from_hms_milli_opt","value":"fn (hour: u32, min: u32, sec: u32, milli: u32) -> Option<NaiveTime>","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `NaiveTime` from hour, minute, second and millisecond.","sig":null,"attributes":[{"value":"/ Makes a new `NaiveTime` from hour, minute, second and millisecond.","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\time.rs","byte_start":181788,"byte_end":181858,"line_start":155,"line_end":155,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\time.rs","byte_start":181863,"byte_end":181866,"line_start":156,"line_end":156,"column_start":5,"column_end":8}},{"value":"/ The millisecond part can exceed 1,000","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\time.rs","byte_start":181871,"byte_end":181912,"line_start":157,"line_end":157,"column_start":5,"column_end":46}},{"value":"/ in order to represent the [leap second](./index.html#leap-second-handling).","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\time.rs","byte_start":181917,"byte_end":181996,"line_start":158,"line_end":158,"column_start":5,"column_end":84}},{"value":"/","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\time.rs","byte_start":182001,"byte_end":182004,"line_start":159,"line_end":159,"column_start":5,"column_end":8}},{"value":"/ Returns `None` on invalid hour, minute, second and/or millisecond.","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\time.rs","byte_start":182009,"byte_end":182079,"line_start":160,"line_end":160,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\time.rs","byte_start":182084,"byte_end":182087,"line_start":161,"line_end":161,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\time.rs","byte_start":182092,"byte_end":182105,"line_start":162,"line_end":162,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\time.rs","byte_start":182110,"byte_end":182113,"line_start":163,"line_end":163,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\time.rs","byte_start":182118,"byte_end":182126,"line_start":164,"line_end":164,"column_start":5,"column_end":13}},{"value":"/ use chrono::NaiveTime;","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\time.rs","byte_start":182131,"byte_end":182157,"line_start":165,"line_end":165,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\time.rs","byte_start":182162,"byte_end":182165,"line_start":166,"line_end":166,"column_start":5,"column_end":8}},{"value":"/ let hmsm = |h,m,s,milli| NaiveTime::from_hms_milli_opt(h, m, s, milli);","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\time.rs","byte_start":182170,"byte_end":182245,"line_start":167,"line_end":167,"column_start":5,"column_end":80}},{"value":"/ assert!(hmsm(0, 0, 0, 0).is_some());","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\time.rs","byte_start":182250,"byte_end":182290,"line_start":168,"line_end":168,"column_start":5,"column_end":45}},{"value":"/ assert!(hmsm(23, 59, 59, 999).is_some());","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\time.rs","byte_start":182295,"byte_end":182340,"line_start":169,"line_end":169,"column_start":5,"column_end":50}},{"value":"/ assert!(hmsm(23, 59, 59, 1_999).is_some()); // a leap second following 23:59:59","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\time.rs","byte_start":182345,"byte_end":182428,"line_start":170,"line_end":170,"column_start":5,"column_end":88}},{"value":"/ assert!(hmsm(24, 0, 0, 0).is_none());","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\time.rs","byte_start":182433,"byte_end":182474,"line_start":171,"line_end":171,"column_start":5,"column_end":46}},{"value":"/ assert!(hmsm(23, 60, 0, 0).is_none());","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\time.rs","byte_start":182479,"byte_end":182521,"line_start":172,"line_end":172,"column_start":5,"column_end":47}},{"value":"/ assert!(hmsm(23, 59, 60, 0).is_none());","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\time.rs","byte_start":182526,"byte_end":182569,"line_start":173,"line_end":173,"column_start":5,"column_end":48}},{"value":"/ assert!(hmsm(23, 59, 59, 2_000).is_none());","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\time.rs","byte_start":182574,"byte_end":182621,"line_start":174,"line_end":174,"column_start":5,"column_end":52}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\time.rs","byte_start":182626,"byte_end":182634,"line_start":175,"line_end":175,"column_start":5,"column_end":13}},{"value":"inline","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\time.rs","byte_start":182639,"byte_end":182648,"line_start":176,"line_end":176,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":402},"span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\time.rs","byte_start":183514,"byte_end":183528,"line_start":201,"line_end":201,"column_start":12,"column_end":26},"name":"from_hms_micro","qualname":"<NaiveTime>::from_hms_micro","value":"fn (hour: u32, min: u32, sec: u32, micro: u32) -> NaiveTime","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `NaiveTime` from hour, minute, second and microsecond.","sig":null,"attributes":[{"value":"/ Makes a new `NaiveTime` from hour, minute, second and microsecond.","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\time.rs","byte_start":182875,"byte_end":182945,"line_start":182,"line_end":182,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\time.rs","byte_start":182950,"byte_end":182953,"line_start":183,"line_end":183,"column_start":5,"column_end":8}},{"value":"/ The microsecond part can exceed 1,000,000","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\time.rs","byte_start":182958,"byte_end":183003,"line_start":184,"line_end":184,"column_start":5,"column_end":50}},{"value":"/ in order to represent the [leap second](./index.html#leap-second-handling).","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\time.rs","byte_start":183008,"byte_end":183087,"line_start":185,"line_end":185,"column_start":5,"column_end":84}},{"value":"/","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\time.rs","byte_start":183092,"byte_end":183095,"line_start":186,"line_end":186,"column_start":5,"column_end":8}},{"value":"/ Panics on invalid hour, minute, second and/or microsecond.","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\time.rs","byte_start":183100,"byte_end":183162,"line_start":187,"line_end":187,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\time.rs","byte_start":183167,"byte_end":183170,"line_start":188,"line_end":188,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\time.rs","byte_start":183175,"byte_end":183188,"line_start":189,"line_end":189,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\time.rs","byte_start":183193,"byte_end":183196,"line_start":190,"line_end":190,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\time.rs","byte_start":183201,"byte_end":183209,"line_start":191,"line_end":191,"column_start":5,"column_end":13}},{"value":"/ use chrono::{NaiveTime, Timelike};","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\time.rs","byte_start":183214,"byte_end":183252,"line_start":192,"line_end":192,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\time.rs","byte_start":183257,"byte_end":183260,"line_start":193,"line_end":193,"column_start":5,"column_end":8}},{"value":"/ let t = NaiveTime::from_hms_micro(23, 56, 4, 12_345);","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\time.rs","byte_start":183265,"byte_end":183322,"line_start":194,"line_end":194,"column_start":5,"column_end":62}},{"value":"/ assert_eq!(t.hour(), 23);","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\time.rs","byte_start":183327,"byte_end":183356,"line_start":195,"line_end":195,"column_start":5,"column_end":34}},{"value":"/ assert_eq!(t.minute(), 56);","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\time.rs","byte_start":183361,"byte_end":183392,"line_start":196,"line_end":196,"column_start":5,"column_end":36}},{"value":"/ assert_eq!(t.second(), 4);","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\time.rs","byte_start":183397,"byte_end":183427,"line_start":197,"line_end":197,"column_start":5,"column_end":35}},{"value":"/ assert_eq!(t.nanosecond(), 12_345_000);","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\time.rs","byte_start":183432,"byte_end":183475,"line_start":198,"line_end":198,"column_start":5,"column_end":48}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\time.rs","byte_start":183480,"byte_end":183488,"line_start":199,"line_end":199,"column_start":5,"column_end":13}},{"value":"inline","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\time.rs","byte_start":183493,"byte_end":183502,"line_start":200,"line_end":200,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":403},"span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\time.rs","byte_start":184570,"byte_end":184588,"line_start":227,"line_end":227,"column_start":12,"column_end":30},"name":"from_hms_micro_opt","qualname":"<NaiveTime>::from_hms_micro_opt","value":"fn (hour: u32, min: u32, sec: u32, micro: u32) -> Option<NaiveTime>","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `NaiveTime` from hour, minute, second and microsecond.","sig":null,"attributes":[{"value":"/ Makes a new `NaiveTime` from hour, minute, second and microsecond.","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\time.rs","byte_start":183682,"byte_end":183752,"line_start":205,"line_end":205,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\time.rs","byte_start":183757,"byte_end":183760,"line_start":206,"line_end":206,"column_start":5,"column_end":8}},{"value":"/ The microsecond part can exceed 1,000,000","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\time.rs","byte_start":183765,"byte_end":183810,"line_start":207,"line_end":207,"column_start":5,"column_end":50}},{"value":"/ in order to represent the [leap second](./index.html#leap-second-handling).","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\time.rs","byte_start":183815,"byte_end":183894,"line_start":208,"line_end":208,"column_start":5,"column_end":84}},{"value":"/","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\time.rs","byte_start":183899,"byte_end":183902,"line_start":209,"line_end":209,"column_start":5,"column_end":8}},{"value":"/ Returns `None` on invalid hour, minute, second and/or microsecond.","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\time.rs","byte_start":183907,"byte_end":183977,"line_start":210,"line_end":210,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\time.rs","byte_start":183982,"byte_end":183985,"line_start":211,"line_end":211,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\time.rs","byte_start":183990,"byte_end":184003,"line_start":212,"line_end":212,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\time.rs","byte_start":184008,"byte_end":184011,"line_start":213,"line_end":213,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\time.rs","byte_start":184016,"byte_end":184024,"line_start":214,"line_end":214,"column_start":5,"column_end":13}},{"value":"/ use chrono::NaiveTime;","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\time.rs","byte_start":184029,"byte_end":184055,"line_start":215,"line_end":215,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\time.rs","byte_start":184060,"byte_end":184063,"line_start":216,"line_end":216,"column_start":5,"column_end":8}},{"value":"/ let hmsu = |h,m,s,micro| NaiveTime::from_hms_micro_opt(h, m, s, micro);","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\time.rs","byte_start":184068,"byte_end":184143,"line_start":217,"line_end":217,"column_start":5,"column_end":80}},{"value":"/ assert!(hmsu(0, 0, 0, 0).is_some());","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\time.rs","byte_start":184148,"byte_end":184188,"line_start":218,"line_end":218,"column_start":5,"column_end":45}},{"value":"/ assert!(hmsu(23, 59, 59, 999_999).is_some());","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\time.rs","byte_start":184193,"byte_end":184242,"line_start":219,"line_end":219,"column_start":5,"column_end":54}},{"value":"/ assert!(hmsu(23, 59, 59, 1_999_999).is_some()); // a leap second following 23:59:59","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\time.rs","byte_start":184247,"byte_end":184334,"line_start":220,"line_end":220,"column_start":5,"column_end":92}},{"value":"/ assert!(hmsu(24, 0, 0, 0).is_none());","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\time.rs","byte_start":184339,"byte_end":184380,"line_start":221,"line_end":221,"column_start":5,"column_end":46}},{"value":"/ assert!(hmsu(23, 60, 0, 0).is_none());","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\time.rs","byte_start":184385,"byte_end":184427,"line_start":222,"line_end":222,"column_start":5,"column_end":47}},{"value":"/ assert!(hmsu(23, 59, 60, 0).is_none());","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\time.rs","byte_start":184432,"byte_end":184475,"line_start":223,"line_end":223,"column_start":5,"column_end":48}},{"value":"/ assert!(hmsu(23, 59, 59, 2_000_000).is_none());","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\time.rs","byte_start":184480,"byte_end":184531,"line_start":224,"line_end":224,"column_start":5,"column_end":56}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\time.rs","byte_start":184536,"byte_end":184544,"line_start":225,"line_end":225,"column_start":5,"column_end":13}},{"value":"inline","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\time.rs","byte_start":184549,"byte_end":184558,"line_start":226,"line_end":226,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":405},"span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\time.rs","byte_start":185424,"byte_end":185437,"line_start":251,"line_end":251,"column_start":12,"column_end":25},"name":"from_hms_nano","qualname":"<NaiveTime>::from_hms_nano","value":"fn (hour: u32, min: u32, sec: u32, nano: u32) -> NaiveTime","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `NaiveTime` from hour, minute, second and nanosecond.","sig":null,"attributes":[{"value":"/ Makes a new `NaiveTime` from hour, minute, second and nanosecond.","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\time.rs","byte_start":184781,"byte_end":184850,"line_start":232,"line_end":232,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\time.rs","byte_start":184855,"byte_end":184858,"line_start":233,"line_end":233,"column_start":5,"column_end":8}},{"value":"/ The nanosecond part can exceed 1,000,000,000","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\time.rs","byte_start":184863,"byte_end":184911,"line_start":234,"line_end":234,"column_start":5,"column_end":53}},{"value":"/ in order to represent the [leap second](./index.html#leap-second-handling).","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\time.rs","byte_start":184916,"byte_end":184995,"line_start":235,"line_end":235,"column_start":5,"column_end":84}},{"value":"/","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\time.rs","byte_start":185000,"byte_end":185003,"line_start":236,"line_end":236,"column_start":5,"column_end":8}},{"value":"/ Panics on invalid hour, minute, second and/or nanosecond.","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\time.rs","byte_start":185008,"byte_end":185069,"line_start":237,"line_end":237,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\time.rs","byte_start":185074,"byte_end":185077,"line_start":238,"line_end":238,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\time.rs","byte_start":185082,"byte_end":185095,"line_start":239,"line_end":239,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\time.rs","byte_start":185100,"byte_end":185103,"line_start":240,"line_end":240,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\time.rs","byte_start":185108,"byte_end":185116,"line_start":241,"line_end":241,"column_start":5,"column_end":13}},{"value":"/ use chrono::{NaiveTime, Timelike};","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\time.rs","byte_start":185121,"byte_end":185159,"line_start":242,"line_end":242,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\time.rs","byte_start":185164,"byte_end":185167,"line_start":243,"line_end":243,"column_start":5,"column_end":8}},{"value":"/ let t = NaiveTime::from_hms_nano(23, 56, 4, 12_345_678);","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\time.rs","byte_start":185172,"byte_end":185232,"line_start":244,"line_end":244,"column_start":5,"column_end":65}},{"value":"/ assert_eq!(t.hour(), 23);","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\time.rs","byte_start":185237,"byte_end":185266,"line_start":245,"line_end":245,"column_start":5,"column_end":34}},{"value":"/ assert_eq!(t.minute(), 56);","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\time.rs","byte_start":185271,"byte_end":185302,"line_start":246,"line_end":246,"column_start":5,"column_end":36}},{"value":"/ assert_eq!(t.second(), 4);","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\time.rs","byte_start":185307,"byte_end":185337,"line_start":247,"line_end":247,"column_start":5,"column_end":35}},{"value":"/ assert_eq!(t.nanosecond(), 12_345_678);","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\time.rs","byte_start":185342,"byte_end":185385,"line_start":248,"line_end":248,"column_start":5,"column_end":48}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\time.rs","byte_start":185390,"byte_end":185398,"line_start":249,"line_end":249,"column_start":5,"column_end":13}},{"value":"inline","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\time.rs","byte_start":185403,"byte_end":185412,"line_start":250,"line_end":250,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":406},"span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\time.rs","byte_start":186486,"byte_end":186503,"line_start":277,"line_end":277,"column_start":12,"column_end":29},"name":"from_hms_nano_opt","qualname":"<NaiveTime>::from_hms_nano_opt","value":"fn (hour: u32, min: u32, sec: u32, nano: u32) -> Option<NaiveTime>","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `NaiveTime` from hour, minute, second and nanosecond.","sig":null,"attributes":[{"value":"/ Makes a new `NaiveTime` from hour, minute, second and nanosecond.","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\time.rs","byte_start":185588,"byte_end":185657,"line_start":255,"line_end":255,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\time.rs","byte_start":185662,"byte_end":185665,"line_start":256,"line_end":256,"column_start":5,"column_end":8}},{"value":"/ The nanosecond part can exceed 1,000,000,000","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\time.rs","byte_start":185670,"byte_end":185718,"line_start":257,"line_end":257,"column_start":5,"column_end":53}},{"value":"/ in order to represent the [leap second](./index.html#leap-second-handling).","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\time.rs","byte_start":185723,"byte_end":185802,"line_start":258,"line_end":258,"column_start":5,"column_end":84}},{"value":"/","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\time.rs","byte_start":185807,"byte_end":185810,"line_start":259,"line_end":259,"column_start":5,"column_end":8}},{"value":"/ Returns `None` on invalid hour, minute, second and/or nanosecond.","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\time.rs","byte_start":185815,"byte_end":185884,"line_start":260,"line_end":260,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\time.rs","byte_start":185889,"byte_end":185892,"line_start":261,"line_end":261,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\time.rs","byte_start":185897,"byte_end":185910,"line_start":262,"line_end":262,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\time.rs","byte_start":185915,"byte_end":185918,"line_start":263,"line_end":263,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\time.rs","byte_start":185923,"byte_end":185931,"line_start":264,"line_end":264,"column_start":5,"column_end":13}},{"value":"/ use chrono::NaiveTime;","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\time.rs","byte_start":185936,"byte_end":185962,"line_start":265,"line_end":265,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\time.rs","byte_start":185967,"byte_end":185970,"line_start":266,"line_end":266,"column_start":5,"column_end":8}},{"value":"/ let hmsn = |h,m,s,nano| NaiveTime::from_hms_nano_opt(h, m, s, nano);","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\time.rs","byte_start":185975,"byte_end":186047,"line_start":267,"line_end":267,"column_start":5,"column_end":77}},{"value":"/ assert!(hmsn(0, 0, 0, 0).is_some());","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\time.rs","byte_start":186052,"byte_end":186092,"line_start":268,"line_end":268,"column_start":5,"column_end":45}},{"value":"/ assert!(hmsn(23, 59, 59, 999_999_999).is_some());","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\time.rs","byte_start":186097,"byte_end":186150,"line_start":269,"line_end":269,"column_start":5,"column_end":58}},{"value":"/ assert!(hmsn(23, 59, 59, 1_999_999_999).is_some()); // a leap second following 23:59:59","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\time.rs","byte_start":186155,"byte_end":186246,"line_start":270,"line_end":270,"column_start":5,"column_end":96}},{"value":"/ assert!(hmsn(24, 0, 0, 0).is_none());","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\time.rs","byte_start":186251,"byte_end":186292,"line_start":271,"line_end":271,"column_start":5,"column_end":46}},{"value":"/ assert!(hmsn(23, 60, 0, 0).is_none());","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\time.rs","byte_start":186297,"byte_end":186339,"line_start":272,"line_end":272,"column_start":5,"column_end":47}},{"value":"/ assert!(hmsn(23, 59, 60, 0).is_none());","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\time.rs","byte_start":186344,"byte_end":186387,"line_start":273,"line_end":273,"column_start":5,"column_end":48}},{"value":"/ assert!(hmsn(23, 59, 59, 2_000_000_000).is_none());","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\time.rs","byte_start":186392,"byte_end":186447,"line_start":274,"line_end":274,"column_start":5,"column_end":60}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\time.rs","byte_start":186452,"byte_end":186460,"line_start":275,"line_end":275,"column_start":5,"column_end":13}},{"value":"inline","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\time.rs","byte_start":186465,"byte_end":186474,"line_start":276,"line_end":276,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":407},"span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\time.rs","byte_start":187439,"byte_end":187469,"line_start":302,"line_end":302,"column_start":12,"column_end":42},"name":"from_num_seconds_from_midnight","qualname":"<NaiveTime>::from_num_seconds_from_midnight","value":"fn (secs: u32, nano: u32) -> NaiveTime","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `NaiveTime` from the number of seconds since midnight and nanosecond.","sig":null,"attributes":[{"value":"/ Makes a new `NaiveTime` from the number of seconds since midnight and nanosecond.","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\time.rs","byte_start":186770,"byte_end":186855,"line_start":283,"line_end":283,"column_start":5,"column_end":90}},{"value":"/","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\time.rs","byte_start":186860,"byte_end":186863,"line_start":284,"line_end":284,"column_start":5,"column_end":8}},{"value":"/ The nanosecond part can exceed 1,000,000,000","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\time.rs","byte_start":186868,"byte_end":186916,"line_start":285,"line_end":285,"column_start":5,"column_end":53}},{"value":"/ in order to represent the [leap second](./index.html#leap-second-handling).","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\time.rs","byte_start":186921,"byte_end":187000,"line_start":286,"line_end":286,"column_start":5,"column_end":84}},{"value":"/","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\time.rs","byte_start":187005,"byte_end":187008,"line_start":287,"line_end":287,"column_start":5,"column_end":8}},{"value":"/ Panics on invalid number of seconds and/or nanosecond.","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\time.rs","byte_start":187013,"byte_end":187071,"line_start":288,"line_end":288,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\time.rs","byte_start":187076,"byte_end":187079,"line_start":289,"line_end":289,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\time.rs","byte_start":187084,"byte_end":187097,"line_start":290,"line_end":290,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\time.rs","byte_start":187102,"byte_end":187105,"line_start":291,"line_end":291,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\time.rs","byte_start":187110,"byte_end":187118,"line_start":292,"line_end":292,"column_start":5,"column_end":13}},{"value":"/ use chrono::{NaiveTime, Timelike};","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\time.rs","byte_start":187123,"byte_end":187161,"line_start":293,"line_end":293,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\time.rs","byte_start":187166,"byte_end":187169,"line_start":294,"line_end":294,"column_start":5,"column_end":8}},{"value":"/ let t = NaiveTime::from_num_seconds_from_midnight(86164, 12_345_678);","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\time.rs","byte_start":187174,"byte_end":187247,"line_start":295,"line_end":295,"column_start":5,"column_end":78}},{"value":"/ assert_eq!(t.hour(), 23);","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\time.rs","byte_start":187252,"byte_end":187281,"line_start":296,"line_end":296,"column_start":5,"column_end":34}},{"value":"/ assert_eq!(t.minute(), 56);","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\time.rs","byte_start":187286,"byte_end":187317,"line_start":297,"line_end":297,"column_start":5,"column_end":36}},{"value":"/ assert_eq!(t.second(), 4);","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\time.rs","byte_start":187322,"byte_end":187352,"line_start":298,"line_end":298,"column_start":5,"column_end":35}},{"value":"/ assert_eq!(t.nanosecond(), 12_345_678);","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\time.rs","byte_start":187357,"byte_end":187400,"line_start":299,"line_end":299,"column_start":5,"column_end":48}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\time.rs","byte_start":187405,"byte_end":187413,"line_start":300,"line_end":300,"column_start":5,"column_end":13}},{"value":"inline","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\time.rs","byte_start":187418,"byte_end":187427,"line_start":301,"line_end":301,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":408},"span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\time.rs","byte_start":188412,"byte_end":188446,"line_start":326,"line_end":326,"column_start":12,"column_end":46},"name":"from_num_seconds_from_midnight_opt","qualname":"<NaiveTime>::from_num_seconds_from_midnight_opt","value":"fn (secs: u32, nano: u32) -> Option<NaiveTime>","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `NaiveTime` from the number of seconds since midnight and nanosecond.","sig":null,"attributes":[{"value":"/ Makes a new `NaiveTime` from the number of seconds since midnight and nanosecond.","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\time.rs","byte_start":187607,"byte_end":187692,"line_start":306,"line_end":306,"column_start":5,"column_end":90}},{"value":"/","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\time.rs","byte_start":187697,"byte_end":187700,"line_start":307,"line_end":307,"column_start":5,"column_end":8}},{"value":"/ The nanosecond part can exceed 1,000,000,000","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\time.rs","byte_start":187705,"byte_end":187753,"line_start":308,"line_end":308,"column_start":5,"column_end":53}},{"value":"/ in order to represent the [leap second](./index.html#leap-second-handling).","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\time.rs","byte_start":187758,"byte_end":187837,"line_start":309,"line_end":309,"column_start":5,"column_end":84}},{"value":"/","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\time.rs","byte_start":187842,"byte_end":187845,"line_start":310,"line_end":310,"column_start":5,"column_end":8}},{"value":"/ Returns `None` on invalid number of seconds and/or nanosecond.","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\time.rs","byte_start":187850,"byte_end":187916,"line_start":311,"line_end":311,"column_start":5,"column_end":71}},{"value":"/","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\time.rs","byte_start":187921,"byte_end":187924,"line_start":312,"line_end":312,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\time.rs","byte_start":187929,"byte_end":187942,"line_start":313,"line_end":313,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\time.rs","byte_start":187947,"byte_end":187950,"line_start":314,"line_end":314,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\time.rs","byte_start":187955,"byte_end":187963,"line_start":315,"line_end":315,"column_start":5,"column_end":13}},{"value":"/ use chrono::NaiveTime;","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\time.rs","byte_start":187968,"byte_end":187994,"line_start":316,"line_end":316,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\time.rs","byte_start":187999,"byte_end":188002,"line_start":317,"line_end":317,"column_start":5,"column_end":8}},{"value":"/ let secs = |secs,nano| NaiveTime::from_num_seconds_from_midnight_opt(secs, nano);","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\time.rs","byte_start":188007,"byte_end":188092,"line_start":318,"line_end":318,"column_start":5,"column_end":90}},{"value":"/ assert!(secs(0, 0).is_some());","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\time.rs","byte_start":188097,"byte_end":188131,"line_start":319,"line_end":319,"column_start":5,"column_end":39}},{"value":"/ assert!(secs(86399, 999_999_999).is_some());","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\time.rs","byte_start":188136,"byte_end":188184,"line_start":320,"line_end":320,"column_start":5,"column_end":53}},{"value":"/ assert!(secs(86399, 1_999_999_999).is_some()); // a leap second following 23:59:59","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\time.rs","byte_start":188189,"byte_end":188275,"line_start":321,"line_end":321,"column_start":5,"column_end":91}},{"value":"/ assert!(secs(86400, 0).is_none());","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\time.rs","byte_start":188280,"byte_end":188318,"line_start":322,"line_end":322,"column_start":5,"column_end":43}},{"value":"/ assert!(secs(86399, 2_000_000_000).is_none());","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\time.rs","byte_start":188323,"byte_end":188373,"line_start":323,"line_end":323,"column_start":5,"column_end":55}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\time.rs","byte_start":188378,"byte_end":188386,"line_start":324,"line_end":324,"column_start":5,"column_end":13}},{"value":"inline","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\time.rs","byte_start":188391,"byte_end":188400,"line_start":325,"line_end":325,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":409},"span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\time.rs","byte_start":190924,"byte_end":190938,"line_start":386,"line_end":386,"column_start":12,"column_end":26},"name":"parse_from_str","qualname":"<NaiveTime>::parse_from_str","value":"fn (s: &str, fmt: &str) -> ParseResult<NaiveTime>","parent":null,"children":[],"decl_id":null,"docs":" Parses a string with the specified format string and returns a new `NaiveTime`.\n See the [`format::strftime` module](../../format/strftime/index.html)\n on the supported escape sequences.","sig":null,"attributes":[{"value":"/ Parses a string with the specified format string and returns a new `NaiveTime`.","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\time.rs","byte_start":188621,"byte_end":188704,"line_start":331,"line_end":331,"column_start":5,"column_end":88}},{"value":"/ See the [`format::strftime` module](../../format/strftime/index.html)","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\time.rs","byte_start":188709,"byte_end":188782,"line_start":332,"line_end":332,"column_start":5,"column_end":78}},{"value":"/ on the supported escape sequences.","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\time.rs","byte_start":188787,"byte_end":188825,"line_start":333,"line_end":333,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\time.rs","byte_start":188830,"byte_end":188833,"line_start":334,"line_end":334,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\time.rs","byte_start":188838,"byte_end":188851,"line_start":335,"line_end":335,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\time.rs","byte_start":188856,"byte_end":188859,"line_start":336,"line_end":336,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\time.rs","byte_start":188864,"byte_end":188872,"line_start":337,"line_end":337,"column_start":5,"column_end":13}},{"value":"/ use chrono::NaiveTime;","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\time.rs","byte_start":188877,"byte_end":188903,"line_start":338,"line_end":338,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\time.rs","byte_start":188908,"byte_end":188911,"line_start":339,"line_end":339,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(NaiveTime::parse_from_str(\"23:56:04\", \"%H:%M:%S\"),","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\time.rs","byte_start":188916,"byte_end":188981,"line_start":340,"line_end":340,"column_start":5,"column_end":70}},{"value":"/            Ok(NaiveTime::from_hms(23, 56, 4)));","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\time.rs","byte_start":188986,"byte_end":189037,"line_start":341,"line_end":341,"column_start":5,"column_end":56}},{"value":"/ assert_eq!(NaiveTime::parse_from_str(\"pm012345.6789\", \"%p%I%M%S%.f\"),","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\time.rs","byte_start":189042,"byte_end":189115,"line_start":342,"line_end":342,"column_start":5,"column_end":78}},{"value":"/            Ok(NaiveTime::from_hms_micro(13, 23, 45, 678_900)));","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\time.rs","byte_start":189120,"byte_end":189187,"line_start":343,"line_end":343,"column_start":5,"column_end":72}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\time.rs","byte_start":189192,"byte_end":189200,"line_start":344,"line_end":344,"column_start":5,"column_end":13}},{"value":"/","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\time.rs","byte_start":189205,"byte_end":189208,"line_start":345,"line_end":345,"column_start":5,"column_end":8}},{"value":"/ Date and offset is ignored for the purpose of parsing.","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\time.rs","byte_start":189213,"byte_end":189271,"line_start":346,"line_end":346,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\time.rs","byte_start":189276,"byte_end":189279,"line_start":347,"line_end":347,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\time.rs","byte_start":189284,"byte_end":189292,"line_start":348,"line_end":348,"column_start":5,"column_end":13}},{"value":"/ # use chrono::NaiveTime;","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\time.rs","byte_start":189297,"byte_end":189325,"line_start":349,"line_end":349,"column_start":5,"column_end":33}},{"value":"/ assert_eq!(NaiveTime::parse_from_str(\"2014-5-17T12:34:56+09:30\", \"%Y-%m-%dT%H:%M:%S%z\"),","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\time.rs","byte_start":189330,"byte_end":189422,"line_start":350,"line_end":350,"column_start":5,"column_end":97}},{"value":"/            Ok(NaiveTime::from_hms(12, 34, 56)));","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\time.rs","byte_start":189427,"byte_end":189479,"line_start":351,"line_end":351,"column_start":5,"column_end":57}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\time.rs","byte_start":189484,"byte_end":189492,"line_start":352,"line_end":352,"column_start":5,"column_end":13}},{"value":"/","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\time.rs","byte_start":189497,"byte_end":189500,"line_start":353,"line_end":353,"column_start":5,"column_end":8}},{"value":"/ [Leap seconds](./index.html#leap-second-handling) are correctly handled by","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\time.rs","byte_start":189505,"byte_end":189583,"line_start":354,"line_end":354,"column_start":5,"column_end":83}},{"value":"/ treating any time of the form `hh:mm:60` as a leap second.","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\time.rs","byte_start":189588,"byte_end":189650,"line_start":355,"line_end":355,"column_start":5,"column_end":67}},{"value":"/ (This equally applies to the formatting, so the round trip is possible.)","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\time.rs","byte_start":189655,"byte_end":189731,"line_start":356,"line_end":356,"column_start":5,"column_end":81}},{"value":"/","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\time.rs","byte_start":189736,"byte_end":189739,"line_start":357,"line_end":357,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\time.rs","byte_start":189744,"byte_end":189752,"line_start":358,"line_end":358,"column_start":5,"column_end":13}},{"value":"/ # use chrono::NaiveTime;","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\time.rs","byte_start":189757,"byte_end":189785,"line_start":359,"line_end":359,"column_start":5,"column_end":33}},{"value":"/ assert_eq!(NaiveTime::parse_from_str(\"08:59:60.123\", \"%H:%M:%S%.f\"),","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\time.rs","byte_start":189790,"byte_end":189862,"line_start":360,"line_end":360,"column_start":5,"column_end":77}},{"value":"/            Ok(NaiveTime::from_hms_milli(8, 59, 59, 1_123)));","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\time.rs","byte_start":189867,"byte_end":189931,"line_start":361,"line_end":361,"column_start":5,"column_end":69}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\time.rs","byte_start":189936,"byte_end":189944,"line_start":362,"line_end":362,"column_start":5,"column_end":13}},{"value":"/","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\time.rs","byte_start":189949,"byte_end":189952,"line_start":363,"line_end":363,"column_start":5,"column_end":8}},{"value":"/ Missing seconds are assumed to be zero,","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\time.rs","byte_start":189957,"byte_end":190000,"line_start":364,"line_end":364,"column_start":5,"column_end":48}},{"value":"/ but out-of-bound times or insufficient fields are errors otherwise.","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\time.rs","byte_start":190005,"byte_end":190076,"line_start":365,"line_end":365,"column_start":5,"column_end":76}},{"value":"/","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\time.rs","byte_start":190081,"byte_end":190084,"line_start":366,"line_end":366,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\time.rs","byte_start":190089,"byte_end":190097,"line_start":367,"line_end":367,"column_start":5,"column_end":13}},{"value":"/ # use chrono::NaiveTime;","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\time.rs","byte_start":190102,"byte_end":190130,"line_start":368,"line_end":368,"column_start":5,"column_end":33}},{"value":"/ assert_eq!(NaiveTime::parse_from_str(\"7:15\", \"%H:%M\"),","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\time.rs","byte_start":190135,"byte_end":190193,"line_start":369,"line_end":369,"column_start":5,"column_end":63}},{"value":"/            Ok(NaiveTime::from_hms(7, 15, 0)));","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\time.rs","byte_start":190198,"byte_end":190248,"line_start":370,"line_end":370,"column_start":5,"column_end":55}},{"value":"/","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\time.rs","byte_start":190253,"byte_end":190256,"line_start":371,"line_end":371,"column_start":5,"column_end":8}},{"value":"/ assert!(NaiveTime::parse_from_str(\"04m33s\", \"%Mm%Ss\").is_err());","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\time.rs","byte_start":190261,"byte_end":190329,"line_start":372,"line_end":372,"column_start":5,"column_end":73}},{"value":"/ assert!(NaiveTime::parse_from_str(\"12\", \"%H\").is_err());","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\time.rs","byte_start":190334,"byte_end":190394,"line_start":373,"line_end":373,"column_start":5,"column_end":65}},{"value":"/ assert!(NaiveTime::parse_from_str(\"17:60\", \"%H:%M\").is_err());","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\time.rs","byte_start":190399,"byte_end":190465,"line_start":374,"line_end":374,"column_start":5,"column_end":71}},{"value":"/ assert!(NaiveTime::parse_from_str(\"24:00:00\", \"%H:%M:%S\").is_err());","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\time.rs","byte_start":190470,"byte_end":190542,"line_start":375,"line_end":375,"column_start":5,"column_end":77}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\time.rs","byte_start":190547,"byte_end":190555,"line_start":376,"line_end":376,"column_start":5,"column_end":13}},{"value":"/","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\time.rs","byte_start":190560,"byte_end":190563,"line_start":377,"line_end":377,"column_start":5,"column_end":8}},{"value":"/ All parsed fields should be consistent to each other, otherwise it's an error.","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\time.rs","byte_start":190568,"byte_end":190650,"line_start":378,"line_end":378,"column_start":5,"column_end":87}},{"value":"/ Here `%H` is for 24-hour clocks, unlike `%I`,","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\time.rs","byte_start":190655,"byte_end":190704,"line_start":379,"line_end":379,"column_start":5,"column_end":54}},{"value":"/ and thus can be independently determined without AM/PM.","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\time.rs","byte_start":190709,"byte_end":190768,"line_start":380,"line_end":380,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\time.rs","byte_start":190773,"byte_end":190776,"line_start":381,"line_end":381,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\time.rs","byte_start":190781,"byte_end":190789,"line_start":382,"line_end":382,"column_start":5,"column_end":13}},{"value":"/ # use chrono::NaiveTime;","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\time.rs","byte_start":190794,"byte_end":190822,"line_start":383,"line_end":383,"column_start":5,"column_end":33}},{"value":"/ assert!(NaiveTime::parse_from_str(\"13:07 AM\", \"%H:%M %p\").is_err());","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\time.rs","byte_start":190827,"byte_end":190899,"line_start":384,"line_end":384,"column_start":5,"column_end":77}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\time.rs","byte_start":190904,"byte_end":190912,"line_start":385,"line_end":385,"column_start":5,"column_end":13}}]},{"kind":"Method","id":{"krate":0,"index":410},"span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\time.rs","byte_start":191834,"byte_end":191851,"line_start":410,"line_end":410,"column_start":12,"column_end":29},"name":"format_with_items","qualname":"<NaiveTime>::format_with_items","value":"fn <'a, I> (&self, items: I) -> DelayedFormat<I>","parent":null,"children":[],"decl_id":null,"docs":" Formats the time with the specified formatting items.\n Otherwise it is same to the ordinary [`format`](#method.format) method.","sig":null,"attributes":[{"value":"/ Formats the time with the specified formatting items.","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\time.rs","byte_start":191131,"byte_end":191188,"line_start":392,"line_end":392,"column_start":5,"column_end":62}},{"value":"/ Otherwise it is same to the ordinary [`format`](#method.format) method.","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\time.rs","byte_start":191193,"byte_end":191268,"line_start":393,"line_end":393,"column_start":5,"column_end":80}},{"value":"/","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\time.rs","byte_start":191273,"byte_end":191276,"line_start":394,"line_end":394,"column_start":5,"column_end":8}},{"value":"/ The `Iterator` of items should be `Clone`able,","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\time.rs","byte_start":191281,"byte_end":191331,"line_start":395,"line_end":395,"column_start":5,"column_end":55}},{"value":"/ since the resulting `DelayedFormat` value may be formatted multiple times.","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\time.rs","byte_start":191336,"byte_end":191414,"line_start":396,"line_end":396,"column_start":5,"column_end":83}},{"value":"/","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\time.rs","byte_start":191419,"byte_end":191422,"line_start":397,"line_end":397,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\time.rs","byte_start":191427,"byte_end":191440,"line_start":398,"line_end":398,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\time.rs","byte_start":191445,"byte_end":191448,"line_start":399,"line_end":399,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\time.rs","byte_start":191453,"byte_end":191461,"line_start":400,"line_end":400,"column_start":5,"column_end":13}},{"value":"/ use chrono::NaiveTime;","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\time.rs","byte_start":191466,"byte_end":191492,"line_start":401,"line_end":401,"column_start":5,"column_end":31}},{"value":"/ use chrono::format::strftime::StrftimeItems;","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\time.rs","byte_start":191497,"byte_end":191545,"line_start":402,"line_end":402,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\time.rs","byte_start":191550,"byte_end":191553,"line_start":403,"line_end":403,"column_start":5,"column_end":8}},{"value":"/ let fmt = StrftimeItems::new(\"%H:%M:%S\");","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\time.rs","byte_start":191558,"byte_end":191603,"line_start":404,"line_end":404,"column_start":5,"column_end":50}},{"value":"/ let t = NaiveTime::from_hms(23, 56, 4);","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\time.rs","byte_start":191608,"byte_end":191651,"line_start":405,"line_end":405,"column_start":5,"column_end":48}},{"value":"/ assert_eq!(t.format_with_items(fmt.clone()).to_string(), \"23:56:04\");","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\time.rs","byte_start":191656,"byte_end":191729,"line_start":406,"line_end":406,"column_start":5,"column_end":78}},{"value":"/ assert_eq!(t.format(\"%H:%M:%S\").to_string(), \"23:56:04\");","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\time.rs","byte_start":191734,"byte_end":191795,"line_start":407,"line_end":407,"column_start":5,"column_end":66}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\time.rs","byte_start":191800,"byte_end":191808,"line_start":408,"line_end":408,"column_start":5,"column_end":13}},{"value":"inline","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\time.rs","byte_start":191813,"byte_end":191822,"line_start":409,"line_end":409,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":413},"span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\time.rs","byte_start":193142,"byte_end":193148,"line_start":440,"line_end":440,"column_start":12,"column_end":18},"name":"format","qualname":"<NaiveTime>::format","value":"fn <'a> (&self, fmt: &'a str) -> DelayedFormat<StrftimeItems<'a>>","parent":null,"children":[],"decl_id":null,"docs":" Formats the time with the specified format string.\n See the [`format::strftime` module](../../format/strftime/index.html)\n on the supported escape sequences.","sig":null,"attributes":[{"value":"/ Formats the time with the specified format string.","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\time.rs","byte_start":192022,"byte_end":192076,"line_start":415,"line_end":415,"column_start":5,"column_end":59}},{"value":"/ See the [`format::strftime` module](../../format/strftime/index.html)","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\time.rs","byte_start":192081,"byte_end":192154,"line_start":416,"line_end":416,"column_start":5,"column_end":78}},{"value":"/ on the supported escape sequences.","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\time.rs","byte_start":192159,"byte_end":192197,"line_start":417,"line_end":417,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\time.rs","byte_start":192202,"byte_end":192205,"line_start":418,"line_end":418,"column_start":5,"column_end":8}},{"value":"/ This returns a `DelayedFormat`,","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\time.rs","byte_start":192210,"byte_end":192245,"line_start":419,"line_end":419,"column_start":5,"column_end":40}},{"value":"/ which gets converted to a string only when actual formatting happens.","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\time.rs","byte_start":192250,"byte_end":192323,"line_start":420,"line_end":420,"column_start":5,"column_end":78}},{"value":"/ You may use the `to_string` method to get a `String`,","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\time.rs","byte_start":192328,"byte_end":192385,"line_start":421,"line_end":421,"column_start":5,"column_end":62}},{"value":"/ or just feed it into `print!` and other formatting macros.","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\time.rs","byte_start":192390,"byte_end":192452,"line_start":422,"line_end":422,"column_start":5,"column_end":67}},{"value":"/ (In this way it avoids the redundant memory allocation.)","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\time.rs","byte_start":192457,"byte_end":192517,"line_start":423,"line_end":423,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\time.rs","byte_start":192522,"byte_end":192525,"line_start":424,"line_end":424,"column_start":5,"column_end":8}},{"value":"/ A wrong format string does *not* issue an error immediately.","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\time.rs","byte_start":192530,"byte_end":192594,"line_start":425,"line_end":425,"column_start":5,"column_end":69}},{"value":"/ Rather, converting or formatting the `DelayedFormat` fails.","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\time.rs","byte_start":192599,"byte_end":192662,"line_start":426,"line_end":426,"column_start":5,"column_end":68}},{"value":"/ You are recommended to immediately use `DelayedFormat` for this reason.","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\time.rs","byte_start":192667,"byte_end":192742,"line_start":427,"line_end":427,"column_start":5,"column_end":80}},{"value":"/","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\time.rs","byte_start":192747,"byte_end":192750,"line_start":428,"line_end":428,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\time.rs","byte_start":192755,"byte_end":192768,"line_start":429,"line_end":429,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\time.rs","byte_start":192773,"byte_end":192776,"line_start":430,"line_end":430,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\time.rs","byte_start":192781,"byte_end":192789,"line_start":431,"line_end":431,"column_start":5,"column_end":13}},{"value":"/ use chrono::NaiveTime;","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\time.rs","byte_start":192794,"byte_end":192820,"line_start":432,"line_end":432,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\time.rs","byte_start":192825,"byte_end":192828,"line_start":433,"line_end":433,"column_start":5,"column_end":8}},{"value":"/ let t = NaiveTime::from_hms_nano(23, 56, 4, 12_345_678);","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\time.rs","byte_start":192833,"byte_end":192893,"line_start":434,"line_end":434,"column_start":5,"column_end":65}},{"value":"/ assert_eq!(t.format(\"%H:%M:%S\").to_string(), \"23:56:04\");","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\time.rs","byte_start":192898,"byte_end":192959,"line_start":435,"line_end":435,"column_start":5,"column_end":66}},{"value":"/ assert_eq!(t.format(\"%H:%M:%S%.6f\").to_string(), \"23:56:04.012345\");","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\time.rs","byte_start":192964,"byte_end":193036,"line_start":436,"line_end":436,"column_start":5,"column_end":77}},{"value":"/ assert_eq!(t.format(\"%-I:%M %p\").to_string(), \"11:56 PM\");","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\time.rs","byte_start":193041,"byte_end":193103,"line_start":437,"line_end":437,"column_start":5,"column_end":67}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\time.rs","byte_start":193108,"byte_end":193116,"line_start":438,"line_end":438,"column_start":5,"column_end":13}},{"value":"inline","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\time.rs","byte_start":193121,"byte_end":193130,"line_start":439,"line_end":439,"column_start":5,"column_end":14}}]},{"kind":"Mod","id":{"krate":0,"index":446},"span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\datetime.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"datetime","qualname":"::naive::datetime","value":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\datetime.rs","parent":null,"children":[{"krate":0,"index":447},{"krate":0,"index":451},{"krate":0,"index":454},{"krate":0,"index":455},{"krate":0,"index":459},{"krate":0,"index":460},{"krate":0,"index":461},{"krate":0,"index":462},{"krate":0,"index":463},{"krate":0,"index":468},{"krate":0,"index":1276},{"krate":0,"index":1297},{"krate":0,"index":1298},{"krate":0,"index":1294},{"krate":0,"index":1295},{"krate":0,"index":1284},{"krate":0,"index":1282},{"krate":0,"index":1281},{"krate":0,"index":1279},{"krate":0,"index":475},{"krate":0,"index":498},{"krate":0,"index":522},{"krate":0,"index":535},{"krate":0,"index":538},{"krate":0,"index":541},{"krate":0,"index":544},{"krate":0,"index":547},{"krate":0,"index":549},{"krate":0,"index":551}],"decl_id":null,"docs":" ISO 8601 date and time without timezone.\n","sig":null,"attributes":[{"value":"! ISO 8601 date and time without timezone.","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\datetime.rs","byte_start":223052,"byte_end":223096,"line_start":5,"line_end":5,"column_start":1,"column_end":45}}]},{"kind":"Struct","id":{"krate":0,"index":1276},"span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\datetime.rs","byte_start":223567,"byte_end":223580,"line_start":21,"line_end":21,"column_start":12,"column_end":25},"name":"NaiveDateTime","qualname":"::naive::datetime::NaiveDateTime","value":"NaiveDateTime {  }","parent":null,"children":[{"krate":0,"index":1277},{"krate":0,"index":1278}],"decl_id":null,"docs":" ISO 8601 combined date and time without timezone.\n","sig":null,"attributes":[{"value":"/ ISO 8601 combined date and time without timezone.","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\datetime.rs","byte_start":223447,"byte_end":223500,"line_start":19,"line_end":19,"column_start":1,"column_end":54}}]},{"kind":"Method","id":{"krate":0,"index":476},"span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\datetime.rs","byte_start":223836,"byte_end":223839,"line_start":30,"line_end":30,"column_start":12,"column_end":15},"name":"new","qualname":"<NaiveDateTime>::new","value":"fn (date: NaiveDate, time: NaiveTime) -> NaiveDateTime","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `NaiveDateTime` from date and time components.\n Equivalent to `date.and_time(time)` and many other helper constructors on `NaiveDate`.\n","sig":null,"attributes":[{"value":"/ Makes a new `NaiveDateTime` from date and time components.","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\datetime.rs","byte_start":223653,"byte_end":223715,"line_start":27,"line_end":27,"column_start":5,"column_end":67}},{"value":"/ Equivalent to `date.and_time(time)` and many other helper constructors on `NaiveDate`.","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\datetime.rs","byte_start":223720,"byte_end":223810,"line_start":28,"line_end":28,"column_start":5,"column_end":95}},{"value":"inline","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\datetime.rs","byte_start":223815,"byte_end":223824,"line_start":29,"line_end":29,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":477},"span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\datetime.rs","byte_start":224283,"byte_end":224297,"line_start":40,"line_end":40,"column_start":12,"column_end":26},"name":"from_timestamp","qualname":"<NaiveDateTime>::from_timestamp","value":"fn (secs: i64, nsecs: u32) -> NaiveDateTime","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `NaiveDateTime` from the number of non-leap seconds\n since the midnight UTC on January 1, 1970 (aka \"UNIX timestamp\")\n and the number of nanoseconds since the last whole non-leap second.","sig":null,"attributes":[{"value":"/ Makes a new `NaiveDateTime` from the number of non-leap seconds","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\datetime.rs","byte_start":223953,"byte_end":224020,"line_start":34,"line_end":34,"column_start":5,"column_end":72}},{"value":"/ since the midnight UTC on January 1, 1970 (aka \"UNIX timestamp\")","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\datetime.rs","byte_start":224025,"byte_end":224093,"line_start":35,"line_end":35,"column_start":5,"column_end":73}},{"value":"/ and the number of nanoseconds since the last whole non-leap second.","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\datetime.rs","byte_start":224098,"byte_end":224169,"line_start":36,"line_end":36,"column_start":5,"column_end":76}},{"value":"/","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\datetime.rs","byte_start":224174,"byte_end":224177,"line_start":37,"line_end":37,"column_start":5,"column_end":8}},{"value":"/ Panics on the out-of-range number of seconds and/or invalid nanosecond.","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\datetime.rs","byte_start":224182,"byte_end":224257,"line_start":38,"line_end":38,"column_start":5,"column_end":80}},{"value":"inline","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\datetime.rs","byte_start":224262,"byte_end":224271,"line_start":39,"line_end":39,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":478},"span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\datetime.rs","byte_start":224820,"byte_end":224838,"line_start":51,"line_end":51,"column_start":12,"column_end":30},"name":"from_timestamp_opt","qualname":"<NaiveDateTime>::from_timestamp_opt","value":"fn (secs: i64, nsecs: u32) -> Option<NaiveDateTime>","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `NaiveDateTime` from the number of non-leap seconds\n since the midnight UTC on January 1, 1970 (aka \"UNIX timestamp\")\n and the number of nanoseconds since the last whole non-leap second.","sig":null,"attributes":[{"value":"/ Makes a new `NaiveDateTime` from the number of non-leap seconds","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\datetime.rs","byte_start":224482,"byte_end":224549,"line_start":45,"line_end":45,"column_start":5,"column_end":72}},{"value":"/ since the midnight UTC on January 1, 1970 (aka \"UNIX timestamp\")","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\datetime.rs","byte_start":224554,"byte_end":224622,"line_start":46,"line_end":46,"column_start":5,"column_end":73}},{"value":"/ and the number of nanoseconds since the last whole non-leap second.","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\datetime.rs","byte_start":224627,"byte_end":224698,"line_start":47,"line_end":47,"column_start":5,"column_end":76}},{"value":"/","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\datetime.rs","byte_start":224703,"byte_end":224706,"line_start":48,"line_end":48,"column_start":5,"column_end":8}},{"value":"/ Returns `None` on the out-of-range number of seconds and/or invalid nanosecond.","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\datetime.rs","byte_start":224711,"byte_end":224794,"line_start":49,"line_end":49,"column_start":5,"column_end":88}},{"value":"inline","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\datetime.rs","byte_start":224799,"byte_end":224808,"line_start":50,"line_end":50,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":481},"span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\datetime.rs","byte_start":225481,"byte_end":225513,"line_start":64,"line_end":64,"column_start":12,"column_end":44},"name":"from_num_seconds_from_unix_epoch","qualname":"<NaiveDateTime>::from_num_seconds_from_unix_epoch","value":"fn (secs: i64, nsecs: u32) -> NaiveDateTime","parent":null,"children":[],"decl_id":null,"docs":" *Deprecated:* Same to [`NaiveDateTime::from_timestamp`](#method.from_timestamp).\n","sig":null,"attributes":[{"value":"/ *Deprecated:* Same to [`NaiveDateTime::from_timestamp`](#method.from_timestamp).","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\datetime.rs","byte_start":225371,"byte_end":225455,"line_start":62,"line_end":62,"column_start":5,"column_end":89}},{"value":"inline","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\datetime.rs","byte_start":225460,"byte_end":225469,"line_start":63,"line_end":63,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":482},"span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\datetime.rs","byte_start":225736,"byte_end":225772,"line_start":70,"line_end":70,"column_start":12,"column_end":48},"name":"from_num_seconds_from_unix_epoch_opt","qualname":"<NaiveDateTime>::from_num_seconds_from_unix_epoch_opt","value":"fn (secs: i64, nsecs: u32) -> Option<NaiveDateTime>","parent":null,"children":[],"decl_id":null,"docs":" *Deprecated:* Same to [`NaiveDateTime::from_timestamp_opt`](#method.from_timestamp_opt).\n","sig":null,"attributes":[{"value":"/ *Deprecated:* Same to [`NaiveDateTime::from_timestamp_opt`](#method.from_timestamp_opt).","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\datetime.rs","byte_start":225618,"byte_end":225710,"line_start":68,"line_end":68,"column_start":5,"column_end":97}},{"value":"inline","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\datetime.rs","byte_start":225715,"byte_end":225724,"line_start":69,"line_end":69,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":483},"span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\datetime.rs","byte_start":226109,"byte_end":226123,"line_start":77,"line_end":77,"column_start":12,"column_end":26},"name":"parse_from_str","qualname":"<NaiveDateTime>::parse_from_str","value":"fn (s: &str, fmt: &str) -> ParseResult<NaiveDateTime>","parent":null,"children":[],"decl_id":null,"docs":" Parses a string with the specified format string and returns a new `NaiveDateTime`.\n See the [`format::strftime` module](../../format/strftime/index.html)\n on the supported escape sequences.\n","sig":null,"attributes":[{"value":"/ Parses a string with the specified format string and returns a new `NaiveDateTime`.","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\datetime.rs","byte_start":225889,"byte_end":225976,"line_start":74,"line_end":74,"column_start":5,"column_end":92}},{"value":"/ See the [`format::strftime` module](../../format/strftime/index.html)","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\datetime.rs","byte_start":225981,"byte_end":226054,"line_start":75,"line_end":75,"column_start":5,"column_end":78}},{"value":"/ on the supported escape sequences.","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\datetime.rs","byte_start":226059,"byte_end":226097,"line_start":76,"line_end":76,"column_start":5,"column_end":43}}]},{"kind":"Method","id":{"krate":0,"index":484},"span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\datetime.rs","byte_start":226418,"byte_end":226422,"line_start":85,"line_end":85,"column_start":12,"column_end":16},"name":"date","qualname":"<NaiveDateTime>::date","value":"fn (&self) -> NaiveDate","parent":null,"children":[],"decl_id":null,"docs":" Retrieves a date component.\n","sig":null,"attributes":[{"value":"/ Retrieves a date component.","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\datetime.rs","byte_start":226361,"byte_end":226392,"line_start":83,"line_end":83,"column_start":5,"column_end":36}},{"value":"inline","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\datetime.rs","byte_start":226397,"byte_end":226406,"line_start":84,"line_end":84,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":485},"span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\datetime.rs","byte_start":226531,"byte_end":226535,"line_start":91,"line_end":91,"column_start":12,"column_end":16},"name":"time","qualname":"<NaiveDateTime>::time","value":"fn (&self) -> NaiveTime","parent":null,"children":[],"decl_id":null,"docs":" Retrieves a time component.\n","sig":null,"attributes":[{"value":"/ Retrieves a time component.","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\datetime.rs","byte_start":226474,"byte_end":226505,"line_start":89,"line_end":89,"column_start":5,"column_end":36}},{"value":"inline","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\datetime.rs","byte_start":226510,"byte_end":226519,"line_start":90,"line_end":90,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":486},"span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\datetime.rs","byte_start":226855,"byte_end":226864,"line_start":100,"line_end":100,"column_start":12,"column_end":21},"name":"timestamp","qualname":"<NaiveDateTime>::timestamp","value":"fn (&self) -> i64","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of non-leap seconds since the midnight on January 1, 1970.","sig":null,"attributes":[{"value":"/ Returns the number of non-leap seconds since the midnight on January 1, 1970.","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\datetime.rs","byte_start":226587,"byte_end":226668,"line_start":95,"line_end":95,"column_start":5,"column_end":86}},{"value":"/","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\datetime.rs","byte_start":226673,"byte_end":226676,"line_start":96,"line_end":96,"column_start":5,"column_end":8}},{"value":"/ Note that this does *not* account for the timezone!","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\datetime.rs","byte_start":226681,"byte_end":226736,"line_start":97,"line_end":97,"column_start":5,"column_end":60}},{"value":"/ The true \"UNIX timestamp\" would count seconds since the midnight *UTC* on the epoch.","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\datetime.rs","byte_start":226741,"byte_end":226829,"line_start":98,"line_end":98,"column_start":5,"column_end":93}},{"value":"inline","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\datetime.rs","byte_start":226834,"byte_end":226843,"line_start":99,"line_end":99,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":487},"span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\datetime.rs","byte_start":227301,"byte_end":227324,"line_start":111,"line_end":111,"column_start":12,"column_end":35},"name":"timestamp_subsec_millis","qualname":"<NaiveDateTime>::timestamp_subsec_millis","value":"fn (&self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of milliseconds since the last whole non-leap second.","sig":null,"attributes":[{"value":"/ Returns the number of milliseconds since the last whole non-leap second.","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\datetime.rs","byte_start":227062,"byte_end":227138,"line_start":106,"line_end":106,"column_start":5,"column_end":81}},{"value":"/","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\datetime.rs","byte_start":227143,"byte_end":227146,"line_start":107,"line_end":107,"column_start":5,"column_end":8}},{"value":"/ The return value ranges from 0 to 999,","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\datetime.rs","byte_start":227151,"byte_end":227193,"line_start":108,"line_end":108,"column_start":5,"column_end":47}},{"value":"/ or for [leap seconds](../time/index.html#leap-second-handling), to 1,999.","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\datetime.rs","byte_start":227198,"byte_end":227275,"line_start":109,"line_end":109,"column_start":5,"column_end":82}},{"value":"inline","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\datetime.rs","byte_start":227280,"byte_end":227289,"line_start":110,"line_end":110,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":488},"span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\datetime.rs","byte_start":227649,"byte_end":227672,"line_start":120,"line_end":120,"column_start":12,"column_end":35},"name":"timestamp_subsec_micros","qualname":"<NaiveDateTime>::timestamp_subsec_micros","value":"fn (&self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of microseconds since the last whole non-leap second.","sig":null,"attributes":[{"value":"/ Returns the number of microseconds since the last whole non-leap second.","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\datetime.rs","byte_start":227402,"byte_end":227478,"line_start":115,"line_end":115,"column_start":5,"column_end":81}},{"value":"/","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\datetime.rs","byte_start":227483,"byte_end":227486,"line_start":116,"line_end":116,"column_start":5,"column_end":8}},{"value":"/ The return value ranges from 0 to 999,999,","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\datetime.rs","byte_start":227491,"byte_end":227537,"line_start":117,"line_end":117,"column_start":5,"column_end":51}},{"value":"/ or for [leap seconds](../time/index.html#leap-second-handling), to 1,999,999.","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\datetime.rs","byte_start":227542,"byte_end":227623,"line_start":118,"line_end":118,"column_start":5,"column_end":86}},{"value":"inline","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\datetime.rs","byte_start":227628,"byte_end":227637,"line_start":119,"line_end":119,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":489},"span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\datetime.rs","byte_start":228000,"byte_end":228022,"line_start":129,"line_end":129,"column_start":12,"column_end":34},"name":"timestamp_subsec_nanos","qualname":"<NaiveDateTime>::timestamp_subsec_nanos","value":"fn (&self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of nanoseconds since the last whole non-leap second.","sig":null,"attributes":[{"value":"/ Returns the number of nanoseconds since the last whole non-leap second.","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\datetime.rs","byte_start":227746,"byte_end":227821,"line_start":124,"line_end":124,"column_start":5,"column_end":80}},{"value":"/","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\datetime.rs","byte_start":227826,"byte_end":227829,"line_start":125,"line_end":125,"column_start":5,"column_end":8}},{"value":"/ The return value ranges from 0 to 999,999,999,","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\datetime.rs","byte_start":227834,"byte_end":227884,"line_start":126,"line_end":126,"column_start":5,"column_end":55}},{"value":"/ or for [leap seconds](../time/index.html#leap-second-handling), to 1,999,999,999.","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\datetime.rs","byte_start":227889,"byte_end":227974,"line_start":127,"line_end":127,"column_start":5,"column_end":90}},{"value":"inline","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\datetime.rs","byte_start":227979,"byte_end":227988,"line_start":128,"line_end":128,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":490},"span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\datetime.rs","byte_start":228181,"byte_end":228208,"line_start":135,"line_end":135,"column_start":12,"column_end":39},"name":"num_seconds_from_unix_epoch","qualname":"<NaiveDateTime>::num_seconds_from_unix_epoch","value":"fn (&self) -> i64","parent":null,"children":[],"decl_id":null,"docs":" *Deprecated:* Same to [`NaiveDateTime::timestamp`](#method.timestamp).\n","sig":null,"attributes":[{"value":"/ *Deprecated:* Same to [`NaiveDateTime::timestamp`](#method.timestamp).","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\datetime.rs","byte_start":228081,"byte_end":228155,"line_start":133,"line_end":133,"column_start":5,"column_end":79}},{"value":"inline","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\datetime.rs","byte_start":228160,"byte_end":228169,"line_start":134,"line_end":134,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":491},"span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\datetime.rs","byte_start":228392,"byte_end":228403,"line_start":142,"line_end":142,"column_start":12,"column_end":23},"name":"checked_add","qualname":"<NaiveDateTime>::checked_add","value":"fn (self, rhs: Duration) -> Option<NaiveDateTime>","parent":null,"children":[],"decl_id":null,"docs":" Adds given `Duration` to the current date and time.","sig":null,"attributes":[{"value":"/ Adds given `Duration` to the current date and time.","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\datetime.rs","byte_start":228261,"byte_end":228316,"line_start":139,"line_end":139,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\datetime.rs","byte_start":228321,"byte_end":228324,"line_start":140,"line_end":140,"column_start":5,"column_end":8}},{"value":"/ Returns `None` when it will result in overflow.","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\datetime.rs","byte_start":228329,"byte_end":228380,"line_start":141,"line_end":141,"column_start":5,"column_end":56}}]},{"kind":"Method","id":{"krate":0,"index":492},"span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\datetime.rs","byte_start":229443,"byte_end":229454,"line_start":164,"line_end":164,"column_start":12,"column_end":23},"name":"checked_sub","qualname":"<NaiveDateTime>::checked_sub","value":"fn (self, rhs: Duration) -> Option<NaiveDateTime>","parent":null,"children":[],"decl_id":null,"docs":" Subtracts given `Duration` from the current date and time.","sig":null,"attributes":[{"value":"/ Subtracts given `Duration` from the current date and time.","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\datetime.rs","byte_start":229305,"byte_end":229367,"line_start":161,"line_end":161,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\datetime.rs","byte_start":229372,"byte_end":229375,"line_start":162,"line_end":162,"column_start":5,"column_end":8}},{"value":"/ Returns `None` when it will result in overflow.","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\datetime.rs","byte_start":229380,"byte_end":229431,"line_start":163,"line_end":163,"column_start":5,"column_end":56}}]},{"kind":"Method","id":{"krate":0,"index":493},"span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\datetime.rs","byte_start":230457,"byte_end":230474,"line_start":185,"line_end":185,"column_start":12,"column_end":29},"name":"format_with_items","qualname":"<NaiveDateTime>::format_with_items","value":"fn <'a, I> (&self, items: I) -> DelayedFormat<I>","parent":null,"children":[],"decl_id":null,"docs":" Formats the combined date and time with the specified formatting items.\n","sig":null,"attributes":[{"value":"/ Formats the combined date and time with the specified formatting items.","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\datetime.rs","byte_start":230356,"byte_end":230431,"line_start":183,"line_end":183,"column_start":5,"column_end":80}},{"value":"inline","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\datetime.rs","byte_start":230436,"byte_end":230445,"line_start":184,"line_end":184,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":496},"span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\datetime.rs","byte_start":230888,"byte_end":230894,"line_start":194,"line_end":194,"column_start":12,"column_end":18},"name":"format","qualname":"<NaiveDateTime>::format","value":"fn <'a> (&self, fmt: &'a str) -> DelayedFormat<StrftimeItems<'a>>","parent":null,"children":[],"decl_id":null,"docs":" Formats the combined date and time with the specified format string.\n See the [`format::strftime` module](../../format/strftime/index.html)\n on the supported escape sequences.\n","sig":null,"attributes":[{"value":"/ Formats the combined date and time with the specified format string.","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\datetime.rs","byte_start":230669,"byte_end":230741,"line_start":190,"line_end":190,"column_start":5,"column_end":77}},{"value":"/ See the [`format::strftime` module](../../format/strftime/index.html)","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\datetime.rs","byte_start":230746,"byte_end":230819,"line_start":191,"line_end":191,"column_start":5,"column_end":78}},{"value":"/ on the supported escape sequences.","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\datetime.rs","byte_start":230824,"byte_end":230862,"line_start":192,"line_end":192,"column_start":5,"column_end":43}},{"value":"inline","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\datetime.rs","byte_start":230867,"byte_end":230876,"line_start":193,"line_end":193,"column_start":5,"column_end":14}}]},{"kind":"Mod","id":{"krate":0,"index":555},"span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\date.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"date","qualname":"::date","value":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\date.rs","parent":null,"children":[{"krate":0,"index":556},{"krate":0,"index":559},{"krate":0,"index":560},{"krate":0,"index":563},{"krate":0,"index":566},{"krate":0,"index":567},{"krate":0,"index":570},{"krate":0,"index":571},{"krate":0,"index":572},{"krate":0,"index":573},{"krate":0,"index":574},{"krate":0,"index":575},{"krate":0,"index":1301},{"krate":0,"index":1305},{"krate":0,"index":579},{"krate":0,"index":580},{"krate":0,"index":581},{"krate":0,"index":612},{"krate":0,"index":616},{"krate":0,"index":623},{"krate":0,"index":648},{"krate":0,"index":650},{"krate":0,"index":652},{"krate":0,"index":656},{"krate":0,"index":658},{"krate":0,"index":661},{"krate":0,"index":664},{"krate":0,"index":668},{"krate":0,"index":672},{"krate":0,"index":677},{"krate":0,"index":681},{"krate":0,"index":684}],"decl_id":null,"docs":" ISO 8601 calendar date with time zone.\n","sig":null,"attributes":[{"value":"!\n * ISO 8601 calendar date with time zone.\n */","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\date.rs","byte_start":268515,"byte_end":268564,"line_start":5,"line_end":7,"column_start":1,"column_end":4}}]},{"kind":"Struct","id":{"krate":0,"index":1301},"span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\date.rs","byte_start":270170,"byte_end":270174,"line_start":47,"line_end":47,"column_start":12,"column_end":16},"name":"Date","qualname":"::date::Date","value":"Date {  }","parent":null,"children":[{"krate":0,"index":1303},{"krate":0,"index":1304}],"decl_id":null,"docs":" ISO 8601 calendar date with time zone.","sig":null,"attributes":[{"value":"/ ISO 8601 calendar date with time zone.","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\date.rs","byte_start":268884,"byte_end":268926,"line_start":23,"line_end":23,"column_start":1,"column_end":43}},{"value":"/","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\date.rs","byte_start":268927,"byte_end":268930,"line_start":24,"line_end":24,"column_start":1,"column_end":4}},{"value":"/ This type should be considered ambiguous at best,","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\date.rs","byte_start":268931,"byte_end":268984,"line_start":25,"line_end":25,"column_start":1,"column_end":54}},{"value":"/ due to the inherent lack of precision required for the time zone resolution.","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\date.rs","byte_start":268985,"byte_end":269065,"line_start":26,"line_end":26,"column_start":1,"column_end":81}},{"value":"/ There are some guarantees on the usage of `Date<Tz>`:","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\date.rs","byte_start":269066,"byte_end":269123,"line_start":27,"line_end":27,"column_start":1,"column_end":58}},{"value":"/","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\date.rs","byte_start":269124,"byte_end":269127,"line_start":28,"line_end":28,"column_start":1,"column_end":4}},{"value":"/ - If properly constructed via `TimeZone::ymd` and others without an error,","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\date.rs","byte_start":269128,"byte_end":269206,"line_start":29,"line_end":29,"column_start":1,"column_end":79}},{"value":"/   the corresponding local date should exist for at least a moment.","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\date.rs","byte_start":269207,"byte_end":269277,"line_start":30,"line_end":30,"column_start":1,"column_end":71}},{"value":"/   (It may still have a gap from the offset changes.)","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\date.rs","byte_start":269278,"byte_end":269334,"line_start":31,"line_end":31,"column_start":1,"column_end":57}},{"value":"/","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\date.rs","byte_start":269335,"byte_end":269338,"line_start":32,"line_end":32,"column_start":1,"column_end":4}},{"value":"/ - The `TimeZone` is free to assign *any* `Offset` to the local date,","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\date.rs","byte_start":269339,"byte_end":269411,"line_start":33,"line_end":33,"column_start":1,"column_end":73}},{"value":"/   as long as that offset did occur in given day.","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\date.rs","byte_start":269412,"byte_end":269464,"line_start":34,"line_end":34,"column_start":1,"column_end":53}},{"value":"/   For example, if `2015-03-08T01:59-08:00` is followed by `2015-03-08T03:00-07:00`,","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\date.rs","byte_start":269465,"byte_end":269552,"line_start":35,"line_end":35,"column_start":1,"column_end":88}},{"value":"/   it may produce either `2015-03-08-08:00` or `2015-03-08-07:00`","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\date.rs","byte_start":269553,"byte_end":269621,"line_start":36,"line_end":36,"column_start":1,"column_end":69}},{"value":"/   but *not* `2015-03-08+00:00` and others.","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\date.rs","byte_start":269622,"byte_end":269668,"line_start":37,"line_end":37,"column_start":1,"column_end":47}},{"value":"/","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\date.rs","byte_start":269669,"byte_end":269672,"line_start":38,"line_end":38,"column_start":1,"column_end":4}},{"value":"/ - Once constructed as a full `DateTime`,","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\date.rs","byte_start":269673,"byte_end":269717,"line_start":39,"line_end":39,"column_start":1,"column_end":45}},{"value":"/   `DateTime::date` and other associated methods should return those for the original `Date`.","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\date.rs","byte_start":269718,"byte_end":269814,"line_start":40,"line_end":40,"column_start":1,"column_end":97}},{"value":"/   For example, if `dt = tz.ymd(y,m,d).hms(h,n,s)` were valid, `dt.date() == tz.ymd(y,m,d)`.","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\date.rs","byte_start":269815,"byte_end":269910,"line_start":41,"line_end":41,"column_start":1,"column_end":96}},{"value":"/","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\date.rs","byte_start":269911,"byte_end":269914,"line_start":42,"line_end":42,"column_start":1,"column_end":4}},{"value":"/ - The date is timezone-agnostic up to one day (i.e. practically always),","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\date.rs","byte_start":269915,"byte_end":269991,"line_start":43,"line_end":43,"column_start":1,"column_end":77}},{"value":"/   so the local date and UTC date should be equal for most cases","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\date.rs","byte_start":269992,"byte_end":270059,"line_start":44,"line_end":44,"column_start":1,"column_end":68}},{"value":"/   even though the raw calculation between `NaiveDate` and `Duration` may not.","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\date.rs","byte_start":270060,"byte_end":270141,"line_start":45,"line_end":45,"column_start":1,"column_end":82}}]},{"kind":"Const","id":{"krate":0,"index":579},"span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\date.rs","byte_start":270282,"byte_end":270285,"line_start":53,"line_end":53,"column_start":11,"column_end":14},"name":"MIN","qualname":"::date::MIN","value":"Date<UTC>","parent":null,"children":[],"decl_id":null,"docs":" The minimum possible `Date`.\n","sig":null,"attributes":[{"value":"/ The minimum possible `Date`.","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\date.rs","byte_start":270239,"byte_end":270271,"line_start":52,"line_end":52,"column_start":1,"column_end":33}}]},{"kind":"Const","id":{"krate":0,"index":580},"span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\date.rs","byte_start":270388,"byte_end":270391,"line_start":55,"line_end":55,"column_start":11,"column_end":14},"name":"MAX","qualname":"::date::MAX","value":"Date<UTC>","parent":null,"children":[],"decl_id":null,"docs":" The maximum possible `Date`.\n","sig":null,"attributes":[{"value":"/ The maximum possible `Date`.","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\date.rs","byte_start":270345,"byte_end":270377,"line_start":54,"line_end":54,"column_start":1,"column_end":33}}]},{"kind":"Method","id":{"krate":0,"index":583},"span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\date.rs","byte_start":270741,"byte_end":270749,"line_start":63,"line_end":63,"column_start":12,"column_end":20},"name":"from_utc","qualname":"<Date<Tz>>::from_utc","value":"fn (date: NaiveDate, offset: Tz::Offset) -> Date<Tz>","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `Date` with given *UTC* date and offset.\n The local date should be constructed via the `TimeZone` trait.\n","sig":null,"attributes":[{"value":"/ Makes a new `Date` with given *UTC* date and offset.","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\date.rs","byte_start":270486,"byte_end":270542,"line_start":58,"line_end":58,"column_start":5,"column_end":61}},{"value":"/ The local date should be constructed via the `TimeZone` trait.","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\date.rs","byte_start":270547,"byte_end":270613,"line_start":59,"line_end":59,"column_start":5,"column_end":71}},{"value":"inline","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\date.rs","byte_start":270720,"byte_end":270729,"line_start":62,"line_end":62,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":584},"span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\date.rs","byte_start":271050,"byte_end":271058,"line_start":72,"line_end":72,"column_start":12,"column_end":20},"name":"and_time","qualname":"<Date<Tz>>::and_time","value":"fn (&self, time: NaiveTime) -> Option<DateTime<Tz>>","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `DateTime` from the current date and given `NaiveTime`.\n The offset in the current date is preserved.","sig":null,"attributes":[{"value":"/ Makes a new `DateTime` from the current date and given `NaiveTime`.","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\date.rs","byte_start":270856,"byte_end":270927,"line_start":67,"line_end":67,"column_start":5,"column_end":76}},{"value":"/ The offset in the current date is preserved.","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\date.rs","byte_start":270932,"byte_end":270980,"line_start":68,"line_end":68,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\date.rs","byte_start":270985,"byte_end":270988,"line_start":69,"line_end":69,"column_start":5,"column_end":8}},{"value":"/ Panics on invalid datetime.","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\date.rs","byte_start":270993,"byte_end":271024,"line_start":70,"line_end":70,"column_start":5,"column_end":36}},{"value":"inline","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\date.rs","byte_start":271029,"byte_end":271038,"line_start":71,"line_end":71,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":585},"span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\date.rs","byte_start":271455,"byte_end":271462,"line_start":82,"line_end":82,"column_start":12,"column_end":19},"name":"and_hms","qualname":"<Date<Tz>>::and_hms","value":"fn (&self, hour: u32, min: u32, sec: u32) -> DateTime<Tz>","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `DateTime` from the current date, hour, minute and second.\n The offset in the current date is preserved.","sig":null,"attributes":[{"value":"/ Makes a new `DateTime` from the current date, hour, minute and second.","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\date.rs","byte_start":271240,"byte_end":271314,"line_start":77,"line_end":77,"column_start":5,"column_end":79}},{"value":"/ The offset in the current date is preserved.","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\date.rs","byte_start":271319,"byte_end":271367,"line_start":78,"line_end":78,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\date.rs","byte_start":271372,"byte_end":271375,"line_start":79,"line_end":79,"column_start":5,"column_end":8}},{"value":"/ Panics on invalid hour, minute and/or second.","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\date.rs","byte_start":271380,"byte_end":271429,"line_start":80,"line_end":80,"column_start":5,"column_end":54}},{"value":"inline","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\date.rs","byte_start":271434,"byte_end":271443,"line_start":81,"line_end":81,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":586},"span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\date.rs","byte_start":271817,"byte_end":271828,"line_start":91,"line_end":91,"column_start":12,"column_end":23},"name":"and_hms_opt","qualname":"<Date<Tz>>::and_hms_opt","value":"fn (&self, hour: u32, min: u32, sec: u32) -> Option<DateTime<Tz>>","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `DateTime` from the current date, hour, minute and second.\n The offset in the current date is preserved.","sig":null,"attributes":[{"value":"/ Makes a new `DateTime` from the current date, hour, minute and second.","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\date.rs","byte_start":271594,"byte_end":271668,"line_start":86,"line_end":86,"column_start":5,"column_end":79}},{"value":"/ The offset in the current date is preserved.","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\date.rs","byte_start":271673,"byte_end":271721,"line_start":87,"line_end":87,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\date.rs","byte_start":271726,"byte_end":271729,"line_start":88,"line_end":88,"column_start":5,"column_end":8}},{"value":"/ Returns `None` on invalid hour, minute and/or second.","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\date.rs","byte_start":271734,"byte_end":271791,"line_start":89,"line_end":89,"column_start":5,"column_end":62}},{"value":"inline","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\date.rs","byte_start":271796,"byte_end":271805,"line_start":90,"line_end":90,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":588},"span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\date.rs","byte_start":272315,"byte_end":272328,"line_start":101,"line_end":101,"column_start":12,"column_end":25},"name":"and_hms_milli","qualname":"<Date<Tz>>::and_hms_milli","value":"fn (&self, hour: u32, min: u32, sec: u32, milli: u32) -> DateTime<Tz>","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `DateTime` from the current date, hour, minute, second and millisecond.\n The millisecond part can exceed 1,000 in order to represent the leap second.\n The offset in the current date is preserved.","sig":null,"attributes":[{"value":"/ Makes a new `DateTime` from the current date, hour, minute, second and millisecond.","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\date.rs","byte_start":271989,"byte_end":272076,"line_start":95,"line_end":95,"column_start":5,"column_end":92}},{"value":"/ The millisecond part can exceed 1,000 in order to represent the leap second.","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\date.rs","byte_start":272081,"byte_end":272161,"line_start":96,"line_end":96,"column_start":5,"column_end":85}},{"value":"/ The offset in the current date is preserved.","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\date.rs","byte_start":272166,"byte_end":272214,"line_start":97,"line_end":97,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\date.rs","byte_start":272219,"byte_end":272222,"line_start":98,"line_end":98,"column_start":5,"column_end":8}},{"value":"/ Panics on invalid hour, minute, second and/or millisecond.","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\date.rs","byte_start":272227,"byte_end":272289,"line_start":99,"line_end":99,"column_start":5,"column_end":67}},{"value":"inline","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\date.rs","byte_start":272294,"byte_end":272303,"line_start":100,"line_end":100,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":589},"span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\date.rs","byte_start":272819,"byte_end":272836,"line_start":111,"line_end":111,"column_start":12,"column_end":29},"name":"and_hms_milli_opt","qualname":"<Date<Tz>>::and_hms_milli_opt","value":"fn (&self, hour: u32, min: u32, sec: u32, milli: u32) -> Option<DateTime<Tz>>","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `DateTime` from the current date, hour, minute, second and millisecond.\n The millisecond part can exceed 1,000 in order to represent the leap second.\n The offset in the current date is preserved.","sig":null,"attributes":[{"value":"/ Makes a new `DateTime` from the current date, hour, minute, second and millisecond.","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\date.rs","byte_start":272485,"byte_end":272572,"line_start":105,"line_end":105,"column_start":5,"column_end":92}},{"value":"/ The millisecond part can exceed 1,000 in order to represent the leap second.","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\date.rs","byte_start":272577,"byte_end":272657,"line_start":106,"line_end":106,"column_start":5,"column_end":85}},{"value":"/ The offset in the current date is preserved.","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\date.rs","byte_start":272662,"byte_end":272710,"line_start":107,"line_end":107,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\date.rs","byte_start":272715,"byte_end":272718,"line_start":108,"line_end":108,"column_start":5,"column_end":8}},{"value":"/ Returns `None` on invalid hour, minute, second and/or millisecond.","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\date.rs","byte_start":272723,"byte_end":272793,"line_start":109,"line_end":109,"column_start":5,"column_end":75}},{"value":"inline","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\date.rs","byte_start":272798,"byte_end":272807,"line_start":110,"line_end":110,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":591},"span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\date.rs","byte_start":273381,"byte_end":273394,"line_start":122,"line_end":122,"column_start":12,"column_end":25},"name":"and_hms_micro","qualname":"<Date<Tz>>::and_hms_micro","value":"fn (&self, hour: u32, min: u32, sec: u32, micro: u32) -> DateTime<Tz>","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `DateTime` from the current date, hour, minute, second and microsecond.\n The microsecond part can exceed 1,000,000 in order to represent the leap second.\n The offset in the current date is preserved.","sig":null,"attributes":[{"value":"/ Makes a new `DateTime` from the current date, hour, minute, second and microsecond.","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\date.rs","byte_start":273051,"byte_end":273138,"line_start":116,"line_end":116,"column_start":5,"column_end":92}},{"value":"/ The microsecond part can exceed 1,000,000 in order to represent the leap second.","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\date.rs","byte_start":273143,"byte_end":273227,"line_start":117,"line_end":117,"column_start":5,"column_end":89}},{"value":"/ The offset in the current date is preserved.","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\date.rs","byte_start":273232,"byte_end":273280,"line_start":118,"line_end":118,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\date.rs","byte_start":273285,"byte_end":273288,"line_start":119,"line_end":119,"column_start":5,"column_end":8}},{"value":"/ Panics on invalid hour, minute, second and/or microsecond.","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\date.rs","byte_start":273293,"byte_end":273355,"line_start":120,"line_end":120,"column_start":5,"column_end":67}},{"value":"inline","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\date.rs","byte_start":273360,"byte_end":273369,"line_start":121,"line_end":121,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":592},"span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\date.rs","byte_start":273889,"byte_end":273906,"line_start":132,"line_end":132,"column_start":12,"column_end":29},"name":"and_hms_micro_opt","qualname":"<Date<Tz>>::and_hms_micro_opt","value":"fn (&self, hour: u32, min: u32, sec: u32, micro: u32) -> Option<DateTime<Tz>>","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `DateTime` from the current date, hour, minute, second and microsecond.\n The microsecond part can exceed 1,000,000 in order to represent the leap second.\n The offset in the current date is preserved.","sig":null,"attributes":[{"value":"/ Makes a new `DateTime` from the current date, hour, minute, second and microsecond.","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\date.rs","byte_start":273551,"byte_end":273638,"line_start":126,"line_end":126,"column_start":5,"column_end":92}},{"value":"/ The microsecond part can exceed 1,000,000 in order to represent the leap second.","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\date.rs","byte_start":273643,"byte_end":273727,"line_start":127,"line_end":127,"column_start":5,"column_end":89}},{"value":"/ The offset in the current date is preserved.","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\date.rs","byte_start":273732,"byte_end":273780,"line_start":128,"line_end":128,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\date.rs","byte_start":273785,"byte_end":273788,"line_start":129,"line_end":129,"column_start":5,"column_end":8}},{"value":"/ Returns `None` on invalid hour, minute, second and/or microsecond.","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\date.rs","byte_start":273793,"byte_end":273863,"line_start":130,"line_end":130,"column_start":5,"column_end":75}},{"value":"inline","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\date.rs","byte_start":273868,"byte_end":273877,"line_start":131,"line_end":131,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":594},"span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\date.rs","byte_start":274452,"byte_end":274464,"line_start":143,"line_end":143,"column_start":12,"column_end":24},"name":"and_hms_nano","qualname":"<Date<Tz>>::and_hms_nano","value":"fn (&self, hour: u32, min: u32, sec: u32, nano: u32) -> DateTime<Tz>","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `DateTime` from the current date, hour, minute, second and nanosecond.\n The nanosecond part can exceed 1,000,000,000 in order to represent the leap second.\n The offset in the current date is preserved.","sig":null,"attributes":[{"value":"/ Makes a new `DateTime` from the current date, hour, minute, second and nanosecond.","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\date.rs","byte_start":274121,"byte_end":274207,"line_start":137,"line_end":137,"column_start":5,"column_end":91}},{"value":"/ The nanosecond part can exceed 1,000,000,000 in order to represent the leap second.","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\date.rs","byte_start":274212,"byte_end":274299,"line_start":138,"line_end":138,"column_start":5,"column_end":92}},{"value":"/ The offset in the current date is preserved.","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\date.rs","byte_start":274304,"byte_end":274352,"line_start":139,"line_end":139,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\date.rs","byte_start":274357,"byte_end":274360,"line_start":140,"line_end":140,"column_start":5,"column_end":8}},{"value":"/ Panics on invalid hour, minute, second and/or nanosecond.","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\date.rs","byte_start":274365,"byte_end":274426,"line_start":141,"line_end":141,"column_start":5,"column_end":66}},{"value":"inline","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\date.rs","byte_start":274431,"byte_end":274440,"line_start":142,"line_end":142,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":595},"span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\date.rs","byte_start":274957,"byte_end":274973,"line_start":153,"line_end":153,"column_start":12,"column_end":28},"name":"and_hms_nano_opt","qualname":"<Date<Tz>>::and_hms_nano_opt","value":"fn (&self, hour: u32, min: u32, sec: u32, nano: u32) -> Option<DateTime<Tz>>","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `DateTime` from the current date, hour, minute, second and nanosecond.\n The nanosecond part can exceed 1,000,000,000 in order to represent the leap second.\n The offset in the current date is preserved.","sig":null,"attributes":[{"value":"/ Makes a new `DateTime` from the current date, hour, minute, second and nanosecond.","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\date.rs","byte_start":274618,"byte_end":274704,"line_start":147,"line_end":147,"column_start":5,"column_end":91}},{"value":"/ The nanosecond part can exceed 1,000,000,000 in order to represent the leap second.","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\date.rs","byte_start":274709,"byte_end":274796,"line_start":148,"line_end":148,"column_start":5,"column_end":92}},{"value":"/ The offset in the current date is preserved.","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\date.rs","byte_start":274801,"byte_end":274849,"line_start":149,"line_end":149,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\date.rs","byte_start":274854,"byte_end":274857,"line_start":150,"line_end":150,"column_start":5,"column_end":8}},{"value":"/ Returns `None` on invalid hour, minute, second and/or nanosecond.","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\date.rs","byte_start":274862,"byte_end":274931,"line_start":151,"line_end":151,"column_start":5,"column_end":74}},{"value":"inline","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\date.rs","byte_start":274936,"byte_end":274945,"line_start":152,"line_end":152,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":597},"span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\date.rs","byte_start":275318,"byte_end":275322,"line_start":162,"line_end":162,"column_start":12,"column_end":16},"name":"succ","qualname":"<Date<Tz>>::succ","value":"fn (&self) -> Date<Tz>","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `Date` for the next date.","sig":null,"attributes":[{"value":"/ Makes a new `Date` for the next date.","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\date.rs","byte_start":275184,"byte_end":275225,"line_start":158,"line_end":158,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\date.rs","byte_start":275230,"byte_end":275233,"line_start":159,"line_end":159,"column_start":5,"column_end":8}},{"value":"/ Panics when `self` is the last representable date.","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\date.rs","byte_start":275238,"byte_end":275292,"line_start":160,"line_end":160,"column_start":5,"column_end":59}},{"value":"inline","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\date.rs","byte_start":275297,"byte_end":275306,"line_start":161,"line_end":161,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":598},"span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\date.rs","byte_start":275544,"byte_end":275552,"line_start":170,"line_end":170,"column_start":12,"column_end":20},"name":"succ_opt","qualname":"<Date<Tz>>::succ_opt","value":"fn (&self) -> Option<Date<Tz>>","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `Date` for the next date.","sig":null,"attributes":[{"value":"/ Makes a new `Date` for the next date.","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\date.rs","byte_start":275402,"byte_end":275443,"line_start":166,"line_end":166,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\date.rs","byte_start":275448,"byte_end":275451,"line_start":167,"line_end":167,"column_start":5,"column_end":8}},{"value":"/ Returns `None` when `self` is the last representable date.","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\date.rs","byte_start":275456,"byte_end":275518,"line_start":168,"line_end":168,"column_start":5,"column_end":67}},{"value":"inline","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\date.rs","byte_start":275523,"byte_end":275532,"line_start":169,"line_end":169,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":600},"span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\date.rs","byte_start":275812,"byte_end":275816,"line_start":178,"line_end":178,"column_start":12,"column_end":16},"name":"pred","qualname":"<Date<Tz>>::pred","value":"fn (&self) -> Date<Tz>","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `Date` for the prior date.","sig":null,"attributes":[{"value":"/ Makes a new `Date` for the prior date.","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\date.rs","byte_start":275676,"byte_end":275718,"line_start":174,"line_end":174,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\date.rs","byte_start":275723,"byte_end":275726,"line_start":175,"line_end":175,"column_start":5,"column_end":8}},{"value":"/ Panics when `self` is the first representable date.","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\date.rs","byte_start":275731,"byte_end":275786,"line_start":176,"line_end":176,"column_start":5,"column_end":60}},{"value":"inline","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\date.rs","byte_start":275791,"byte_end":275800,"line_start":177,"line_end":177,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":601},"span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\date.rs","byte_start":276040,"byte_end":276048,"line_start":186,"line_end":186,"column_start":12,"column_end":20},"name":"pred_opt","qualname":"<Date<Tz>>::pred_opt","value":"fn (&self) -> Option<Date<Tz>>","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `Date` for the prior date.","sig":null,"attributes":[{"value":"/ Makes a new `Date` for the prior date.","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\date.rs","byte_start":275896,"byte_end":275938,"line_start":182,"line_end":182,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\date.rs","byte_start":275943,"byte_end":275946,"line_start":183,"line_end":183,"column_start":5,"column_end":8}},{"value":"/ Returns `None` when `self` is the first representable date.","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\date.rs","byte_start":275951,"byte_end":276014,"line_start":184,"line_end":184,"column_start":5,"column_end":68}},{"value":"inline","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\date.rs","byte_start":276019,"byte_end":276028,"line_start":185,"line_end":185,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":603},"span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\date.rs","byte_start":276242,"byte_end":276248,"line_start":192,"line_end":192,"column_start":12,"column_end":18},"name":"offset","qualname":"<Date<Tz>>::offset","value":"fn <'a> (&'a self) -> &'a Tz::Offset","parent":null,"children":[],"decl_id":null,"docs":" Retrieves an associated offset from UTC.\n","sig":null,"attributes":[{"value":"/ Retrieves an associated offset from UTC.","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\date.rs","byte_start":276172,"byte_end":276216,"line_start":190,"line_end":190,"column_start":5,"column_end":49}},{"value":"inline","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\date.rs","byte_start":276221,"byte_end":276230,"line_start":191,"line_end":191,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":605},"span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\date.rs","byte_start":276379,"byte_end":276387,"line_start":198,"line_end":198,"column_start":12,"column_end":20},"name":"timezone","qualname":"<Date<Tz>>::timezone","value":"fn (&self) -> Tz","parent":null,"children":[],"decl_id":null,"docs":" Retrieves an associated time zone.\n","sig":null,"attributes":[{"value":"/ Retrieves an associated time zone.","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\date.rs","byte_start":276315,"byte_end":276353,"line_start":196,"line_end":196,"column_start":5,"column_end":43}},{"value":"inline","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\date.rs","byte_start":276358,"byte_end":276367,"line_start":197,"line_end":197,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":606},"span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\date.rs","byte_start":276613,"byte_end":276626,"line_start":205,"line_end":205,"column_start":12,"column_end":25},"name":"with_timezone","qualname":"<Date<Tz>>::with_timezone","value":"fn <Tz2> (&self, tz: &Tz2) -> Date<Tz2>","parent":null,"children":[],"decl_id":null,"docs":" Changes the associated time zone.\n This does not change the actual `Date` (but will change the string representation).\n","sig":null,"attributes":[{"value":"/ Changes the associated time zone.","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\date.rs","byte_start":276458,"byte_end":276495,"line_start":202,"line_end":202,"column_start":5,"column_end":42}},{"value":"/ This does not change the actual `Date` (but will change the string representation).","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\date.rs","byte_start":276500,"byte_end":276587,"line_start":203,"line_end":203,"column_start":5,"column_end":92}},{"value":"inline","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\date.rs","byte_start":276592,"byte_end":276601,"line_start":204,"line_end":204,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":608},"span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\date.rs","byte_start":276858,"byte_end":276869,"line_start":213,"line_end":213,"column_start":12,"column_end":23},"name":"checked_add","qualname":"<Date<Tz>>::checked_add","value":"fn (self, rhs: Duration) -> Option<Date<Tz>>","parent":null,"children":[],"decl_id":null,"docs":" Adds given `Duration` to the current date.","sig":null,"attributes":[{"value":"/ Adds given `Duration` to the current date.","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\date.rs","byte_start":276722,"byte_end":276768,"line_start":209,"line_end":209,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\date.rs","byte_start":276773,"byte_end":276776,"line_start":210,"line_end":210,"column_start":5,"column_end":8}},{"value":"/ Returns `None` when it will result in overflow.","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\date.rs","byte_start":276781,"byte_end":276832,"line_start":211,"line_end":211,"column_start":5,"column_end":56}},{"value":"inline","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\date.rs","byte_start":276837,"byte_end":276846,"line_start":212,"line_end":212,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":609},"span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\date.rs","byte_start":277179,"byte_end":277190,"line_start":222,"line_end":222,"column_start":12,"column_end":23},"name":"checked_sub","qualname":"<Date<Tz>>::checked_sub","value":"fn (self, rhs: Duration) -> Option<Date<Tz>>","parent":null,"children":[],"decl_id":null,"docs":" Subtracts given `Duration` from the current date.","sig":null,"attributes":[{"value":"/ Subtracts given `Duration` from the current date.","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\date.rs","byte_start":277036,"byte_end":277089,"line_start":218,"line_end":218,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\date.rs","byte_start":277094,"byte_end":277097,"line_start":219,"line_end":219,"column_start":5,"column_end":8}},{"value":"/ Returns `None` when it will result in overflow.","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\date.rs","byte_start":277102,"byte_end":277153,"line_start":220,"line_end":220,"column_start":5,"column_end":56}},{"value":"inline","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\date.rs","byte_start":277158,"byte_end":277167,"line_start":221,"line_end":221,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":610},"span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\date.rs","byte_start":277424,"byte_end":277433,"line_start":229,"line_end":229,"column_start":12,"column_end":21},"name":"naive_utc","qualname":"<Date<Tz>>::naive_utc","value":"fn (&self) -> NaiveDate","parent":null,"children":[],"decl_id":null,"docs":" Returns a view to the naive UTC date.\n","sig":null,"attributes":[{"value":"/ Returns a view to the naive UTC date.","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\date.rs","byte_start":277357,"byte_end":277398,"line_start":227,"line_end":227,"column_start":5,"column_end":46}},{"value":"inline","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\date.rs","byte_start":277403,"byte_end":277412,"line_start":228,"line_end":228,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":611},"span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\date.rs","byte_start":277554,"byte_end":277565,"line_start":235,"line_end":235,"column_start":12,"column_end":23},"name":"naive_local","qualname":"<Date<Tz>>::naive_local","value":"fn (&self) -> NaiveDate","parent":null,"children":[],"decl_id":null,"docs":" Returns a view to the naive local date.\n","sig":null,"attributes":[{"value":"/ Returns a view to the naive local date.","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\date.rs","byte_start":277485,"byte_end":277528,"line_start":233,"line_end":233,"column_start":5,"column_end":48}},{"value":"inline","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\date.rs","byte_start":277533,"byte_end":277542,"line_start":234,"line_end":234,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":618},"span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\date.rs","byte_start":278084,"byte_end":278101,"line_start":249,"line_end":249,"column_start":12,"column_end":29},"name":"format_with_items","qualname":"<Date<Tz>>::format_with_items","value":"fn <'a, I> (&self, items: I) -> DelayedFormat<I>","parent":null,"children":[],"decl_id":null,"docs":" Formats the date with the specified formatting items.\n","sig":null,"attributes":[{"value":"/ Formats the date with the specified formatting items.","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\date.rs","byte_start":278001,"byte_end":278058,"line_start":247,"line_end":247,"column_start":5,"column_end":62}},{"value":"inline","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\date.rs","byte_start":278063,"byte_end":278072,"line_start":248,"line_end":248,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":621},"span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\date.rs","byte_start":278502,"byte_end":278508,"line_start":258,"line_end":258,"column_start":12,"column_end":18},"name":"format","qualname":"<Date<Tz>>::format","value":"fn <'a> (&self, fmt: &'a str) -> DelayedFormat<StrftimeItems<'a>>","parent":null,"children":[],"decl_id":null,"docs":" Formats the date with the specified format string.\n See the [`format::strftime` module](../format/strftime/index.html)\n on the supported escape sequences.\n","sig":null,"attributes":[{"value":"/ Formats the date with the specified format string.","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\date.rs","byte_start":278304,"byte_end":278358,"line_start":254,"line_end":254,"column_start":5,"column_end":59}},{"value":"/ See the [`format::strftime` module](../format/strftime/index.html)","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\date.rs","byte_start":278363,"byte_end":278433,"line_start":255,"line_end":255,"column_start":5,"column_end":75}},{"value":"/ on the supported escape sequences.","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\date.rs","byte_start":278438,"byte_end":278476,"line_start":256,"line_end":256,"column_start":5,"column_end":43}},{"value":"inline","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\date.rs","byte_start":278481,"byte_end":278490,"line_start":257,"line_end":257,"column_start":5,"column_end":14}}]},{"kind":"Mod","id":{"krate":0,"index":687},"span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\datetime.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"datetime","qualname":"::datetime","value":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\datetime.rs","parent":null,"children":[{"krate":0,"index":688},{"krate":0,"index":692},{"krate":0,"index":693},{"krate":0,"index":696},{"krate":0,"index":700},{"krate":0,"index":703},{"krate":0,"index":704},{"krate":0,"index":705},{"krate":0,"index":706},{"krate":0,"index":707},{"krate":0,"index":708},{"krate":0,"index":709},{"krate":0,"index":710},{"krate":0,"index":715},{"krate":0,"index":1308},{"krate":0,"index":1312},{"krate":0,"index":722},{"krate":0,"index":741},{"krate":0,"index":745},{"krate":0,"index":751},{"krate":0,"index":762},{"krate":0,"index":787},{"krate":0,"index":801},{"krate":0,"index":803},{"krate":0,"index":805},{"krate":0,"index":809},{"krate":0,"index":811},{"krate":0,"index":814},{"krate":0,"index":817},{"krate":0,"index":821},{"krate":0,"index":825},{"krate":0,"index":830},{"krate":0,"index":834},{"krate":0,"index":837},{"krate":0,"index":840},{"krate":0,"index":844},{"krate":0,"index":848}],"decl_id":null,"docs":" ISO 8601 date and time with time zone.\n","sig":null,"attributes":[{"value":"!\n * ISO 8601 date and time with time zone.\n */","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\datetime.rs","byte_start":285962,"byte_end":286011,"line_start":5,"line_end":7,"column_start":1,"column_end":4}}]},{"kind":"Struct","id":{"krate":0,"index":1308},"span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\datetime.rs","byte_start":286548,"byte_end":286556,"line_start":27,"line_end":27,"column_start":12,"column_end":20},"name":"DateTime","qualname":"::datetime::DateTime","value":"DateTime {  }","parent":null,"children":[{"krate":0,"index":1310},{"krate":0,"index":1311}],"decl_id":null,"docs":" ISO 8601 combined date and time with time zone.\n","sig":null,"attributes":[{"value":"/ ISO 8601 combined date and time with time zone.","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\datetime.rs","byte_start":286468,"byte_end":286519,"line_start":25,"line_end":25,"column_start":1,"column_end":52}}]},{"kind":"Method","id":{"krate":0,"index":724},"span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\datetime.rs","byte_start":286934,"byte_end":286942,"line_start":38,"line_end":38,"column_start":12,"column_end":20},"name":"from_utc","qualname":"<DateTime<Tz>>::from_utc","value":"fn (datetime: NaiveDateTime, offset: Tz::Offset) -> DateTime<Tz>","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `DateTime` with given *UTC* datetime and offset.\n The local datetime should be constructed via the `TimeZone` trait.\n","sig":null,"attributes":[{"value":"/ Makes a new `DateTime` with given *UTC* datetime and offset.","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\datetime.rs","byte_start":286667,"byte_end":286731,"line_start":33,"line_end":33,"column_start":5,"column_end":69}},{"value":"/ The local datetime should be constructed via the `TimeZone` trait.","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\datetime.rs","byte_start":286736,"byte_end":286806,"line_start":34,"line_end":34,"column_start":5,"column_end":75}},{"value":"inline","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\datetime.rs","byte_start":286913,"byte_end":286922,"line_start":37,"line_end":37,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":725},"span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\datetime.rs","byte_start":287130,"byte_end":287134,"line_start":44,"line_end":44,"column_start":12,"column_end":16},"name":"date","qualname":"<DateTime<Tz>>::date","value":"fn (&self) -> Date<Tz>","parent":null,"children":[],"decl_id":null,"docs":" Retrieves a date component.\n","sig":null,"attributes":[{"value":"/ Retrieves a date component.","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\datetime.rs","byte_start":287073,"byte_end":287104,"line_start":42,"line_end":42,"column_start":5,"column_end":36}},{"value":"inline","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\datetime.rs","byte_start":287109,"byte_end":287118,"line_start":43,"line_end":43,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":726},"span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\datetime.rs","byte_start":287359,"byte_end":287363,"line_start":51,"line_end":51,"column_start":12,"column_end":16},"name":"time","qualname":"<DateTime<Tz>>::time","value":"fn (&self) -> NaiveTime","parent":null,"children":[],"decl_id":null,"docs":" Retrieves a time component.\n Unlike `date`, this is not associated to the time zone.\n","sig":null,"attributes":[{"value":"/ Retrieves a time component.","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\datetime.rs","byte_start":287238,"byte_end":287269,"line_start":48,"line_end":48,"column_start":5,"column_end":36}},{"value":"/ Unlike `date`, this is not associated to the time zone.","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\datetime.rs","byte_start":287274,"byte_end":287333,"line_start":49,"line_end":49,"column_start":5,"column_end":64}},{"value":"inline","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\datetime.rs","byte_start":287338,"byte_end":287347,"line_start":50,"line_end":50,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":727},"span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\datetime.rs","byte_start":287592,"byte_end":287601,"line_start":58,"line_end":58,"column_start":12,"column_end":21},"name":"timestamp","qualname":"<DateTime<Tz>>::timestamp","value":"fn (&self) -> i64","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of non-leap seconds since January 1, 1970 0:00:00 UTC\n (aka \"UNIX timestamp\").\n","sig":null,"attributes":[{"value":"/ Returns the number of non-leap seconds since January 1, 1970 0:00:00 UTC","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\datetime.rs","byte_start":287458,"byte_end":287534,"line_start":55,"line_end":55,"column_start":5,"column_end":81}},{"value":"/ (aka \"UNIX timestamp\").","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\datetime.rs","byte_start":287539,"byte_end":287566,"line_start":56,"line_end":56,"column_start":5,"column_end":32}},{"value":"inline","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\datetime.rs","byte_start":287571,"byte_end":287580,"line_start":57,"line_end":57,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":728},"span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\datetime.rs","byte_start":287925,"byte_end":287948,"line_start":68,"line_end":68,"column_start":12,"column_end":35},"name":"timestamp_subsec_millis","qualname":"<DateTime<Tz>>::timestamp_subsec_millis","value":"fn (&self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of milliseconds since the last second boundary","sig":null,"attributes":[{"value":"/ Returns the number of milliseconds since the last second boundary","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\datetime.rs","byte_start":287663,"byte_end":287732,"line_start":62,"line_end":62,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\datetime.rs","byte_start":287737,"byte_end":287740,"line_start":63,"line_end":63,"column_start":5,"column_end":8}},{"value":"/ warning: in event of a leap second, this may exceed 999","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\datetime.rs","byte_start":287745,"byte_end":287804,"line_start":64,"line_end":64,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\datetime.rs","byte_start":287809,"byte_end":287812,"line_start":65,"line_end":65,"column_start":5,"column_end":8}},{"value":"/ note: this is not the number of milliseconds since January 1, 1970 0:00:00 UTC","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\datetime.rs","byte_start":287817,"byte_end":287899,"line_start":66,"line_end":66,"column_start":5,"column_end":87}},{"value":"inline","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\datetime.rs","byte_start":287904,"byte_end":287913,"line_start":67,"line_end":67,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":729},"span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\datetime.rs","byte_start":288290,"byte_end":288313,"line_start":78,"line_end":78,"column_start":12,"column_end":35},"name":"timestamp_subsec_micros","qualname":"<DateTime<Tz>>::timestamp_subsec_micros","value":"fn (&self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of microseconds since the last second boundary","sig":null,"attributes":[{"value":"/ Returns the number of microseconds since the last second boundary","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\datetime.rs","byte_start":288024,"byte_end":288093,"line_start":72,"line_end":72,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\datetime.rs","byte_start":288098,"byte_end":288101,"line_start":73,"line_end":73,"column_start":5,"column_end":8}},{"value":"/ warning: in event of a leap second, this may exceed 999_999","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\datetime.rs","byte_start":288106,"byte_end":288169,"line_start":74,"line_end":74,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\datetime.rs","byte_start":288174,"byte_end":288177,"line_start":75,"line_end":75,"column_start":5,"column_end":8}},{"value":"/ note: this is not the number of microseconds since January 1, 1970 0:00:00 UTC","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\datetime.rs","byte_start":288182,"byte_end":288264,"line_start":76,"line_end":76,"column_start":5,"column_end":87}},{"value":"inline","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\datetime.rs","byte_start":288269,"byte_end":288278,"line_start":77,"line_end":77,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":730},"span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\datetime.rs","byte_start":288657,"byte_end":288679,"line_start":88,"line_end":88,"column_start":12,"column_end":34},"name":"timestamp_subsec_nanos","qualname":"<DateTime<Tz>>::timestamp_subsec_nanos","value":"fn (&self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of nanoseconds since the last second boundary","sig":null,"attributes":[{"value":"/ Returns the number of nanoseconds since the last second boundary","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\datetime.rs","byte_start":288389,"byte_end":288457,"line_start":82,"line_end":82,"column_start":5,"column_end":73}},{"value":"/","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\datetime.rs","byte_start":288462,"byte_end":288465,"line_start":83,"line_end":83,"column_start":5,"column_end":8}},{"value":"/ warning: in event of a leap second, this may exceed 999_999_999","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\datetime.rs","byte_start":288470,"byte_end":288537,"line_start":84,"line_end":84,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\datetime.rs","byte_start":288542,"byte_end":288545,"line_start":85,"line_end":85,"column_start":5,"column_end":8}},{"value":"/ note: this is not the number of nanoseconds since January 1, 1970 0:00:00 UTC","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\datetime.rs","byte_start":288550,"byte_end":288631,"line_start":86,"line_end":86,"column_start":5,"column_end":86}},{"value":"inline","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\datetime.rs","byte_start":288636,"byte_end":288645,"line_start":87,"line_end":87,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":731},"span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\datetime.rs","byte_start":288828,"byte_end":288855,"line_start":94,"line_end":94,"column_start":12,"column_end":39},"name":"num_seconds_from_unix_epoch","qualname":"<DateTime<Tz>>::num_seconds_from_unix_epoch","value":"fn (&self) -> i64","parent":null,"children":[],"decl_id":null,"docs":" *Deprecated*: Same to `DateTime::timestamp`.\n","sig":null,"attributes":[{"value":"/ *Deprecated*: Same to `DateTime::timestamp`.","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\datetime.rs","byte_start":288754,"byte_end":288802,"line_start":92,"line_end":92,"column_start":5,"column_end":53}},{"value":"inline","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\datetime.rs","byte_start":288807,"byte_end":288816,"line_start":93,"line_end":93,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":732},"span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\datetime.rs","byte_start":288978,"byte_end":288984,"line_start":100,"line_end":100,"column_start":12,"column_end":18},"name":"offset","qualname":"<DateTime<Tz>>::offset","value":"fn <'a> (&'a self) -> &'a Tz::Offset","parent":null,"children":[],"decl_id":null,"docs":" Retrieves an associated offset from UTC.\n","sig":null,"attributes":[{"value":"/ Retrieves an associated offset from UTC.","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\datetime.rs","byte_start":288908,"byte_end":288952,"line_start":98,"line_end":98,"column_start":5,"column_end":49}},{"value":"inline","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\datetime.rs","byte_start":288957,"byte_end":288966,"line_start":99,"line_end":99,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":734},"span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\datetime.rs","byte_start":289115,"byte_end":289123,"line_start":106,"line_end":106,"column_start":12,"column_end":20},"name":"timezone","qualname":"<DateTime<Tz>>::timezone","value":"fn (&self) -> Tz","parent":null,"children":[],"decl_id":null,"docs":" Retrieves an associated time zone.\n","sig":null,"attributes":[{"value":"/ Retrieves an associated time zone.","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\datetime.rs","byte_start":289051,"byte_end":289089,"line_start":104,"line_end":104,"column_start":5,"column_end":43}},{"value":"inline","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\datetime.rs","byte_start":289094,"byte_end":289103,"line_start":105,"line_end":105,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":735},"span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\datetime.rs","byte_start":289353,"byte_end":289366,"line_start":113,"line_end":113,"column_start":12,"column_end":25},"name":"with_timezone","qualname":"<DateTime<Tz>>::with_timezone","value":"fn <Tz2> (&self, tz: &Tz2) -> DateTime<Tz2>","parent":null,"children":[],"decl_id":null,"docs":" Changes the associated time zone.\n This does not change the actual `DateTime` (but will change the string representation).\n","sig":null,"attributes":[{"value":"/ Changes the associated time zone.","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\datetime.rs","byte_start":289194,"byte_end":289231,"line_start":110,"line_end":110,"column_start":5,"column_end":42}},{"value":"/ This does not change the actual `DateTime` (but will change the string representation).","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\datetime.rs","byte_start":289236,"byte_end":289327,"line_start":111,"line_end":111,"column_start":5,"column_end":96}},{"value":"inline","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\datetime.rs","byte_start":289332,"byte_end":289341,"line_start":112,"line_end":112,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":737},"span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\datetime.rs","byte_start":289619,"byte_end":289630,"line_start":121,"line_end":121,"column_start":12,"column_end":23},"name":"checked_add","qualname":"<DateTime<Tz>>::checked_add","value":"fn (self, rhs: Duration) -> Option<DateTime<Tz>>","parent":null,"children":[],"decl_id":null,"docs":" Adds given `Duration` to the current date and time.","sig":null,"attributes":[{"value":"/ Adds given `Duration` to the current date and time.","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\datetime.rs","byte_start":289474,"byte_end":289529,"line_start":117,"line_end":117,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\datetime.rs","byte_start":289534,"byte_end":289537,"line_start":118,"line_end":118,"column_start":5,"column_end":8}},{"value":"/ Returns `None` when it will result in overflow.","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\datetime.rs","byte_start":289542,"byte_end":289593,"line_start":119,"line_end":119,"column_start":5,"column_end":56}},{"value":"inline","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\datetime.rs","byte_start":289598,"byte_end":289607,"line_start":120,"line_end":120,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":738},"span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\datetime.rs","byte_start":289973,"byte_end":289984,"line_start":130,"line_end":130,"column_start":12,"column_end":23},"name":"checked_sub","qualname":"<DateTime<Tz>>::checked_sub","value":"fn (self, rhs: Duration) -> Option<DateTime<Tz>>","parent":null,"children":[],"decl_id":null,"docs":" Subtracts given `Duration` from the current date and time.","sig":null,"attributes":[{"value":"/ Subtracts given `Duration` from the current date and time.","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\datetime.rs","byte_start":289821,"byte_end":289883,"line_start":126,"line_end":126,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\datetime.rs","byte_start":289888,"byte_end":289891,"line_start":127,"line_end":127,"column_start":5,"column_end":8}},{"value":"/ Returns `None` when it will result in overflow.","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\datetime.rs","byte_start":289896,"byte_end":289947,"line_start":128,"line_end":128,"column_start":5,"column_end":56}},{"value":"inline","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\datetime.rs","byte_start":289952,"byte_end":289961,"line_start":129,"line_end":129,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":739},"span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\datetime.rs","byte_start":290246,"byte_end":290255,"line_start":137,"line_end":137,"column_start":12,"column_end":21},"name":"naive_utc","qualname":"<DateTime<Tz>>::naive_utc","value":"fn (&self) -> NaiveDateTime","parent":null,"children":[],"decl_id":null,"docs":" Returns a view to the naive UTC datetime.\n","sig":null,"attributes":[{"value":"/ Returns a view to the naive UTC datetime.","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\datetime.rs","byte_start":290175,"byte_end":290220,"line_start":135,"line_end":135,"column_start":5,"column_end":50}},{"value":"inline","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\datetime.rs","byte_start":290225,"byte_end":290234,"line_start":136,"line_end":136,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":740},"span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\datetime.rs","byte_start":290388,"byte_end":290399,"line_start":143,"line_end":143,"column_start":12,"column_end":23},"name":"naive_local","qualname":"<DateTime<Tz>>::naive_local","value":"fn (&self) -> NaiveDateTime","parent":null,"children":[],"decl_id":null,"docs":" Returns a view to the naive local datetime.\n","sig":null,"attributes":[{"value":"/ Returns a view to the naive local datetime.","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\datetime.rs","byte_start":290315,"byte_end":290362,"line_start":141,"line_end":141,"column_start":5,"column_end":52}},{"value":"inline","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\datetime.rs","byte_start":290367,"byte_end":290376,"line_start":142,"line_end":142,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":746},"span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\datetime.rs","byte_start":291014,"byte_end":291032,"line_start":157,"line_end":157,"column_start":12,"column_end":30},"name":"parse_from_rfc2822","qualname":"<DateTime<FixedOffset>>::parse_from_rfc2822","value":"fn (s: &str) -> ParseResult<DateTime<FixedOffset>>","parent":null,"children":[],"decl_id":null,"docs":" Parses an RFC 2822 date and time string such as `Tue, 1 Jul 2003 10:52:37 +0200`,\n then returns a new `DateTime` with a parsed `FixedOffset`.\n","sig":null,"attributes":[{"value":"/ Parses an RFC 2822 date and time string such as `Tue, 1 Jul 2003 10:52:37 +0200`,","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\datetime.rs","byte_start":290850,"byte_end":290935,"line_start":155,"line_end":155,"column_start":5,"column_end":90}},{"value":"/ then returns a new `DateTime` with a parsed `FixedOffset`.","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\datetime.rs","byte_start":290940,"byte_end":291002,"line_start":156,"line_end":156,"column_start":5,"column_end":67}}]},{"kind":"Method","id":{"krate":0,"index":748},"span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\datetime.rs","byte_start":291671,"byte_end":291689,"line_start":169,"line_end":169,"column_start":12,"column_end":30},"name":"parse_from_rfc3339","qualname":"<DateTime<FixedOffset>>::parse_from_rfc3339","value":"fn (s: &str) -> ParseResult<DateTime<FixedOffset>>","parent":null,"children":[],"decl_id":null,"docs":" Parses an RFC 3339 and ISO 8601 date and time string such as `1996-12-19T16:39:57-08:00`,\n then returns a new `DateTime` with a parsed `FixedOffset`.","sig":null,"attributes":[{"value":"/ Parses an RFC 3339 and ISO 8601 date and time string such as `1996-12-19T16:39:57-08:00`,","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\datetime.rs","byte_start":291302,"byte_end":291395,"line_start":164,"line_end":164,"column_start":5,"column_end":98}},{"value":"/ then returns a new `DateTime` with a parsed `FixedOffset`.","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\datetime.rs","byte_start":291400,"byte_end":291462,"line_start":165,"line_end":165,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\datetime.rs","byte_start":291467,"byte_end":291470,"line_start":166,"line_end":166,"column_start":5,"column_end":8}},{"value":"/ Why isn't this named `parse_from_iso8601`? That's because ISO 8601 allows some freedom","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\datetime.rs","byte_start":291475,"byte_end":291565,"line_start":167,"line_end":167,"column_start":5,"column_end":95}},{"value":"/ over the syntax and RFC 3339 exercises that freedom to rigidly define a fixed format.","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\datetime.rs","byte_start":291570,"byte_end":291659,"line_start":168,"line_end":168,"column_start":5,"column_end":94}}]},{"kind":"Method","id":{"krate":0,"index":750},"span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\datetime.rs","byte_start":292314,"byte_end":292328,"line_start":182,"line_end":182,"column_start":12,"column_end":26},"name":"parse_from_str","qualname":"<DateTime<FixedOffset>>::parse_from_str","value":"fn (s: &str, fmt: &str) -> ParseResult<DateTime<FixedOffset>>","parent":null,"children":[],"decl_id":null,"docs":" Parses a string with the specified format string and\n returns a new `DateTime` with a parsed `FixedOffset`.\n See the [`format::strftime` module](../format/strftime/index.html)\n on the supported escape sequences.","sig":null,"attributes":[{"value":"/ Parses a string with the specified format string and","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\datetime.rs","byte_start":291959,"byte_end":292015,"line_start":176,"line_end":176,"column_start":5,"column_end":61}},{"value":"/ returns a new `DateTime` with a parsed `FixedOffset`.","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\datetime.rs","byte_start":292020,"byte_end":292077,"line_start":177,"line_end":177,"column_start":5,"column_end":62}},{"value":"/ See the [`format::strftime` module](../format/strftime/index.html)","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\datetime.rs","byte_start":292082,"byte_end":292152,"line_start":178,"line_end":178,"column_start":5,"column_end":75}},{"value":"/ on the supported escape sequences.","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\datetime.rs","byte_start":292157,"byte_end":292195,"line_start":179,"line_end":179,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\datetime.rs","byte_start":292200,"byte_end":292203,"line_start":180,"line_end":180,"column_start":5,"column_end":8}},{"value":"/ See also `Offset::datetime_from_str` which gives a local `DateTime` on specific time zone.","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\datetime.rs","byte_start":292208,"byte_end":292302,"line_start":181,"line_end":181,"column_start":5,"column_end":99}}]},{"kind":"Method","id":{"krate":0,"index":753},"span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\datetime.rs","byte_start":292696,"byte_end":292706,"line_start":191,"line_end":191,"column_start":12,"column_end":22},"name":"to_rfc2822","qualname":"<DateTime<Tz>>::to_rfc2822","value":"fn (&self) -> String","parent":null,"children":[],"decl_id":null,"docs":" Returns an RFC 2822 date and time string such as `Tue, 1 Jul 2003 10:52:37 +0200`.\n","sig":null,"attributes":[{"value":"/ Returns an RFC 2822 date and time string such as `Tue, 1 Jul 2003 10:52:37 +0200`.","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\datetime.rs","byte_start":292598,"byte_end":292684,"line_start":190,"line_end":190,"column_start":5,"column_end":91}}]},{"kind":"Method","id":{"krate":0,"index":755},"span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\datetime.rs","byte_start":292989,"byte_end":292999,"line_start":197,"line_end":197,"column_start":12,"column_end":22},"name":"to_rfc3339","qualname":"<DateTime<Tz>>::to_rfc3339","value":"fn (&self) -> String","parent":null,"children":[],"decl_id":null,"docs":" Returns an RFC 3339 and ISO 8601 date and time string such as `1996-12-19T16:39:57-08:00`.\n","sig":null,"attributes":[{"value":"/ Returns an RFC 3339 and ISO 8601 date and time string such as `1996-12-19T16:39:57-08:00`.","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\datetime.rs","byte_start":292883,"byte_end":292977,"line_start":196,"line_end":196,"column_start":5,"column_end":99}}]},{"kind":"Method","id":{"krate":0,"index":757},"span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\datetime.rs","byte_start":293277,"byte_end":293294,"line_start":204,"line_end":204,"column_start":12,"column_end":29},"name":"format_with_items","qualname":"<DateTime<Tz>>::format_with_items","value":"fn <'a, I> (&self, items: I) -> DelayedFormat<I>","parent":null,"children":[],"decl_id":null,"docs":" Formats the combined date and time with the specified formatting items.\n","sig":null,"attributes":[{"value":"/ Formats the combined date and time with the specified formatting items.","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\datetime.rs","byte_start":293176,"byte_end":293251,"line_start":202,"line_end":202,"column_start":5,"column_end":80}},{"value":"inline","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\datetime.rs","byte_start":293256,"byte_end":293265,"line_start":203,"line_end":203,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":760},"span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\datetime.rs","byte_start":293761,"byte_end":293767,"line_start":214,"line_end":214,"column_start":12,"column_end":18},"name":"format","qualname":"<DateTime<Tz>>::format","value":"fn <'a> (&self, fmt: &'a str) -> DelayedFormat<StrftimeItems<'a>>","parent":null,"children":[],"decl_id":null,"docs":" Formats the combined date and time with the specified format string.\n See the [`format::strftime` module](../format/strftime/index.html)\n on the supported escape sequences.\n","sig":null,"attributes":[{"value":"/ Formats the combined date and time with the specified format string.","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\datetime.rs","byte_start":293545,"byte_end":293617,"line_start":210,"line_end":210,"column_start":5,"column_end":77}},{"value":"/ See the [`format::strftime` module](../format/strftime/index.html)","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\datetime.rs","byte_start":293622,"byte_end":293692,"line_start":211,"line_end":211,"column_start":5,"column_end":75}},{"value":"/ on the supported escape sequences.","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\datetime.rs","byte_start":293697,"byte_end":293735,"line_start":212,"line_end":212,"column_start":5,"column_end":43}},{"value":"inline","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\datetime.rs","byte_start":293740,"byte_end":293749,"line_start":213,"line_end":213,"column_start":5,"column_end":14}}]},{"kind":"Mod","id":{"krate":0,"index":852},"span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\format\\mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"format","qualname":"::format","value":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\format\\mod.rs","parent":null,"children":[{"krate":0,"index":853},{"krate":0,"index":854},{"krate":0,"index":855},{"krate":0,"index":858},{"krate":0,"index":861},{"krate":0,"index":862},{"krate":0,"index":863},{"krate":0,"index":864},{"krate":0,"index":865},{"krate":0,"index":866},{"krate":0,"index":867},{"krate":0,"index":1315},{"krate":0,"index":1332},{"krate":0,"index":1330},{"krate":0,"index":1327},{"krate":0,"index":1328},{"krate":0,"index":1324},{"krate":0,"index":1325},{"krate":0,"index":1322},{"krate":0,"index":1333},{"krate":0,"index":1384},{"krate":0,"index":1382},{"krate":0,"index":1379},{"krate":0,"index":1380},{"krate":0,"index":1376},{"krate":0,"index":1377},{"krate":0,"index":1374},{"krate":0,"index":1385},{"krate":0,"index":1430},{"krate":0,"index":1428},{"krate":0,"index":1425},{"krate":0,"index":1426},{"krate":0,"index":1422},{"krate":0,"index":1423},{"krate":0,"index":1420},{"krate":0,"index":1431},{"krate":0,"index":1465},{"krate":0,"index":1462},{"krate":0,"index":1456},{"krate":0,"index":1458},{"krate":0,"index":1451},{"krate":0,"index":1453},{"krate":0,"index":1448},{"krate":0,"index":868},{"krate":0,"index":869},{"krate":0,"index":870},{"krate":0,"index":871},{"krate":0,"index":872},{"krate":0,"index":873},{"krate":0,"index":1467},{"krate":0,"index":1477},{"krate":0,"index":1475},{"krate":0,"index":1471},{"krate":0,"index":1472},{"krate":0,"index":1470},{"krate":0,"index":1479},{"krate":0,"index":1500},{"krate":0,"index":1498},{"krate":0,"index":1495},{"krate":0,"index":1496},{"krate":0,"index":1494},{"krate":0,"index":874},{"krate":0,"index":876},{"krate":0,"index":878},{"krate":0,"index":880},{"krate":0,"index":881},{"krate":0,"index":882},{"krate":0,"index":883},{"krate":0,"index":884},{"krate":0,"index":885},{"krate":0,"index":886},{"krate":0,"index":887},{"krate":0,"index":937},{"krate":0,"index":1004},{"krate":0,"index":1038},{"krate":0,"index":1066},{"krate":0,"index":1550},{"krate":0,"index":1556},{"krate":0,"index":1085},{"krate":0,"index":1091}],"decl_id":null,"docs":" Formatting utilities for date and time.\n","sig":null,"attributes":[{"value":"! Formatting utilities for date and time.","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\format\\mod.rs","byte_start":313294,"byte_end":313337,"line_start":5,"line_end":5,"column_start":1,"column_end":44}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1316},"span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\format\\mod.rs","byte_start":313761,"byte_end":313765,"line_start":25,"line_end":25,"column_start":5,"column_end":9},"name":"None","qualname":"::format::Pad::None","value":"Pad::None","parent":{"krate":0,"index":1315},"children":[],"decl_id":null,"docs":" No padding.\n","sig":null,"attributes":[{"value":"/ No padding.","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\format\\mod.rs","byte_start":313741,"byte_end":313756,"line_start":24,"line_end":24,"column_start":5,"column_end":20}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1318},"span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\format\\mod.rs","byte_start":313799,"byte_end":313803,"line_start":27,"line_end":27,"column_start":5,"column_end":9},"name":"Zero","qualname":"::format::Pad::Zero","value":"Pad::Zero","parent":{"krate":0,"index":1315},"children":[],"decl_id":null,"docs":" Zero (`0`) padding.\n","sig":null,"attributes":[{"value":"/ Zero (`0`) padding.","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\format\\mod.rs","byte_start":313771,"byte_end":313794,"line_start":26,"line_end":26,"column_start":5,"column_end":28}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1320},"span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\format\\mod.rs","byte_start":313832,"byte_end":313837,"line_start":29,"line_end":29,"column_start":5,"column_end":10},"name":"Space","qualname":"::format::Pad::Space","value":"Pad::Space","parent":{"krate":0,"index":1315},"children":[],"decl_id":null,"docs":" Space padding.\n","sig":null,"attributes":[{"value":"/ Space padding.","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\format\\mod.rs","byte_start":313809,"byte_end":313827,"line_start":28,"line_end":28,"column_start":5,"column_end":23}}]},{"kind":"Enum","id":{"krate":0,"index":1315},"span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\format\\mod.rs","byte_start":313731,"byte_end":313734,"line_start":23,"line_end":23,"column_start":10,"column_end":13},"name":"Pad","qualname":"::format::Pad","value":"Pad::{None, Zero, Space}","parent":null,"children":[{"krate":0,"index":1316},{"krate":0,"index":1318},{"krate":0,"index":1320}],"decl_id":null,"docs":" Padding characters for numeric items.\n","sig":null,"attributes":[{"value":"/ Padding characters for numeric items.","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\format\\mod.rs","byte_start":313635,"byte_end":313676,"line_start":21,"line_end":21,"column_start":1,"column_end":42}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1334},"span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\format\\mod.rs","byte_start":314741,"byte_end":314745,"line_start":49,"line_end":49,"column_start":5,"column_end":9},"name":"Year","qualname":"::format::Numeric::Year","value":"Numeric::Year","parent":{"krate":0,"index":1333},"children":[],"decl_id":null,"docs":" Full Gregorian year (FW=4, PW=∞).\n May accept years before 1 BCE or after 9999 CE, given an initial sign.\n","sig":null,"attributes":[{"value":"/ Full Gregorian year (FW=4, PW=∞).","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\format\\mod.rs","byte_start":314618,"byte_end":314657,"line_start":47,"line_end":47,"column_start":5,"column_end":42}},{"value":"/ May accept years before 1 BCE or after 9999 CE, given an initial sign.","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\format\\mod.rs","byte_start":314662,"byte_end":314736,"line_start":48,"line_end":48,"column_start":5,"column_end":79}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1336},"span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\format\\mod.rs","byte_start":314847,"byte_end":314857,"line_start":51,"line_end":51,"column_start":5,"column_end":15},"name":"YearDiv100","qualname":"::format::Numeric::YearDiv100","value":"Numeric::YearDiv100","parent":{"krate":0,"index":1333},"children":[],"decl_id":null,"docs":" Gregorian year divided by 100 (century number; FW=PW=2). Implies the non-negative year.\n","sig":null,"attributes":[{"value":"/ Gregorian year divided by 100 (century number; FW=PW=2). Implies the non-negative year.","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\format\\mod.rs","byte_start":314751,"byte_end":314842,"line_start":50,"line_end":50,"column_start":5,"column_end":96}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1338},"span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\format\\mod.rs","byte_start":314928,"byte_end":314938,"line_start":53,"line_end":53,"column_start":5,"column_end":15},"name":"YearMod100","qualname":"::format::Numeric::YearMod100","value":"Numeric::YearMod100","parent":{"krate":0,"index":1333},"children":[],"decl_id":null,"docs":" Gregorian year modulo 100 (FW=PW=2). Cannot be negative.\n","sig":null,"attributes":[{"value":"/ Gregorian year modulo 100 (FW=PW=2). Cannot be negative.","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\format\\mod.rs","byte_start":314863,"byte_end":314923,"line_start":52,"line_end":52,"column_start":5,"column_end":65}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1340},"span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\format\\mod.rs","byte_start":315073,"byte_end":315080,"line_start":56,"line_end":56,"column_start":5,"column_end":12},"name":"IsoYear","qualname":"::format::Numeric::IsoYear","value":"Numeric::IsoYear","parent":{"krate":0,"index":1333},"children":[],"decl_id":null,"docs":" Year in the ISO week date (FW=4, PW=∞).\n May accept years before 1 BCE or after 9999 CE, given an initial sign.\n","sig":null,"attributes":[{"value":"/ Year in the ISO week date (FW=4, PW=∞).","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\format\\mod.rs","byte_start":314944,"byte_end":314989,"line_start":54,"line_end":54,"column_start":5,"column_end":48}},{"value":"/ May accept years before 1 BCE or after 9999 CE, given an initial sign.","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\format\\mod.rs","byte_start":314994,"byte_end":315068,"line_start":55,"line_end":55,"column_start":5,"column_end":79}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1342},"span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\format\\mod.rs","byte_start":315178,"byte_end":315191,"line_start":58,"line_end":58,"column_start":5,"column_end":18},"name":"IsoYearDiv100","qualname":"::format::Numeric::IsoYearDiv100","value":"Numeric::IsoYearDiv100","parent":{"krate":0,"index":1333},"children":[],"decl_id":null,"docs":" Year in the ISO week date, divided by 100 (FW=PW=2). Implies the non-negative year.\n","sig":null,"attributes":[{"value":"/ Year in the ISO week date, divided by 100 (FW=PW=2). Implies the non-negative year.","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\format\\mod.rs","byte_start":315086,"byte_end":315173,"line_start":57,"line_end":57,"column_start":5,"column_end":92}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1344},"span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\format\\mod.rs","byte_start":315274,"byte_end":315287,"line_start":60,"line_end":60,"column_start":5,"column_end":18},"name":"IsoYearMod100","qualname":"::format::Numeric::IsoYearMod100","value":"Numeric::IsoYearMod100","parent":{"krate":0,"index":1333},"children":[],"decl_id":null,"docs":" Year in the ISO week date, modulo 100 (FW=PW=2). Cannot be negative.\n","sig":null,"attributes":[{"value":"/ Year in the ISO week date, modulo 100 (FW=PW=2). Cannot be negative.","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\format\\mod.rs","byte_start":315197,"byte_end":315269,"line_start":59,"line_end":59,"column_start":5,"column_end":77}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1346},"span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\format\\mod.rs","byte_start":315318,"byte_end":315323,"line_start":62,"line_end":62,"column_start":5,"column_end":10},"name":"Month","qualname":"::format::Numeric::Month","value":"Numeric::Month","parent":{"krate":0,"index":1333},"children":[],"decl_id":null,"docs":" Month (FW=PW=2).\n","sig":null,"attributes":[{"value":"/ Month (FW=PW=2).","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\format\\mod.rs","byte_start":315293,"byte_end":315313,"line_start":61,"line_end":61,"column_start":5,"column_end":25}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1348},"span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\format\\mod.rs","byte_start":315365,"byte_end":315368,"line_start":64,"line_end":64,"column_start":5,"column_end":8},"name":"Day","qualname":"::format::Numeric::Day","value":"Numeric::Day","parent":{"krate":0,"index":1333},"children":[],"decl_id":null,"docs":" Day of the month (FW=PW=2).\n","sig":null,"attributes":[{"value":"/ Day of the month (FW=PW=2).","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\format\\mod.rs","byte_start":315329,"byte_end":315360,"line_start":63,"line_end":63,"column_start":5,"column_end":36}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1350},"span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\format\\mod.rs","byte_start":315461,"byte_end":315472,"line_start":66,"line_end":66,"column_start":5,"column_end":16},"name":"WeekFromSun","qualname":"::format::Numeric::WeekFromSun","value":"Numeric::WeekFromSun","parent":{"krate":0,"index":1333},"children":[],"decl_id":null,"docs":" Week number, where the week 1 starts at the first Sunday of January (FW=PW=2).\n","sig":null,"attributes":[{"value":"/ Week number, where the week 1 starts at the first Sunday of January (FW=PW=2).","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\format\\mod.rs","byte_start":315374,"byte_end":315456,"line_start":65,"line_end":65,"column_start":5,"column_end":87}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1352},"span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\format\\mod.rs","byte_start":315565,"byte_end":315576,"line_start":68,"line_end":68,"column_start":5,"column_end":16},"name":"WeekFromMon","qualname":"::format::Numeric::WeekFromMon","value":"Numeric::WeekFromMon","parent":{"krate":0,"index":1333},"children":[],"decl_id":null,"docs":" Week number, where the week 1 starts at the first Monday of January (FW=PW=2).\n","sig":null,"attributes":[{"value":"/ Week number, where the week 1 starts at the first Monday of January (FW=PW=2).","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\format\\mod.rs","byte_start":315478,"byte_end":315560,"line_start":67,"line_end":67,"column_start":5,"column_end":87}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1354},"span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\format\\mod.rs","byte_start":315634,"byte_end":315641,"line_start":70,"line_end":70,"column_start":5,"column_end":12},"name":"IsoWeek","qualname":"::format::Numeric::IsoWeek","value":"Numeric::IsoWeek","parent":{"krate":0,"index":1333},"children":[],"decl_id":null,"docs":" Week number in the ISO week date (FW=PW=2).\n","sig":null,"attributes":[{"value":"/ Week number in the ISO week date (FW=PW=2).","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\format\\mod.rs","byte_start":315582,"byte_end":315629,"line_start":69,"line_end":69,"column_start":5,"column_end":52}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1356},"span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\format\\mod.rs","byte_start":315717,"byte_end":315731,"line_start":72,"line_end":72,"column_start":5,"column_end":19},"name":"NumDaysFromSun","qualname":"::format::Numeric::NumDaysFromSun","value":"Numeric::NumDaysFromSun","parent":{"krate":0,"index":1333},"children":[],"decl_id":null,"docs":" Day of the week, where Sunday = 0 and Saturday = 6 (FW=PW=1).\n","sig":null,"attributes":[{"value":"/ Day of the week, where Sunday = 0 and Saturday = 6 (FW=PW=1).","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\format\\mod.rs","byte_start":315647,"byte_end":315712,"line_start":71,"line_end":71,"column_start":5,"column_end":70}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1358},"span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\format\\mod.rs","byte_start":315805,"byte_end":315819,"line_start":74,"line_end":74,"column_start":5,"column_end":19},"name":"WeekdayFromMon","qualname":"::format::Numeric::WeekdayFromMon","value":"Numeric::WeekdayFromMon","parent":{"krate":0,"index":1333},"children":[],"decl_id":null,"docs":" Day of the week, where Monday = 1 and Sunday = 7 (FW=PW=1).\n","sig":null,"attributes":[{"value":"/ Day of the week, where Monday = 1 and Sunday = 7 (FW=PW=1).","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\format\\mod.rs","byte_start":315737,"byte_end":315800,"line_start":73,"line_end":73,"column_start":5,"column_end":68}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1360},"span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\format\\mod.rs","byte_start":315860,"byte_end":315867,"line_start":76,"line_end":76,"column_start":5,"column_end":12},"name":"Ordinal","qualname":"::format::Numeric::Ordinal","value":"Numeric::Ordinal","parent":{"krate":0,"index":1333},"children":[],"decl_id":null,"docs":" Day of the year (FW=PW=3).\n","sig":null,"attributes":[{"value":"/ Day of the year (FW=PW=3).","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\format\\mod.rs","byte_start":315825,"byte_end":315855,"line_start":75,"line_end":75,"column_start":5,"column_end":35}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1362},"span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\format\\mod.rs","byte_start":315926,"byte_end":315930,"line_start":78,"line_end":78,"column_start":5,"column_end":9},"name":"Hour","qualname":"::format::Numeric::Hour","value":"Numeric::Hour","parent":{"krate":0,"index":1333},"children":[],"decl_id":null,"docs":" Hour number in the 24-hour clocks (FW=PW=2).\n","sig":null,"attributes":[{"value":"/ Hour number in the 24-hour clocks (FW=PW=2).","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\format\\mod.rs","byte_start":315873,"byte_end":315921,"line_start":77,"line_end":77,"column_start":5,"column_end":53}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1364},"span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\format\\mod.rs","byte_start":315989,"byte_end":315995,"line_start":80,"line_end":80,"column_start":5,"column_end":11},"name":"Hour12","qualname":"::format::Numeric::Hour12","value":"Numeric::Hour12","parent":{"krate":0,"index":1333},"children":[],"decl_id":null,"docs":" Hour number in the 12-hour clocks (FW=PW=2).\n","sig":null,"attributes":[{"value":"/ Hour number in the 12-hour clocks (FW=PW=2).","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\format\\mod.rs","byte_start":315936,"byte_end":315984,"line_start":79,"line_end":79,"column_start":5,"column_end":53}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1366},"span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\format\\mod.rs","byte_start":316068,"byte_end":316074,"line_start":82,"line_end":82,"column_start":5,"column_end":11},"name":"Minute","qualname":"::format::Numeric::Minute","value":"Numeric::Minute","parent":{"krate":0,"index":1333},"children":[],"decl_id":null,"docs":" The number of minutes since the last whole hour (FW=PW=2).\n","sig":null,"attributes":[{"value":"/ The number of minutes since the last whole hour (FW=PW=2).","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\format\\mod.rs","byte_start":316001,"byte_end":316063,"line_start":81,"line_end":81,"column_start":5,"column_end":67}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1368},"span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\format\\mod.rs","byte_start":316149,"byte_end":316155,"line_start":84,"line_end":84,"column_start":5,"column_end":11},"name":"Second","qualname":"::format::Numeric::Second","value":"Numeric::Second","parent":{"krate":0,"index":1333},"children":[],"decl_id":null,"docs":" The number of seconds since the last whole minute (FW=PW=2).\n","sig":null,"attributes":[{"value":"/ The number of seconds since the last whole minute (FW=PW=2).","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\format\\mod.rs","byte_start":316080,"byte_end":316144,"line_start":83,"line_end":83,"column_start":5,"column_end":69}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1370},"span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\format\\mod.rs","byte_start":316358,"byte_end":316368,"line_start":88,"line_end":88,"column_start":5,"column_end":15},"name":"Nanosecond","qualname":"::format::Numeric::Nanosecond","value":"Numeric::Nanosecond","parent":{"krate":0,"index":1333},"children":[],"decl_id":null,"docs":" The number of nanoseconds since the last whole second (FW=PW=9).\n Note that this is *not* left-aligned;\n see also [`Fixed::Nanosecond`](./enum.Fixed.html#variant.Nanosecond).\n","sig":null,"attributes":[{"value":"/ The number of nanoseconds since the last whole second (FW=PW=9).","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\format\\mod.rs","byte_start":316161,"byte_end":316229,"line_start":85,"line_end":85,"column_start":5,"column_end":73}},{"value":"/ Note that this is *not* left-aligned;","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\format\\mod.rs","byte_start":316234,"byte_end":316275,"line_start":86,"line_end":86,"column_start":5,"column_end":46}},{"value":"/ see also [`Fixed::Nanosecond`](./enum.Fixed.html#variant.Nanosecond).","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\format\\mod.rs","byte_start":316280,"byte_end":316353,"line_start":87,"line_end":87,"column_start":5,"column_end":78}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1372},"span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\format\\mod.rs","byte_start":316548,"byte_end":316557,"line_start":91,"line_end":91,"column_start":5,"column_end":14},"name":"Timestamp","qualname":"::format::Numeric::Timestamp","value":"Numeric::Timestamp","parent":{"krate":0,"index":1333},"children":[],"decl_id":null,"docs":" The number of non-leap seconds since the midnight UTC on January 1, 1970 (FW=1, PW=∞).\n For formatting, it assumes UTC upon the absence of time zone offset.\n","sig":null,"attributes":[{"value":"/ The number of non-leap seconds since the midnight UTC on January 1, 1970 (FW=1, PW=∞).","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\format\\mod.rs","byte_start":316374,"byte_end":316466,"line_start":89,"line_end":89,"column_start":5,"column_end":95}},{"value":"/ For formatting, it assumes UTC upon the absence of time zone offset.","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\format\\mod.rs","byte_start":316471,"byte_end":316543,"line_start":90,"line_end":90,"column_start":5,"column_end":77}}]},{"kind":"Enum","id":{"krate":0,"index":1333},"span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\format\\mod.rs","byte_start":314604,"byte_end":314611,"line_start":46,"line_end":46,"column_start":10,"column_end":17},"name":"Numeric","qualname":"::format::Numeric","value":"Numeric::{Year, YearDiv100, YearMod100, IsoYear, IsoYearDiv100, IsoYearMod100, Month, Day, WeekFromSun, WeekFromMon, IsoWeek, NumDaysFromSun, WeekdayFromMon, Ordinal, Hour, Hour12, Minute, Second, Nanosecond, Timestamp}","parent":null,"children":[{"krate":0,"index":1334},{"krate":0,"index":1336},{"krate":0,"index":1338},{"krate":0,"index":1340},{"krate":0,"index":1342},{"krate":0,"index":1344},{"krate":0,"index":1346},{"krate":0,"index":1348},{"krate":0,"index":1350},{"krate":0,"index":1352},{"krate":0,"index":1354},{"krate":0,"index":1356},{"krate":0,"index":1358},{"krate":0,"index":1360},{"krate":0,"index":1362},{"krate":0,"index":1364},{"krate":0,"index":1366},{"krate":0,"index":1368},{"krate":0,"index":1370},{"krate":0,"index":1372}],"decl_id":null,"docs":" Numeric item types.\n They have associated formatting width (FW) and parsing width (PW).","sig":null,"attributes":[{"value":"/ Numeric item types.","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\format\\mod.rs","byte_start":313842,"byte_end":313865,"line_start":32,"line_end":32,"column_start":1,"column_end":24}},{"value":"/ They have associated formatting width (FW) and parsing width (PW).","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\format\\mod.rs","byte_start":313866,"byte_end":313936,"line_start":33,"line_end":33,"column_start":1,"column_end":71}},{"value":"/","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\format\\mod.rs","byte_start":313937,"byte_end":313940,"line_start":34,"line_end":34,"column_start":1,"column_end":4}},{"value":"/ The **formatting width** is the minimal width to be formatted.","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\format\\mod.rs","byte_start":313941,"byte_end":314007,"line_start":35,"line_end":35,"column_start":1,"column_end":67}},{"value":"/ If the number is too short, and the padding is not [`Pad::None`](./enum.Pad.html#variant.None),","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\format\\mod.rs","byte_start":314008,"byte_end":314107,"line_start":36,"line_end":36,"column_start":1,"column_end":100}},{"value":"/ then it is left-padded.","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\format\\mod.rs","byte_start":314108,"byte_end":314135,"line_start":37,"line_end":37,"column_start":1,"column_end":28}},{"value":"/ If the number is too long or (in some cases) negative, it is printed as is.","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\format\\mod.rs","byte_start":314136,"byte_end":314215,"line_start":38,"line_end":38,"column_start":1,"column_end":80}},{"value":"/","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\format\\mod.rs","byte_start":314216,"byte_end":314219,"line_start":39,"line_end":39,"column_start":1,"column_end":4}},{"value":"/ The **parsing width** is the maximal width to be scanned.","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\format\\mod.rs","byte_start":314220,"byte_end":314281,"line_start":40,"line_end":40,"column_start":1,"column_end":62}},{"value":"/ The parser only tries to consume from one to given number of digits (greedily). ","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\format\\mod.rs","byte_start":314282,"byte_end":314366,"line_start":41,"line_end":41,"column_start":1,"column_end":85}},{"value":"/ It also trims the preceding whitespaces if any.","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\format\\mod.rs","byte_start":314367,"byte_end":314418,"line_start":42,"line_end":42,"column_start":1,"column_end":52}},{"value":"/ It cannot parse the negative number, so some date and time cannot be formatted then","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\format\\mod.rs","byte_start":314419,"byte_end":314506,"line_start":43,"line_end":43,"column_start":1,"column_end":88}},{"value":"/ parsed with the same formatting items.","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\format\\mod.rs","byte_start":314507,"byte_end":314549,"line_start":44,"line_end":44,"column_start":1,"column_end":43}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1386},"span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\format\\mod.rs","byte_start":316936,"byte_end":316950,"line_start":103,"line_end":103,"column_start":5,"column_end":19},"name":"ShortMonthName","qualname":"::format::Fixed::ShortMonthName","value":"Fixed::ShortMonthName","parent":{"krate":0,"index":1385},"children":[],"decl_id":null,"docs":" Abbreviated month names.","sig":null,"attributes":[{"value":"/ Abbreviated month names.","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\format\\mod.rs","byte_start":316803,"byte_end":316831,"line_start":100,"line_end":100,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\format\\mod.rs","byte_start":316836,"byte_end":316839,"line_start":101,"line_end":101,"column_start":5,"column_end":8}},{"value":"/ Prints a three-letter-long name in the title case, reads the same name in any case.","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\format\\mod.rs","byte_start":316844,"byte_end":316931,"line_start":102,"line_end":102,"column_start":5,"column_end":92}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1388},"span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\format\\mod.rs","byte_start":317083,"byte_end":317096,"line_start":107,"line_end":107,"column_start":5,"column_end":18},"name":"LongMonthName","qualname":"::format::Fixed::LongMonthName","value":"Fixed::LongMonthName","parent":{"krate":0,"index":1385},"children":[],"decl_id":null,"docs":" Full month names.","sig":null,"attributes":[{"value":"/ Full month names.","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\format\\mod.rs","byte_start":316956,"byte_end":316977,"line_start":104,"line_end":104,"column_start":5,"column_end":26}},{"value":"/","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\format\\mod.rs","byte_start":316982,"byte_end":316985,"line_start":105,"line_end":105,"column_start":5,"column_end":8}},{"value":"/ Prints a full name in the title case, reads either a short or full name in any case.","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\format\\mod.rs","byte_start":316990,"byte_end":317078,"line_start":106,"line_end":106,"column_start":5,"column_end":93}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1390},"span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\format\\mod.rs","byte_start":317245,"byte_end":317261,"line_start":111,"line_end":111,"column_start":5,"column_end":21},"name":"ShortWeekdayName","qualname":"::format::Fixed::ShortWeekdayName","value":"Fixed::ShortWeekdayName","parent":{"krate":0,"index":1385},"children":[],"decl_id":null,"docs":" Abbreviated day of the week names.","sig":null,"attributes":[{"value":"/ Abbreviated day of the week names.","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\format\\mod.rs","byte_start":317102,"byte_end":317140,"line_start":108,"line_end":108,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\format\\mod.rs","byte_start":317145,"byte_end":317148,"line_start":109,"line_end":109,"column_start":5,"column_end":8}},{"value":"/ Prints a three-letter-long name in the title case, reads the same name in any case.","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\format\\mod.rs","byte_start":317153,"byte_end":317240,"line_start":110,"line_end":110,"column_start":5,"column_end":92}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1392},"span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\format\\mod.rs","byte_start":317404,"byte_end":317419,"line_start":115,"line_end":115,"column_start":5,"column_end":20},"name":"LongWeekdayName","qualname":"::format::Fixed::LongWeekdayName","value":"Fixed::LongWeekdayName","parent":{"krate":0,"index":1385},"children":[],"decl_id":null,"docs":" Full day of the week names.","sig":null,"attributes":[{"value":"/ Full day of the week names.","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\format\\mod.rs","byte_start":317267,"byte_end":317298,"line_start":112,"line_end":112,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\format\\mod.rs","byte_start":317303,"byte_end":317306,"line_start":113,"line_end":113,"column_start":5,"column_end":8}},{"value":"/ Prints a full name in the title case, reads either a short or full name in any case.","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\format\\mod.rs","byte_start":317311,"byte_end":317399,"line_start":114,"line_end":114,"column_start":5,"column_end":93}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1394},"span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\format\\mod.rs","byte_start":317497,"byte_end":317506,"line_start":119,"line_end":119,"column_start":5,"column_end":14},"name":"LowerAmPm","qualname":"::format::Fixed::LowerAmPm","value":"Fixed::LowerAmPm","parent":{"krate":0,"index":1385},"children":[],"decl_id":null,"docs":" AM/PM.","sig":null,"attributes":[{"value":"/ AM/PM.","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\format\\mod.rs","byte_start":317425,"byte_end":317435,"line_start":116,"line_end":116,"column_start":5,"column_end":15}},{"value":"/","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\format\\mod.rs","byte_start":317440,"byte_end":317443,"line_start":117,"line_end":117,"column_start":5,"column_end":8}},{"value":"/ Prints in lower case, reads in any case.","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\format\\mod.rs","byte_start":317448,"byte_end":317492,"line_start":118,"line_end":118,"column_start":5,"column_end":49}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1396},"span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\format\\mod.rs","byte_start":317584,"byte_end":317593,"line_start":123,"line_end":123,"column_start":5,"column_end":14},"name":"UpperAmPm","qualname":"::format::Fixed::UpperAmPm","value":"Fixed::UpperAmPm","parent":{"krate":0,"index":1385},"children":[],"decl_id":null,"docs":" AM/PM.","sig":null,"attributes":[{"value":"/ AM/PM.","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\format\\mod.rs","byte_start":317512,"byte_end":317522,"line_start":120,"line_end":120,"column_start":5,"column_end":15}},{"value":"/","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\format\\mod.rs","byte_start":317527,"byte_end":317530,"line_start":121,"line_end":121,"column_start":5,"column_end":8}},{"value":"/ Prints in upper case, reads in any case.","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\format\\mod.rs","byte_start":317535,"byte_end":317579,"line_start":122,"line_end":122,"column_start":5,"column_end":49}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1398},"span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\format\\mod.rs","byte_start":317840,"byte_end":317850,"line_start":127,"line_end":127,"column_start":5,"column_end":15},"name":"Nanosecond","qualname":"::format::Fixed::Nanosecond","value":"Fixed::Nanosecond","parent":{"krate":0,"index":1385},"children":[],"decl_id":null,"docs":" An optional dot plus one or more digits for left-aligned nanoseconds.\n May print nothing, 3, 6 or 9 digits according to the available accuracy.\n See also [`Numeric::Nanosecond`](./enum.Numeric.html#variant.Nanosecond).\n","sig":null,"attributes":[{"value":"/ An optional dot plus one or more digits for left-aligned nanoseconds.","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\format\\mod.rs","byte_start":317599,"byte_end":317672,"line_start":124,"line_end":124,"column_start":5,"column_end":78}},{"value":"/ May print nothing, 3, 6 or 9 digits according to the available accuracy.","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\format\\mod.rs","byte_start":317677,"byte_end":317753,"line_start":125,"line_end":125,"column_start":5,"column_end":81}},{"value":"/ See also [`Numeric::Nanosecond`](./enum.Numeric.html#variant.Nanosecond).","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\format\\mod.rs","byte_start":317758,"byte_end":317835,"line_start":126,"line_end":126,"column_start":5,"column_end":82}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1400},"span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\format\\mod.rs","byte_start":317940,"byte_end":317951,"line_start":129,"line_end":129,"column_start":5,"column_end":16},"name":"Nanosecond3","qualname":"::format::Fixed::Nanosecond3","value":"Fixed::Nanosecond3","parent":{"krate":0,"index":1385},"children":[],"decl_id":null,"docs":" Same to [`Nanosecond`](#variant.Nanosecond) but the accuracy is fixed to 3.\n","sig":null,"attributes":[{"value":"/ Same to [`Nanosecond`](#variant.Nanosecond) but the accuracy is fixed to 3.","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\format\\mod.rs","byte_start":317856,"byte_end":317935,"line_start":128,"line_end":128,"column_start":5,"column_end":84}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1402},"span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\format\\mod.rs","byte_start":318041,"byte_end":318052,"line_start":131,"line_end":131,"column_start":5,"column_end":16},"name":"Nanosecond6","qualname":"::format::Fixed::Nanosecond6","value":"Fixed::Nanosecond6","parent":{"krate":0,"index":1385},"children":[],"decl_id":null,"docs":" Same to [`Nanosecond`](#variant.Nanosecond) but the accuracy is fixed to 6.\n","sig":null,"attributes":[{"value":"/ Same to [`Nanosecond`](#variant.Nanosecond) but the accuracy is fixed to 6.","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\format\\mod.rs","byte_start":317957,"byte_end":318036,"line_start":130,"line_end":130,"column_start":5,"column_end":84}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1404},"span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\format\\mod.rs","byte_start":318142,"byte_end":318153,"line_start":133,"line_end":133,"column_start":5,"column_end":16},"name":"Nanosecond9","qualname":"::format::Fixed::Nanosecond9","value":"Fixed::Nanosecond9","parent":{"krate":0,"index":1385},"children":[],"decl_id":null,"docs":" Same to [`Nanosecond`](#variant.Nanosecond) but the accuracy is fixed to 9.\n","sig":null,"attributes":[{"value":"/ Same to [`Nanosecond`](#variant.Nanosecond) but the accuracy is fixed to 9.","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\format\\mod.rs","byte_start":318058,"byte_end":318137,"line_start":132,"line_end":132,"column_start":5,"column_end":84}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1406},"span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\format\\mod.rs","byte_start":318274,"byte_end":318286,"line_start":137,"line_end":137,"column_start":5,"column_end":17},"name":"TimezoneName","qualname":"::format::Fixed::TimezoneName","value":"Fixed::TimezoneName","parent":{"krate":0,"index":1385},"children":[],"decl_id":null,"docs":" Timezone name.","sig":null,"attributes":[{"value":"/ Timezone name.","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\format\\mod.rs","byte_start":318159,"byte_end":318177,"line_start":134,"line_end":134,"column_start":5,"column_end":23}},{"value":"/","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\format\\mod.rs","byte_start":318182,"byte_end":318185,"line_start":135,"line_end":135,"column_start":5,"column_end":8}},{"value":"/ It does not support parsing, its use in the parser is an immediate failure.","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\format\\mod.rs","byte_start":318190,"byte_end":318269,"line_start":136,"line_end":136,"column_start":5,"column_end":84}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1408},"span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\format\\mod.rs","byte_start":318624,"byte_end":318643,"line_start":143,"line_end":143,"column_start":5,"column_end":24},"name":"TimezoneOffsetColon","qualname":"::format::Fixed::TimezoneOffsetColon","value":"Fixed::TimezoneOffsetColon","parent":{"krate":0,"index":1385},"children":[],"decl_id":null,"docs":" Offset from the local time to UTC (`+09:00` or `-04:00` or `+00:00`).","sig":null,"attributes":[{"value":"/ Offset from the local time to UTC (`+09:00` or `-04:00` or `+00:00`).","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\format\\mod.rs","byte_start":318292,"byte_end":318365,"line_start":138,"line_end":138,"column_start":5,"column_end":78}},{"value":"/","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\format\\mod.rs","byte_start":318370,"byte_end":318373,"line_start":139,"line_end":139,"column_start":5,"column_end":8}},{"value":"/ In the parser, the colon can be omitted and/or surrounded with any amount of whitespaces.","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\format\\mod.rs","byte_start":318378,"byte_end":318471,"line_start":140,"line_end":140,"column_start":5,"column_end":98}},{"value":"/ The offset is limited from `-24:00` to `+24:00`,","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\format\\mod.rs","byte_start":318476,"byte_end":318528,"line_start":141,"line_end":141,"column_start":5,"column_end":57}},{"value":"/ which is same to [`FixedOffset`](../offset/fixed/struct.FixedOffset.html)'s range.","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\format\\mod.rs","byte_start":318533,"byte_end":318619,"line_start":142,"line_end":142,"column_start":5,"column_end":91}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1410},"span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\format\\mod.rs","byte_start":319038,"byte_end":319058,"line_start":150,"line_end":150,"column_start":5,"column_end":25},"name":"TimezoneOffsetColonZ","qualname":"::format::Fixed::TimezoneOffsetColonZ","value":"Fixed::TimezoneOffsetColonZ","parent":{"krate":0,"index":1385},"children":[],"decl_id":null,"docs":" Offset from the local time to UTC (`+09:00` or `-04:00` or `Z`).","sig":null,"attributes":[{"value":"/ Offset from the local time to UTC (`+09:00` or `-04:00` or `Z`).","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\format\\mod.rs","byte_start":318649,"byte_end":318717,"line_start":144,"line_end":144,"column_start":5,"column_end":73}},{"value":"/","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\format\\mod.rs","byte_start":318722,"byte_end":318725,"line_start":145,"line_end":145,"column_start":5,"column_end":8}},{"value":"/ In the parser, the colon can be omitted and/or surrounded with any amount of whitespaces,","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\format\\mod.rs","byte_start":318730,"byte_end":318823,"line_start":146,"line_end":146,"column_start":5,"column_end":98}},{"value":"/ and `Z` can be either in upper case or in lower case.","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\format\\mod.rs","byte_start":318828,"byte_end":318885,"line_start":147,"line_end":147,"column_start":5,"column_end":62}},{"value":"/ The offset is limited from `-24:00` to `+24:00`,","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\format\\mod.rs","byte_start":318890,"byte_end":318942,"line_start":148,"line_end":148,"column_start":5,"column_end":57}},{"value":"/ which is same to [`FixedOffset`](../offset/fixed/struct.FixedOffset.html)'s range.","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\format\\mod.rs","byte_start":318947,"byte_end":319033,"line_start":149,"line_end":149,"column_start":5,"column_end":91}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1412},"span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\format\\mod.rs","byte_start":319197,"byte_end":319211,"line_start":153,"line_end":153,"column_start":5,"column_end":19},"name":"TimezoneOffset","qualname":"::format::Fixed::TimezoneOffset","value":"Fixed::TimezoneOffset","parent":{"krate":0,"index":1385},"children":[],"decl_id":null,"docs":" Same to [`TimezoneOffsetColon`](#variant.TimezoneOffsetColon) but prints no colon.\n Parsing allows an optional colon.\n","sig":null,"attributes":[{"value":"/ Same to [`TimezoneOffsetColon`](#variant.TimezoneOffsetColon) but prints no colon.","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\format\\mod.rs","byte_start":319064,"byte_end":319150,"line_start":151,"line_end":151,"column_start":5,"column_end":91}},{"value":"/ Parsing allows an optional colon.","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\format\\mod.rs","byte_start":319155,"byte_end":319192,"line_start":152,"line_end":152,"column_start":5,"column_end":42}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1414},"span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\format\\mod.rs","byte_start":319352,"byte_end":319367,"line_start":156,"line_end":156,"column_start":5,"column_end":20},"name":"TimezoneOffsetZ","qualname":"::format::Fixed::TimezoneOffsetZ","value":"Fixed::TimezoneOffsetZ","parent":{"krate":0,"index":1385},"children":[],"decl_id":null,"docs":" Same to [`TimezoneOffsetColonZ`](#variant.TimezoneOffsetColonZ) but prints no colon.\n Parsing allows an optional colon.\n","sig":null,"attributes":[{"value":"/ Same to [`TimezoneOffsetColonZ`](#variant.TimezoneOffsetColonZ) but prints no colon.","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\format\\mod.rs","byte_start":319217,"byte_end":319305,"line_start":154,"line_end":154,"column_start":5,"column_end":93}},{"value":"/ Parsing allows an optional colon.","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\format\\mod.rs","byte_start":319310,"byte_end":319347,"line_start":155,"line_end":155,"column_start":5,"column_end":42}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1416},"span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\format\\mod.rs","byte_start":319460,"byte_end":319467,"line_start":158,"line_end":158,"column_start":5,"column_end":12},"name":"RFC2822","qualname":"::format::Fixed::RFC2822","value":"Fixed::RFC2822","parent":{"krate":0,"index":1385},"children":[],"decl_id":null,"docs":" RFC 2822 date and time syntax. Commonly used for email and MIME date and time.\n","sig":null,"attributes":[{"value":"/ RFC 2822 date and time syntax. Commonly used for email and MIME date and time.","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\format\\mod.rs","byte_start":319373,"byte_end":319455,"line_start":157,"line_end":157,"column_start":5,"column_end":87}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1418},"span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\format\\mod.rs","byte_start":319523,"byte_end":319530,"line_start":160,"line_end":160,"column_start":5,"column_end":12},"name":"RFC3339","qualname":"::format::Fixed::RFC3339","value":"Fixed::RFC3339","parent":{"krate":0,"index":1385},"children":[],"decl_id":null,"docs":" RFC 3339 & ISO 8601 date and time syntax.\n","sig":null,"attributes":[{"value":"/ RFC 3339 & ISO 8601 date and time syntax.","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\format\\mod.rs","byte_start":319473,"byte_end":319518,"line_start":159,"line_end":159,"column_start":5,"column_end":50}}]},{"kind":"Enum","id":{"krate":0,"index":1385},"span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\format\\mod.rs","byte_start":316791,"byte_end":316796,"line_start":99,"line_end":99,"column_start":10,"column_end":15},"name":"Fixed","qualname":"::format::Fixed","value":"Fixed::{ShortMonthName, LongMonthName, ShortWeekdayName, LongWeekdayName, LowerAmPm, UpperAmPm, Nanosecond, Nanosecond3, Nanosecond6, Nanosecond9, TimezoneName, TimezoneOffsetColon, TimezoneOffsetColonZ, TimezoneOffset, TimezoneOffsetZ, RFC2822, RFC3339}","parent":null,"children":[{"krate":0,"index":1386},{"krate":0,"index":1388},{"krate":0,"index":1390},{"krate":0,"index":1392},{"krate":0,"index":1394},{"krate":0,"index":1396},{"krate":0,"index":1398},{"krate":0,"index":1400},{"krate":0,"index":1402},{"krate":0,"index":1404},{"krate":0,"index":1406},{"krate":0,"index":1408},{"krate":0,"index":1410},{"krate":0,"index":1412},{"krate":0,"index":1414},{"krate":0,"index":1416},{"krate":0,"index":1418}],"decl_id":null,"docs":" Fixed-format item types.","sig":null,"attributes":[{"value":"/ Fixed-format item types.","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\format\\mod.rs","byte_start":316562,"byte_end":316590,"line_start":94,"line_end":94,"column_start":1,"column_end":29}},{"value":"/","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\format\\mod.rs","byte_start":316591,"byte_end":316594,"line_start":95,"line_end":95,"column_start":1,"column_end":4}},{"value":"/ They have their own rules of formatting and parsing.","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\format\\mod.rs","byte_start":316595,"byte_end":316651,"line_start":96,"line_end":96,"column_start":1,"column_end":57}},{"value":"/ Otherwise noted, they print in the specified cases but parse case-insensitively.","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\format\\mod.rs","byte_start":316652,"byte_end":316736,"line_start":97,"line_end":97,"column_start":1,"column_end":85}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1433},"span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\format\\mod.rs","byte_start":319725,"byte_end":319732,"line_start":167,"line_end":167,"column_start":5,"column_end":12},"name":"Literal","qualname":"::format::Item::Literal","value":"Item::Literal(&'a str)","parent":{"krate":0,"index":1431},"children":[],"decl_id":null,"docs":" A literally printed and parsed text.\n","sig":null,"attributes":[{"value":"/ A literally printed and parsed text.","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\format\\mod.rs","byte_start":319680,"byte_end":319720,"line_start":166,"line_end":166,"column_start":5,"column_end":45}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1436},"span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\format\\mod.rs","byte_start":319819,"byte_end":319824,"line_start":169,"line_end":169,"column_start":5,"column_end":10},"name":"Space","qualname":"::format::Item::Space","value":"Item::Space(&'a str)","parent":{"krate":0,"index":1431},"children":[],"decl_id":null,"docs":" Whitespace. Prints literally but reads zero or more whitespace.\n","sig":null,"attributes":[{"value":"/ Whitespace. Prints literally but reads zero or more whitespace.","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\format\\mod.rs","byte_start":319747,"byte_end":319814,"line_start":168,"line_end":168,"column_start":5,"column_end":72}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1439},"span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\format\\mod.rs","byte_start":320002,"byte_end":320009,"line_start":172,"line_end":172,"column_start":5,"column_end":12},"name":"Numeric","qualname":"::format::Item::Numeric","value":"Item::Numeric(Numeric, Pad)","parent":{"krate":0,"index":1431},"children":[],"decl_id":null,"docs":" Numeric item. Can be optionally padded to the maximal length (if any) when formatting;\n the parser simply ignores any padded whitespace and zeroes.\n","sig":null,"attributes":[{"value":"/ Numeric item. Can be optionally padded to the maximal length (if any) when formatting;","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\format\\mod.rs","byte_start":319839,"byte_end":319929,"line_start":170,"line_end":170,"column_start":5,"column_end":95}},{"value":"/ the parser simply ignores any padded whitespace and zeroes.","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\format\\mod.rs","byte_start":319934,"byte_end":319997,"line_start":171,"line_end":171,"column_start":5,"column_end":68}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1443},"span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\format\\mod.rs","byte_start":320056,"byte_end":320061,"line_start":174,"line_end":174,"column_start":5,"column_end":10},"name":"Fixed","qualname":"::format::Item::Fixed","value":"Item::Fixed(Fixed)","parent":{"krate":0,"index":1431},"children":[],"decl_id":null,"docs":" Fixed-format item.\n","sig":null,"attributes":[{"value":"/ Fixed-format item.","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\format\\mod.rs","byte_start":320029,"byte_end":320051,"line_start":173,"line_end":173,"column_start":5,"column_end":27}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1446},"span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\format\\mod.rs","byte_start":320150,"byte_end":320155,"line_start":176,"line_end":176,"column_start":5,"column_end":10},"name":"Error","qualname":"::format::Item::Error","value":"Item::Error","parent":{"krate":0,"index":1431},"children":[],"decl_id":null,"docs":" Issues a formatting error. Used to signal an invalid format string.\n","sig":null,"attributes":[{"value":"/ Issues a formatting error. Used to signal an invalid format string.","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\format\\mod.rs","byte_start":320074,"byte_end":320145,"line_start":175,"line_end":175,"column_start":5,"column_end":76}}]},{"kind":"Enum","id":{"krate":0,"index":1431},"span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\format\\mod.rs","byte_start":319665,"byte_end":319669,"line_start":165,"line_end":165,"column_start":10,"column_end":14},"name":"Item","qualname":"::format::Item","value":"Item::{Literal, Space, Numeric, Fixed, Error}","parent":null,"children":[{"krate":0,"index":1433},{"krate":0,"index":1436},{"krate":0,"index":1439},{"krate":0,"index":1443},{"krate":0,"index":1446}],"decl_id":null,"docs":" A single formatting item. This is used for both formatting and parsing.\n","sig":null,"attributes":[{"value":"/ A single formatting item. This is used for both formatting and parsing.","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\format\\mod.rs","byte_start":319535,"byte_end":319610,"line_start":163,"line_end":163,"column_start":1,"column_end":76}}]},{"kind":"Struct","id":{"krate":0,"index":1467},"span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\format\\mod.rs","byte_start":320651,"byte_end":320661,"line_start":188,"line_end":188,"column_start":12,"column_end":22},"name":"ParseError","qualname":"::format::ParseError","value":"","parent":null,"children":[],"decl_id":null,"docs":" An error from the `parse` function.\n","sig":null,"attributes":[{"value":"/ An error from the `parse` function.","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\format\\mod.rs","byte_start":320559,"byte_end":320598,"line_start":186,"line_end":186,"column_start":1,"column_end":40}}]},{"kind":"Type","id":{"krate":0,"index":874},"span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\format\\mod.rs","byte_start":321893,"byte_end":321904,"line_start":222,"line_end":222,"column_start":10,"column_end":21},"name":"ParseResult","qualname":"::format::ParseResult","value":"Result<T, ParseError>","parent":null,"children":[],"decl_id":null,"docs":" Same to `Result<T, ParseError>`.\n","sig":null,"attributes":[{"value":"/ Same to `Result<T, ParseError>`.","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\format\\mod.rs","byte_start":321847,"byte_end":321883,"line_start":221,"line_end":221,"column_start":1,"column_end":37}}]},{"kind":"Function","id":{"krate":0,"index":887},"span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\format\\mod.rs","byte_start":323353,"byte_end":323359,"line_start":255,"line_end":255,"column_start":8,"column_end":14},"name":"format","qualname":"::format::format","value":"fn <'a, I> (w: &mut fmt::Formatter, date: Option<&NaiveDate>, time: Option<&NaiveTime>, off: Option<&(String, Duration)>, items: I) -> fmt::Result","parent":null,"children":[],"decl_id":null,"docs":" Tries to format given arguments with given formatting items.\n Internally used by `DelayedFormat`.\n","sig":null,"attributes":[{"value":"/ Tries to format given arguments with given formatting items.","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\format\\mod.rs","byte_start":323241,"byte_end":323305,"line_start":253,"line_end":253,"column_start":1,"column_end":65}},{"value":"/ Internally used by `DelayedFormat`.","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\format\\mod.rs","byte_start":323306,"byte_end":323345,"line_start":254,"line_end":254,"column_start":1,"column_end":40}}]},{"kind":"Mod","id":{"krate":0,"index":937},"span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\format\\parsed.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"parsed","qualname":"::format::parsed","value":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\format\\parsed.rs","parent":null,"children":[{"krate":0,"index":938},{"krate":0,"index":939},{"krate":0,"index":942},{"krate":0,"index":943},{"krate":0,"index":944},{"krate":0,"index":945},{"krate":0,"index":949},{"krate":0,"index":950},{"krate":0,"index":951},{"krate":0,"index":952},{"krate":0,"index":953},{"krate":0,"index":954},{"krate":0,"index":1502},{"krate":0,"index":1529},{"krate":0,"index":1525},{"krate":0,"index":1526},{"krate":0,"index":1523},{"krate":0,"index":959},{"krate":0,"index":961}],"decl_id":null,"docs":" A collection of parsed date and time items.\n They can be constructed incrementally while being checked for consistency.\n","sig":null,"attributes":[{"value":"! A collection of parsed date and time items.","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\format\\parsed.rs","byte_start":335037,"byte_end":335084,"line_start":5,"line_end":5,"column_start":1,"column_end":48}},{"value":"! They can be constructed incrementally while being checked for consistency.","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\format\\parsed.rs","byte_start":335085,"byte_end":335163,"line_start":6,"line_end":6,"column_start":1,"column_end":79}}]},{"kind":"Struct","id":{"krate":0,"index":1502},"span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\format\\parsed.rs","byte_start":336053,"byte_end":336059,"line_start":31,"line_end":31,"column_start":12,"column_end":18},"name":"Parsed","qualname":"::format::parsed::Parsed","value":"Parsed { year, year_div_100, year_mod_100, isoyear, isoyear_div_100, isoyear_mod_100, month, week_from_sun, week_from_mon, isoweek, weekday, ordinal, day, hour_div_12, hour_mod_12, minute, second, nanosecond, timestamp, offset }","parent":null,"children":[{"krate":0,"index":1503},{"krate":0,"index":1504},{"krate":0,"index":1505},{"krate":0,"index":1506},{"krate":0,"index":1507},{"krate":0,"index":1508},{"krate":0,"index":1509},{"krate":0,"index":1510},{"krate":0,"index":1511},{"krate":0,"index":1512},{"krate":0,"index":1513},{"krate":0,"index":1514},{"krate":0,"index":1515},{"krate":0,"index":1516},{"krate":0,"index":1517},{"krate":0,"index":1518},{"krate":0,"index":1519},{"krate":0,"index":1520},{"krate":0,"index":1521},{"krate":0,"index":1522}],"decl_id":null,"docs":" Parsed parts of date and time. There are two classes of methods:","sig":null,"attributes":[{"value":"/ Parsed parts of date and time. There are two classes of methods:","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\format\\parsed.rs","byte_start":335535,"byte_end":335603,"line_start":22,"line_end":22,"column_start":1,"column_end":69}},{"value":"/","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\format\\parsed.rs","byte_start":335604,"byte_end":335607,"line_start":23,"line_end":23,"column_start":1,"column_end":4}},{"value":"/ - `set_*` methods try to set given field(s) while checking for the consistency.","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\format\\parsed.rs","byte_start":335608,"byte_end":335691,"line_start":24,"line_end":24,"column_start":1,"column_end":84}},{"value":"/   It may or may not check for the range constraint immediately (for efficiency reasons).","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\format\\parsed.rs","byte_start":335692,"byte_end":335784,"line_start":25,"line_end":25,"column_start":1,"column_end":93}},{"value":"/","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\format\\parsed.rs","byte_start":335785,"byte_end":335788,"line_start":26,"line_end":26,"column_start":1,"column_end":4}},{"value":"/ - `to_*` methods try to make a concrete date and time value out of set fields.","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\format\\parsed.rs","byte_start":335789,"byte_end":335871,"line_start":27,"line_end":27,"column_start":1,"column_end":83}},{"value":"/   It fully checks any remaining out-of-range conditions and inconsistent/impossible fields.","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\format\\parsed.rs","byte_start":335872,"byte_end":335967,"line_start":28,"line_end":28,"column_start":1,"column_end":96}},{"value":"allow(missing_copy_implementations)","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\format\\parsed.rs","byte_start":335968,"byte_end":336006,"line_start":29,"line_end":29,"column_start":1,"column_end":39}}]},{"kind":"Field","id":{"krate":0,"index":1503},"span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\format\\parsed.rs","byte_start":336236,"byte_end":336240,"line_start":36,"line_end":36,"column_start":9,"column_end":13},"name":"year","qualname":"::format::parsed::Parsed::year","value":"std::option::Option<i32>","parent":{"krate":0,"index":1502},"children":[],"decl_id":null,"docs":" Year.","sig":null,"attributes":[{"value":"/ Year.","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\format\\parsed.rs","byte_start":336066,"byte_end":336075,"line_start":32,"line_end":32,"column_start":5,"column_end":14}},{"value":"/","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\format\\parsed.rs","byte_start":336080,"byte_end":336083,"line_start":33,"line_end":33,"column_start":5,"column_end":8}},{"value":"/ This can be negative unlike [`year_div_100`](#structfield.year_div_100)","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\format\\parsed.rs","byte_start":336088,"byte_end":336163,"line_start":34,"line_end":34,"column_start":5,"column_end":80}},{"value":"/ and [`year_mod_100`](#structfield.year_mod_100) fields.","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\format\\parsed.rs","byte_start":336168,"byte_end":336227,"line_start":35,"line_end":35,"column_start":5,"column_end":64}}]},{"kind":"Field","id":{"krate":0,"index":1504},"span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\format\\parsed.rs","byte_start":336544,"byte_end":336556,"line_start":43,"line_end":43,"column_start":9,"column_end":21},"name":"year_div_100","qualname":"::format::parsed::Parsed::year_div_100","value":"std::option::Option<i32>","parent":{"krate":0,"index":1502},"children":[],"decl_id":null,"docs":" Year divided by 100. Implies that the year is >= 1 BCE when set.","sig":null,"attributes":[{"value":"/ Year divided by 100. Implies that the year is >= 1 BCE when set.","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\format\\parsed.rs","byte_start":336260,"byte_end":336328,"line_start":38,"line_end":38,"column_start":5,"column_end":73}},{"value":"/","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\format\\parsed.rs","byte_start":336333,"byte_end":336336,"line_start":39,"line_end":39,"column_start":5,"column_end":8}},{"value":"/ Due to the common usage, if this field is missing but","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\format\\parsed.rs","byte_start":336341,"byte_end":336398,"line_start":40,"line_end":40,"column_start":5,"column_end":62}},{"value":"/ [`year_mod_100`](#structfield.year_mod_100) is present,","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\format\\parsed.rs","byte_start":336403,"byte_end":336462,"line_start":41,"line_end":41,"column_start":5,"column_end":64}},{"value":"/ it is inferred to 19 when `year_mod_100 >= 70` and 20 otherwise.","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\format\\parsed.rs","byte_start":336467,"byte_end":336535,"line_start":42,"line_end":42,"column_start":5,"column_end":73}}]},{"kind":"Field","id":{"krate":0,"index":1505},"span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\format\\parsed.rs","byte_start":336649,"byte_end":336661,"line_start":46,"line_end":46,"column_start":9,"column_end":21},"name":"year_mod_100","qualname":"::format::parsed::Parsed::year_mod_100","value":"std::option::Option<i32>","parent":{"krate":0,"index":1502},"children":[],"decl_id":null,"docs":" Year modulo 100. Implies that the year is >= 1 BCE when set.\n","sig":null,"attributes":[{"value":"/ Year modulo 100. Implies that the year is >= 1 BCE when set.","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\format\\parsed.rs","byte_start":336576,"byte_end":336640,"line_start":45,"line_end":45,"column_start":5,"column_end":69}}]},{"kind":"Field","id":{"krate":0,"index":1506},"span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\format\\parsed.rs","byte_start":336925,"byte_end":336932,"line_start":52,"line_end":52,"column_start":9,"column_end":16},"name":"isoyear","qualname":"::format::parsed::Parsed::isoyear","value":"std::option::Option<i32>","parent":{"krate":0,"index":1502},"children":[],"decl_id":null,"docs":" Year in the [ISO week date](../../naive/date/index.html#week-date).","sig":null,"attributes":[{"value":"/ Year in the [ISO week date](../../naive/date/index.html#week-date).","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\format\\parsed.rs","byte_start":336681,"byte_end":336752,"line_start":48,"line_end":48,"column_start":5,"column_end":76}},{"value":"/","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\format\\parsed.rs","byte_start":336757,"byte_end":336760,"line_start":49,"line_end":49,"column_start":5,"column_end":8}},{"value":"/ This can be negative unlike [`isoyear_div_100`](#structfield.isoyear_div_100) and","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\format\\parsed.rs","byte_start":336765,"byte_end":336850,"line_start":50,"line_end":50,"column_start":5,"column_end":90}},{"value":"/ [`isoyear_mod_100`](#structfield.isoyear_mod_100) fields.","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\format\\parsed.rs","byte_start":336855,"byte_end":336916,"line_start":51,"line_end":51,"column_start":5,"column_end":66}}]},{"kind":"Field","id":{"krate":0,"index":1507},"span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\format\\parsed.rs","byte_start":337316,"byte_end":337331,"line_start":60,"line_end":60,"column_start":9,"column_end":24},"name":"isoyear_div_100","qualname":"::format::parsed::Parsed::isoyear_div_100","value":"std::option::Option<i32>","parent":{"krate":0,"index":1502},"children":[],"decl_id":null,"docs":" Year in the [ISO week date](../../naive/date/index.html#week-date), divided by 100.\n Implies that the year is >= 1 BCE when set.","sig":null,"attributes":[{"value":"/ Year in the [ISO week date](../../naive/date/index.html#week-date), divided by 100.","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\format\\parsed.rs","byte_start":336952,"byte_end":337039,"line_start":54,"line_end":54,"column_start":5,"column_end":92}},{"value":"/ Implies that the year is >= 1 BCE when set.","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\format\\parsed.rs","byte_start":337044,"byte_end":337091,"line_start":55,"line_end":55,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\format\\parsed.rs","byte_start":337096,"byte_end":337099,"line_start":56,"line_end":56,"column_start":5,"column_end":8}},{"value":"/ Due to the common usage, if this field is missing but","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\format\\parsed.rs","byte_start":337104,"byte_end":337161,"line_start":57,"line_end":57,"column_start":5,"column_end":62}},{"value":"/ [`isoyear_mod_100`](#structfield.isoyear_mod_100) is present,","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\format\\parsed.rs","byte_start":337166,"byte_end":337231,"line_start":58,"line_end":58,"column_start":5,"column_end":70}},{"value":"/ it is inferred to 19 when `isoyear_mod_100 >= 70` and 20 otherwise.","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\format\\parsed.rs","byte_start":337236,"byte_end":337307,"line_start":59,"line_end":59,"column_start":5,"column_end":76}}]},{"kind":"Field","id":{"krate":0,"index":1508},"span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\format\\parsed.rs","byte_start":337495,"byte_end":337510,"line_start":64,"line_end":64,"column_start":9,"column_end":24},"name":"isoyear_mod_100","qualname":"::format::parsed::Parsed::isoyear_mod_100","value":"std::option::Option<i32>","parent":{"krate":0,"index":1502},"children":[],"decl_id":null,"docs":" Year in the [ISO week date](../../naive/date/index.html#week-date), modulo 100.\n Implies that the year is >= 1 BCE when set.\n","sig":null,"attributes":[{"value":"/ Year in the [ISO week date](../../naive/date/index.html#week-date), modulo 100.","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\format\\parsed.rs","byte_start":337351,"byte_end":337434,"line_start":62,"line_end":62,"column_start":5,"column_end":88}},{"value":"/ Implies that the year is >= 1 BCE when set.","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\format\\parsed.rs","byte_start":337439,"byte_end":337486,"line_start":63,"line_end":63,"column_start":5,"column_end":52}}]},{"kind":"Field","id":{"krate":0,"index":1509},"span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\format\\parsed.rs","byte_start":337557,"byte_end":337562,"line_start":67,"line_end":67,"column_start":9,"column_end":14},"name":"month","qualname":"::format::parsed::Parsed::month","value":"std::option::Option<u32>","parent":{"krate":0,"index":1502},"children":[],"decl_id":null,"docs":" Month (1--12).\n","sig":null,"attributes":[{"value":"/ Month (1--12).","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\format\\parsed.rs","byte_start":337530,"byte_end":337548,"line_start":66,"line_end":66,"column_start":5,"column_end":23}}]},{"kind":"Field","id":{"krate":0,"index":1510},"span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\format\\parsed.rs","byte_start":337717,"byte_end":337730,"line_start":71,"line_end":71,"column_start":9,"column_end":22},"name":"week_from_sun","qualname":"::format::parsed::Parsed::week_from_sun","value":"std::option::Option<u32>","parent":{"krate":0,"index":1502},"children":[],"decl_id":null,"docs":" Week number, where the week 1 starts at the first Sunday of January\n (0--53, 1--53 or 1--52 depending on the year).\n","sig":null,"attributes":[{"value":"/ Week number, where the week 1 starts at the first Sunday of January","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\format\\parsed.rs","byte_start":337582,"byte_end":337653,"line_start":69,"line_end":69,"column_start":5,"column_end":76}},{"value":"/ (0--53, 1--53 or 1--52 depending on the year).","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\format\\parsed.rs","byte_start":337658,"byte_end":337708,"line_start":70,"line_end":70,"column_start":5,"column_end":55}}]},{"kind":"Field","id":{"krate":0,"index":1511},"span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\format\\parsed.rs","byte_start":337885,"byte_end":337898,"line_start":75,"line_end":75,"column_start":9,"column_end":22},"name":"week_from_mon","qualname":"::format::parsed::Parsed::week_from_mon","value":"std::option::Option<u32>","parent":{"krate":0,"index":1502},"children":[],"decl_id":null,"docs":" Week number, where the week 1 starts at the first Monday of January\n (0--53, 1--53 or 1--52 depending on the year).\n","sig":null,"attributes":[{"value":"/ Week number, where the week 1 starts at the first Monday of January","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\format\\parsed.rs","byte_start":337750,"byte_end":337821,"line_start":73,"line_end":73,"column_start":5,"column_end":76}},{"value":"/ (0--53, 1--53 or 1--52 depending on the year).","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\format\\parsed.rs","byte_start":337826,"byte_end":337876,"line_start":74,"line_end":74,"column_start":5,"column_end":55}}]},{"kind":"Field","id":{"krate":0,"index":1512},"span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\format\\parsed.rs","byte_start":338035,"byte_end":338042,"line_start":79,"line_end":79,"column_start":9,"column_end":16},"name":"isoweek","qualname":"::format::parsed::Parsed::isoweek","value":"std::option::Option<u32>","parent":{"krate":0,"index":1502},"children":[],"decl_id":null,"docs":" [ISO week number](../../naive/date/index.html#week-date)\n (1--52 or 1--53 depending on the year).\n","sig":null,"attributes":[{"value":"/ [ISO week number](../../naive/date/index.html#week-date)","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\format\\parsed.rs","byte_start":337918,"byte_end":337978,"line_start":77,"line_end":77,"column_start":5,"column_end":65}},{"value":"/ (1--52 or 1--53 depending on the year).","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\format\\parsed.rs","byte_start":337983,"byte_end":338026,"line_start":78,"line_end":78,"column_start":5,"column_end":48}}]},{"kind":"Field","id":{"krate":0,"index":1513},"span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\format\\parsed.rs","byte_start":338091,"byte_end":338098,"line_start":82,"line_end":82,"column_start":9,"column_end":16},"name":"weekday","qualname":"::format::parsed::Parsed::weekday","value":"std::option::Option<Weekday>","parent":{"krate":0,"index":1502},"children":[],"decl_id":null,"docs":" Day of the week.\n","sig":null,"attributes":[{"value":"/ Day of the week.","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\format\\parsed.rs","byte_start":338062,"byte_end":338082,"line_start":81,"line_end":81,"column_start":5,"column_end":25}}]},{"kind":"Field","id":{"krate":0,"index":1514},"span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\format\\parsed.rs","byte_start":338192,"byte_end":338199,"line_start":85,"line_end":85,"column_start":9,"column_end":16},"name":"ordinal","qualname":"::format::parsed::Parsed::ordinal","value":"std::option::Option<u32>","parent":{"krate":0,"index":1502},"children":[],"decl_id":null,"docs":" Day of the year (1--365 or 1--366 depending on the year).\n","sig":null,"attributes":[{"value":"/ Day of the year (1--365 or 1--366 depending on the year).","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\format\\parsed.rs","byte_start":338122,"byte_end":338183,"line_start":84,"line_end":84,"column_start":5,"column_end":66}}]},{"kind":"Field","id":{"krate":0,"index":1515},"span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\format\\parsed.rs","byte_start":338303,"byte_end":338306,"line_start":88,"line_end":88,"column_start":9,"column_end":12},"name":"day","qualname":"::format::parsed::Parsed::day","value":"std::option::Option<u32>","parent":{"krate":0,"index":1502},"children":[],"decl_id":null,"docs":" Day of the month (1--28, 1--29, 1--30 or 1--31 depending on the month).\n","sig":null,"attributes":[{"value":"/ Day of the month (1--28, 1--29, 1--30 or 1--31 depending on the month).","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\format\\parsed.rs","byte_start":338219,"byte_end":338294,"line_start":87,"line_end":87,"column_start":5,"column_end":80}}]},{"kind":"Field","id":{"krate":0,"index":1516},"span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\format\\parsed.rs","byte_start":338407,"byte_end":338418,"line_start":91,"line_end":91,"column_start":9,"column_end":20},"name":"hour_div_12","qualname":"::format::parsed::Parsed::hour_div_12","value":"std::option::Option<u32>","parent":{"krate":0,"index":1502},"children":[],"decl_id":null,"docs":" Hour number divided by 12 (0--1). 0 indicates AM and 1 indicates PM.\n","sig":null,"attributes":[{"value":"/ Hour number divided by 12 (0--1). 0 indicates AM and 1 indicates PM.","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\format\\parsed.rs","byte_start":338326,"byte_end":338398,"line_start":90,"line_end":90,"column_start":5,"column_end":77}}]},{"kind":"Field","id":{"krate":0,"index":1517},"span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\format\\parsed.rs","byte_start":338481,"byte_end":338492,"line_start":94,"line_end":94,"column_start":9,"column_end":20},"name":"hour_mod_12","qualname":"::format::parsed::Parsed::hour_mod_12","value":"std::option::Option<u32>","parent":{"krate":0,"index":1502},"children":[],"decl_id":null,"docs":" Hour number modulo 12 (0--11).\n","sig":null,"attributes":[{"value":"/ Hour number modulo 12 (0--11).","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\format\\parsed.rs","byte_start":338438,"byte_end":338472,"line_start":93,"line_end":93,"column_start":5,"column_end":39}}]},{"kind":"Field","id":{"krate":0,"index":1518},"span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\format\\parsed.rs","byte_start":338547,"byte_end":338553,"line_start":97,"line_end":97,"column_start":9,"column_end":15},"name":"minute","qualname":"::format::parsed::Parsed::minute","value":"std::option::Option<u32>","parent":{"krate":0,"index":1502},"children":[],"decl_id":null,"docs":" Minute number (0--59).\n","sig":null,"attributes":[{"value":"/ Minute number (0--59).","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\format\\parsed.rs","byte_start":338512,"byte_end":338538,"line_start":96,"line_end":96,"column_start":5,"column_end":31}}]},{"kind":"Field","id":{"krate":0,"index":1519},"span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\format\\parsed.rs","byte_start":338637,"byte_end":338643,"line_start":100,"line_end":100,"column_start":9,"column_end":15},"name":"second","qualname":"::format::parsed::Parsed::second","value":"std::option::Option<u32>","parent":{"krate":0,"index":1502},"children":[],"decl_id":null,"docs":" Second number (0--60, accounting for leap seconds).\n","sig":null,"attributes":[{"value":"/ Second number (0--60, accounting for leap seconds).","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\format\\parsed.rs","byte_start":338573,"byte_end":338628,"line_start":99,"line_end":99,"column_start":5,"column_end":60}}]},{"kind":"Field","id":{"krate":0,"index":1520},"span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\format\\parsed.rs","byte_start":338742,"byte_end":338752,"line_start":103,"line_end":103,"column_start":9,"column_end":19},"name":"nanosecond","qualname":"::format::parsed::Parsed::nanosecond","value":"std::option::Option<u32>","parent":{"krate":0,"index":1502},"children":[],"decl_id":null,"docs":" The number of nanoseconds since the whole second (0--999,999,999).\n","sig":null,"attributes":[{"value":"/ The number of nanoseconds since the whole second (0--999,999,999).","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\format\\parsed.rs","byte_start":338663,"byte_end":338733,"line_start":102,"line_end":102,"column_start":5,"column_end":75}}]},{"kind":"Field","id":{"krate":0,"index":1521},"span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\format\\parsed.rs","byte_start":338955,"byte_end":338964,"line_start":108,"line_end":108,"column_start":9,"column_end":18},"name":"timestamp","qualname":"::format::parsed::Parsed::timestamp","value":"std::option::Option<i64>","parent":{"krate":0,"index":1502},"children":[],"decl_id":null,"docs":" The number of non-leap seconds since the midnight UTC on January 1, 1970.","sig":null,"attributes":[{"value":"/ The number of non-leap seconds since the midnight UTC on January 1, 1970.","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\format\\parsed.rs","byte_start":338772,"byte_end":338849,"line_start":105,"line_end":105,"column_start":5,"column_end":82}},{"value":"/","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\format\\parsed.rs","byte_start":338854,"byte_end":338857,"line_start":106,"line_end":106,"column_start":5,"column_end":8}},{"value":"/ This can be off by one if [`second`](#structfield.second) is 60 (a leap second).","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\format\\parsed.rs","byte_start":338862,"byte_end":338946,"line_start":107,"line_end":107,"column_start":5,"column_end":89}}]},{"kind":"Field","id":{"krate":0,"index":1522},"span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\format\\parsed.rs","byte_start":339043,"byte_end":339049,"line_start":111,"line_end":111,"column_start":9,"column_end":15},"name":"offset","qualname":"::format::parsed::Parsed::offset","value":"std::option::Option<i32>","parent":{"krate":0,"index":1502},"children":[],"decl_id":null,"docs":" Offset from the local time to UTC, in seconds.\n","sig":null,"attributes":[{"value":"/ Offset from the local time to UTC, in seconds.","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\format\\parsed.rs","byte_start":338984,"byte_end":339034,"line_start":110,"line_end":110,"column_start":5,"column_end":55}}]},{"kind":"Method","id":{"krate":0,"index":962},"span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\format\\parsed.rs","byte_start":339520,"byte_end":339523,"line_start":127,"line_end":127,"column_start":12,"column_end":15},"name":"new","qualname":"<Parsed>::new","value":"fn () -> Parsed","parent":null,"children":[],"decl_id":null,"docs":" Returns the initial value of parsed parts.\n","sig":null,"attributes":[{"value":"/ Returns the initial value of parsed parts.","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\format\\parsed.rs","byte_start":339462,"byte_end":339508,"line_start":126,"line_end":126,"column_start":5,"column_end":51}}]},{"kind":"Method","id":{"krate":0,"index":963},"span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\format\\parsed.rs","byte_start":340058,"byte_end":340066,"line_start":136,"line_end":136,"column_start":12,"column_end":20},"name":"set_year","qualname":"<Parsed>::set_year","value":"fn (&mut self, value: i64) -> ParseResult<()>","parent":null,"children":[],"decl_id":null,"docs":" Tries to set the [`year`](#structfield.year) field from given value.\n","sig":null,"attributes":[{"value":"/ Tries to set the [`year`](#structfield.year) field from given value.","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\format\\parsed.rs","byte_start":339974,"byte_end":340046,"line_start":135,"line_end":135,"column_start":5,"column_end":77}}]},{"kind":"Method","id":{"krate":0,"index":964},"span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\format\\parsed.rs","byte_start":340306,"byte_end":340322,"line_start":141,"line_end":141,"column_start":12,"column_end":28},"name":"set_year_div_100","qualname":"<Parsed>::set_year_div_100","value":"fn (&mut self, value: i64) -> ParseResult<()>","parent":null,"children":[],"decl_id":null,"docs":" Tries to set the [`year_div_100`](#structfield.year_div_100) field from given value.\n","sig":null,"attributes":[{"value":"/ Tries to set the [`year_div_100`](#structfield.year_div_100) field from given value.","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\format\\parsed.rs","byte_start":340206,"byte_end":340294,"line_start":140,"line_end":140,"column_start":5,"column_end":93}}]},{"kind":"Method","id":{"krate":0,"index":965},"span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\format\\parsed.rs","byte_start":340621,"byte_end":340637,"line_start":147,"line_end":147,"column_start":12,"column_end":28},"name":"set_year_mod_100","qualname":"<Parsed>::set_year_mod_100","value":"fn (&mut self, value: i64) -> ParseResult<()>","parent":null,"children":[],"decl_id":null,"docs":" Tries to set the [`year_mod_100`](#structfield.year_mod_100) field from given value.\n","sig":null,"attributes":[{"value":"/ Tries to set the [`year_mod_100`](#structfield.year_mod_100) field from given value.","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\format\\parsed.rs","byte_start":340521,"byte_end":340609,"line_start":146,"line_end":146,"column_start":5,"column_end":93}}]},{"kind":"Method","id":{"krate":0,"index":966},"span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\format\\parsed.rs","byte_start":340926,"byte_end":340937,"line_start":153,"line_end":153,"column_start":12,"column_end":23},"name":"set_isoyear","qualname":"<Parsed>::set_isoyear","value":"fn (&mut self, value: i64) -> ParseResult<()>","parent":null,"children":[],"decl_id":null,"docs":" Tries to set the [`isoyear`](#structfield.isoyear) field from given value.\n","sig":null,"attributes":[{"value":"/ Tries to set the [`isoyear`](#structfield.isoyear) field from given value.","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\format\\parsed.rs","byte_start":340836,"byte_end":340914,"line_start":152,"line_end":152,"column_start":5,"column_end":83}}]},{"kind":"Method","id":{"krate":0,"index":967},"span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\format\\parsed.rs","byte_start":341186,"byte_end":341205,"line_start":158,"line_end":158,"column_start":12,"column_end":31},"name":"set_isoyear_div_100","qualname":"<Parsed>::set_isoyear_div_100","value":"fn (&mut self, value: i64) -> ParseResult<()>","parent":null,"children":[],"decl_id":null,"docs":" Tries to set the [`isoyear_div_100`](#structfield.isoyear_div_100) field from given value.\n","sig":null,"attributes":[{"value":"/ Tries to set the [`isoyear_div_100`](#structfield.isoyear_div_100) field from given value.","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\format\\parsed.rs","byte_start":341080,"byte_end":341174,"line_start":157,"line_end":157,"column_start":5,"column_end":99}}]},{"kind":"Method","id":{"krate":0,"index":968},"span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\format\\parsed.rs","byte_start":341513,"byte_end":341532,"line_start":164,"line_end":164,"column_start":12,"column_end":31},"name":"set_isoyear_mod_100","qualname":"<Parsed>::set_isoyear_mod_100","value":"fn (&mut self, value: i64) -> ParseResult<()>","parent":null,"children":[],"decl_id":null,"docs":" Tries to set the [`isoyear_mod_100`](#structfield.isoyear_mod_100) field from given value.\n","sig":null,"attributes":[{"value":"/ Tries to set the [`isoyear_mod_100`](#structfield.isoyear_mod_100) field from given value.","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\format\\parsed.rs","byte_start":341407,"byte_end":341501,"line_start":163,"line_end":163,"column_start":5,"column_end":99}}]},{"kind":"Method","id":{"krate":0,"index":969},"span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\format\\parsed.rs","byte_start":341820,"byte_end":341829,"line_start":170,"line_end":170,"column_start":12,"column_end":21},"name":"set_month","qualname":"<Parsed>::set_month","value":"fn (&mut self, value: i64) -> ParseResult<()>","parent":null,"children":[],"decl_id":null,"docs":" Tries to set the [`month`](#structfield.month) field from given value.\n","sig":null,"attributes":[{"value":"/ Tries to set the [`month`](#structfield.month) field from given value.","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\format\\parsed.rs","byte_start":341734,"byte_end":341808,"line_start":169,"line_end":169,"column_start":5,"column_end":79}}]},{"kind":"Method","id":{"krate":0,"index":970},"span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\format\\parsed.rs","byte_start":342072,"byte_end":342089,"line_start":175,"line_end":175,"column_start":12,"column_end":29},"name":"set_week_from_sun","qualname":"<Parsed>::set_week_from_sun","value":"fn (&mut self, value: i64) -> ParseResult<()>","parent":null,"children":[],"decl_id":null,"docs":" Tries to set the [`week_from_sun`](#structfield.week_from_sun) field from given value.\n","sig":null,"attributes":[{"value":"/ Tries to set the [`week_from_sun`](#structfield.week_from_sun) field from given value.","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\format\\parsed.rs","byte_start":341970,"byte_end":342060,"line_start":174,"line_end":174,"column_start":5,"column_end":95}}]},{"kind":"Method","id":{"krate":0,"index":971},"span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\format\\parsed.rs","byte_start":342340,"byte_end":342357,"line_start":180,"line_end":180,"column_start":12,"column_end":29},"name":"set_week_from_mon","qualname":"<Parsed>::set_week_from_mon","value":"fn (&mut self, value: i64) -> ParseResult<()>","parent":null,"children":[],"decl_id":null,"docs":" Tries to set the [`week_from_mon`](#structfield.week_from_mon) field from given value.\n","sig":null,"attributes":[{"value":"/ Tries to set the [`week_from_mon`](#structfield.week_from_mon) field from given value.","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\format\\parsed.rs","byte_start":342238,"byte_end":342328,"line_start":179,"line_end":179,"column_start":5,"column_end":95}}]},{"kind":"Method","id":{"krate":0,"index":972},"span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\format\\parsed.rs","byte_start":342596,"byte_end":342607,"line_start":185,"line_end":185,"column_start":12,"column_end":23},"name":"set_isoweek","qualname":"<Parsed>::set_isoweek","value":"fn (&mut self, value: i64) -> ParseResult<()>","parent":null,"children":[],"decl_id":null,"docs":" Tries to set the [`isoweek`](#structfield.isoweek) field from given value.\n","sig":null,"attributes":[{"value":"/ Tries to set the [`isoweek`](#structfield.isoweek) field from given value.","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\format\\parsed.rs","byte_start":342506,"byte_end":342584,"line_start":184,"line_end":184,"column_start":5,"column_end":83}}]},{"kind":"Method","id":{"krate":0,"index":973},"span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\format\\parsed.rs","byte_start":342840,"byte_end":342851,"line_start":190,"line_end":190,"column_start":12,"column_end":23},"name":"set_weekday","qualname":"<Parsed>::set_weekday","value":"fn (&mut self, value: Weekday) -> ParseResult<()>","parent":null,"children":[],"decl_id":null,"docs":" Tries to set the [`weekday`](#structfield.weekday) field from given value.\n","sig":null,"attributes":[{"value":"/ Tries to set the [`weekday`](#structfield.weekday) field from given value.","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\format\\parsed.rs","byte_start":342750,"byte_end":342828,"line_start":189,"line_end":189,"column_start":5,"column_end":83}}]},{"kind":"Method","id":{"krate":0,"index":974},"span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\format\\parsed.rs","byte_start":343053,"byte_end":343064,"line_start":195,"line_end":195,"column_start":12,"column_end":23},"name":"set_ordinal","qualname":"<Parsed>::set_ordinal","value":"fn (&mut self, value: i64) -> ParseResult<()>","parent":null,"children":[],"decl_id":null,"docs":" Tries to set the [`ordinal`](#structfield.ordinal) field from given value.\n","sig":null,"attributes":[{"value":"/ Tries to set the [`ordinal`](#structfield.ordinal) field from given value.","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\format\\parsed.rs","byte_start":342963,"byte_end":343041,"line_start":194,"line_end":194,"column_start":5,"column_end":83}}]},{"kind":"Method","id":{"krate":0,"index":975},"span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\format\\parsed.rs","byte_start":343289,"byte_end":343296,"line_start":200,"line_end":200,"column_start":12,"column_end":19},"name":"set_day","qualname":"<Parsed>::set_day","value":"fn (&mut self, value: i64) -> ParseResult<()>","parent":null,"children":[],"decl_id":null,"docs":" Tries to set the [`day`](#structfield.day) field from given value.\n","sig":null,"attributes":[{"value":"/ Tries to set the [`day`](#structfield.day) field from given value.","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\format\\parsed.rs","byte_start":343207,"byte_end":343277,"line_start":199,"line_end":199,"column_start":5,"column_end":75}}]},{"kind":"Method","id":{"krate":0,"index":976},"span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\format\\parsed.rs","byte_start":343573,"byte_end":343581,"line_start":206,"line_end":206,"column_start":12,"column_end":20},"name":"set_ampm","qualname":"<Parsed>::set_ampm","value":"fn (&mut self, value: bool) -> ParseResult<()>","parent":null,"children":[],"decl_id":null,"docs":" Tries to set the [`hour_div_12`](#structfield.hour_div_12) field from given value.\n (`false` for AM, `true` for PM)\n","sig":null,"attributes":[{"value":"/ Tries to set the [`hour_div_12`](#structfield.hour_div_12) field from given value.","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\format\\parsed.rs","byte_start":343435,"byte_end":343521,"line_start":204,"line_end":204,"column_start":5,"column_end":91}},{"value":"/ (`false` for AM, `true` for PM)","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\format\\parsed.rs","byte_start":343526,"byte_end":343561,"line_start":205,"line_end":205,"column_start":5,"column_end":40}}]},{"kind":"Method","id":{"krate":0,"index":977},"span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\format\\parsed.rs","byte_start":343840,"byte_end":343850,"line_start":212,"line_end":212,"column_start":12,"column_end":22},"name":"set_hour12","qualname":"<Parsed>::set_hour12","value":"fn (&mut self, value: i64) -> ParseResult<()>","parent":null,"children":[],"decl_id":null,"docs":" Tries to set the [`hour_mod_12`](#structfield.hour_mod_12) field from\n given hour number in 12-hour clocks.\n","sig":null,"attributes":[{"value":"/ Tries to set the [`hour_mod_12`](#structfield.hour_mod_12) field from","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\format\\parsed.rs","byte_start":343710,"byte_end":343783,"line_start":210,"line_end":210,"column_start":5,"column_end":78}},{"value":"/ given hour number in 12-hour clocks.","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\format\\parsed.rs","byte_start":343788,"byte_end":343828,"line_start":211,"line_end":211,"column_start":5,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":978},"span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\format\\parsed.rs","byte_start":344193,"byte_end":344201,"line_start":219,"line_end":219,"column_start":12,"column_end":20},"name":"set_hour","qualname":"<Parsed>::set_hour","value":"fn (&mut self, value: i64) -> ParseResult<()>","parent":null,"children":[],"decl_id":null,"docs":" Tries to set both [`hour_div_12`](#structfield.hour_div_12) and\n [`hour_mod_12`](#structfield.hour_mod_12) fields from given value.\n","sig":null,"attributes":[{"value":"/ Tries to set both [`hour_div_12`](#structfield.hour_div_12) and","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\format\\parsed.rs","byte_start":344039,"byte_end":344106,"line_start":217,"line_end":217,"column_start":5,"column_end":72}},{"value":"/ [`hour_mod_12`](#structfield.hour_mod_12) fields from given value.","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\format\\parsed.rs","byte_start":344111,"byte_end":344181,"line_start":218,"line_end":218,"column_start":5,"column_end":75}}]},{"kind":"Method","id":{"krate":0,"index":979},"span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\format\\parsed.rs","byte_start":344546,"byte_end":344556,"line_start":227,"line_end":227,"column_start":12,"column_end":22},"name":"set_minute","qualname":"<Parsed>::set_minute","value":"fn (&mut self, value: i64) -> ParseResult<()>","parent":null,"children":[],"decl_id":null,"docs":" Tries to set the [`minute`](#structfield.minute) field from given value.\n","sig":null,"attributes":[{"value":"/ Tries to set the [`minute`](#structfield.minute) field from given value.","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\format\\parsed.rs","byte_start":344458,"byte_end":344534,"line_start":226,"line_end":226,"column_start":5,"column_end":81}}]},{"kind":"Method","id":{"krate":0,"index":980},"span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\format\\parsed.rs","byte_start":344786,"byte_end":344796,"line_start":232,"line_end":232,"column_start":12,"column_end":22},"name":"set_second","qualname":"<Parsed>::set_second","value":"fn (&mut self, value: i64) -> ParseResult<()>","parent":null,"children":[],"decl_id":null,"docs":" Tries to set the [`second`](#structfield.second) field from given value.\n","sig":null,"attributes":[{"value":"/ Tries to set the [`second`](#structfield.second) field from given value.","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\format\\parsed.rs","byte_start":344698,"byte_end":344774,"line_start":231,"line_end":231,"column_start":5,"column_end":81}}]},{"kind":"Method","id":{"krate":0,"index":981},"span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\format\\parsed.rs","byte_start":345034,"byte_end":345048,"line_start":237,"line_end":237,"column_start":12,"column_end":26},"name":"set_nanosecond","qualname":"<Parsed>::set_nanosecond","value":"fn (&mut self, value: i64) -> ParseResult<()>","parent":null,"children":[],"decl_id":null,"docs":" Tries to set the [`nanosecond`](#structfield.nanosecond) field from given value.\n","sig":null,"attributes":[{"value":"/ Tries to set the [`nanosecond`](#structfield.nanosecond) field from given value.","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\format\\parsed.rs","byte_start":344938,"byte_end":345022,"line_start":236,"line_end":236,"column_start":5,"column_end":89}}]},{"kind":"Method","id":{"krate":0,"index":982},"span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\format\\parsed.rs","byte_start":345288,"byte_end":345301,"line_start":242,"line_end":242,"column_start":12,"column_end":25},"name":"set_timestamp","qualname":"<Parsed>::set_timestamp","value":"fn (&mut self, value: i64) -> ParseResult<()>","parent":null,"children":[],"decl_id":null,"docs":" Tries to set the [`timestamp`](#structfield.timestamp) field from given value.\n","sig":null,"attributes":[{"value":"/ Tries to set the [`timestamp`](#structfield.timestamp) field from given value.","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\format\\parsed.rs","byte_start":345194,"byte_end":345276,"line_start":241,"line_end":241,"column_start":5,"column_end":87}}]},{"kind":"Method","id":{"krate":0,"index":983},"span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\format\\parsed.rs","byte_start":345499,"byte_end":345509,"line_start":247,"line_end":247,"column_start":12,"column_end":22},"name":"set_offset","qualname":"<Parsed>::set_offset","value":"fn (&mut self, value: i64) -> ParseResult<()>","parent":null,"children":[],"decl_id":null,"docs":" Tries to set the [`offset`](#structfield.offset) field from given value.\n","sig":null,"attributes":[{"value":"/ Tries to set the [`offset`](#structfield.offset) field from given value.","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\format\\parsed.rs","byte_start":345411,"byte_end":345487,"line_start":246,"line_end":246,"column_start":5,"column_end":81}}]},{"kind":"Method","id":{"krate":0,"index":984},"span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\format\\parsed.rs","byte_start":346158,"byte_end":346171,"line_start":262,"line_end":262,"column_start":12,"column_end":25},"name":"to_naive_date","qualname":"<Parsed>::to_naive_date","value":"fn (&self) -> ParseResult<NaiveDate>","parent":null,"children":[],"decl_id":null,"docs":" Returns a parsed naive date out of given fields.","sig":null,"attributes":[{"value":"/ Returns a parsed naive date out of given fields.","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\format\\parsed.rs","byte_start":345651,"byte_end":345703,"line_start":251,"line_end":251,"column_start":5,"column_end":57}},{"value":"/","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\format\\parsed.rs","byte_start":345708,"byte_end":345711,"line_start":252,"line_end":252,"column_start":5,"column_end":8}},{"value":"/ This method is able to determine the date from given subset of fields:","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\format\\parsed.rs","byte_start":345716,"byte_end":345790,"line_start":253,"line_end":253,"column_start":5,"column_end":79}},{"value":"/","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\format\\parsed.rs","byte_start":345795,"byte_end":345798,"line_start":254,"line_end":254,"column_start":5,"column_end":8}},{"value":"/ - Year, month, day.","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\format\\parsed.rs","byte_start":345803,"byte_end":345826,"line_start":255,"line_end":255,"column_start":5,"column_end":28}},{"value":"/ - Year, day of the year (ordinal).","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\format\\parsed.rs","byte_start":345831,"byte_end":345869,"line_start":256,"line_end":256,"column_start":5,"column_end":43}},{"value":"/ - Year, week number counted from Sunday or Monday, day of the week.","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\format\\parsed.rs","byte_start":345874,"byte_end":345945,"line_start":257,"line_end":257,"column_start":5,"column_end":76}},{"value":"/ - ISO week date.","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\format\\parsed.rs","byte_start":345950,"byte_end":345970,"line_start":258,"line_end":258,"column_start":5,"column_end":25}},{"value":"/","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\format\\parsed.rs","byte_start":345975,"byte_end":345978,"line_start":259,"line_end":259,"column_start":5,"column_end":8}},{"value":"/ Gregorian year and ISO week date year can have their century number (`*_div_100`) omitted,","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\format\\parsed.rs","byte_start":345983,"byte_end":346077,"line_start":260,"line_end":260,"column_start":5,"column_end":99}},{"value":"/ the two-digit year is used to guess the century number then.","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\format\\parsed.rs","byte_start":346082,"byte_end":346146,"line_start":261,"line_end":261,"column_start":5,"column_end":69}}]},{"kind":"Method","id":{"krate":0,"index":992},"span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\format\\parsed.rs","byte_start":355087,"byte_end":355100,"line_start":444,"line_end":444,"column_start":12,"column_end":25},"name":"to_naive_time","qualname":"<Parsed>::to_naive_time","value":"fn (&self) -> ParseResult<NaiveTime>","parent":null,"children":[],"decl_id":null,"docs":" Returns a parsed naive time out of given fields.","sig":null,"attributes":[{"value":"/ Returns a parsed naive time out of given fields.","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\format\\parsed.rs","byte_start":354684,"byte_end":354736,"line_start":435,"line_end":435,"column_start":5,"column_end":57}},{"value":"/","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\format\\parsed.rs","byte_start":354741,"byte_end":354744,"line_start":436,"line_end":436,"column_start":5,"column_end":8}},{"value":"/ This method is able to determine the time from given subset of fields:","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\format\\parsed.rs","byte_start":354749,"byte_end":354823,"line_start":437,"line_end":437,"column_start":5,"column_end":79}},{"value":"/","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\format\\parsed.rs","byte_start":354828,"byte_end":354831,"line_start":438,"line_end":438,"column_start":5,"column_end":8}},{"value":"/ - Hour, minute. (second and nanosecond assumed to be 0)","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\format\\parsed.rs","byte_start":354836,"byte_end":354895,"line_start":439,"line_end":439,"column_start":5,"column_end":64}},{"value":"/ - Hour, minute, second. (nanosecond assumed to be 0)","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\format\\parsed.rs","byte_start":354900,"byte_end":354956,"line_start":440,"line_end":440,"column_start":5,"column_end":61}},{"value":"/ - Hour, minute, second, nanosecond.","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\format\\parsed.rs","byte_start":354961,"byte_end":355000,"line_start":441,"line_end":441,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\format\\parsed.rs","byte_start":355005,"byte_end":355008,"line_start":442,"line_end":442,"column_start":5,"column_end":8}},{"value":"/ It is able to handle leap seconds when given second is 60.","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\format\\parsed.rs","byte_start":355013,"byte_end":355075,"line_start":443,"line_end":443,"column_start":5,"column_end":67}}]},{"kind":"Method","id":{"krate":0,"index":993},"span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\format\\parsed.rs","byte_start":356883,"byte_end":356912,"line_start":486,"line_end":486,"column_start":12,"column_end":41},"name":"to_naive_datetime_with_offset","qualname":"<Parsed>::to_naive_datetime_with_offset","value":"fn (&self, offset: i32) -> ParseResult<NaiveDateTime>","parent":null,"children":[],"decl_id":null,"docs":" Returns a parsed naive date and time out of given fields,\n except for the [`offset`](#structfield.offset) field (assumed to have a given value).\n This is required for parsing a local time or other known-timezone inputs.","sig":null,"attributes":[{"value":"/ Returns a parsed naive date and time out of given fields,","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\format\\parsed.rs","byte_start":356398,"byte_end":356459,"line_start":479,"line_end":479,"column_start":5,"column_end":66}},{"value":"/ except for the [`offset`](#structfield.offset) field (assumed to have a given value).","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\format\\parsed.rs","byte_start":356464,"byte_end":356553,"line_start":480,"line_end":480,"column_start":5,"column_end":94}},{"value":"/ This is required for parsing a local time or other known-timezone inputs.","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\format\\parsed.rs","byte_start":356558,"byte_end":356635,"line_start":481,"line_end":481,"column_start":5,"column_end":82}},{"value":"/","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\format\\parsed.rs","byte_start":356640,"byte_end":356643,"line_start":482,"line_end":482,"column_start":5,"column_end":8}},{"value":"/ This method is able to determine the combined date and time","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\format\\parsed.rs","byte_start":356648,"byte_end":356711,"line_start":483,"line_end":483,"column_start":5,"column_end":68}},{"value":"/ from date and time fields or a single [`timestamp`](#structfield.timestamp) field.","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\format\\parsed.rs","byte_start":356716,"byte_end":356802,"line_start":484,"line_end":484,"column_start":5,"column_end":91}},{"value":"/ Either way those fields have to be consistent to each other.","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\format\\parsed.rs","byte_start":356807,"byte_end":356871,"line_start":485,"line_end":485,"column_start":5,"column_end":69}}]},{"kind":"Method","id":{"krate":0,"index":998},"span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\format\\parsed.rs","byte_start":360404,"byte_end":360419,"line_start":557,"line_end":557,"column_start":12,"column_end":27},"name":"to_fixed_offset","qualname":"<Parsed>::to_fixed_offset","value":"fn (&self) -> ParseResult<FixedOffset>","parent":null,"children":[],"decl_id":null,"docs":" Returns a parsed fixed time zone offset out of given fields.\n","sig":null,"attributes":[{"value":"/ Returns a parsed fixed time zone offset out of given fields.","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\format\\parsed.rs","byte_start":360328,"byte_end":360392,"line_start":556,"line_end":556,"column_start":5,"column_end":69}}]},{"kind":"Method","id":{"krate":0,"index":1000},"span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\format\\parsed.rs","byte_start":360908,"byte_end":360919,"line_start":567,"line_end":567,"column_start":12,"column_end":23},"name":"to_datetime","qualname":"<Parsed>::to_datetime","value":"fn (&self) -> ParseResult<DateTime<FixedOffset>>","parent":null,"children":[],"decl_id":null,"docs":" Returns a parsed timezone-aware date and time out of given fields.","sig":null,"attributes":[{"value":"/ Returns a parsed timezone-aware date and time out of given fields.","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\format\\parsed.rs","byte_start":360557,"byte_end":360627,"line_start":561,"line_end":561,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\format\\parsed.rs","byte_start":360632,"byte_end":360635,"line_start":562,"line_end":562,"column_start":5,"column_end":8}},{"value":"/ This method is able to determine the combined date and time","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\format\\parsed.rs","byte_start":360640,"byte_end":360703,"line_start":563,"line_end":563,"column_start":5,"column_end":68}},{"value":"/ from date and time fields or a single [`timestamp`](#structfield.timestamp) field,","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\format\\parsed.rs","byte_start":360708,"byte_end":360794,"line_start":564,"line_end":564,"column_start":5,"column_end":91}},{"value":"/ plus a time zone offset.","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\format\\parsed.rs","byte_start":360799,"byte_end":360827,"line_start":565,"line_end":565,"column_start":5,"column_end":33}},{"value":"/ Either way those fields have to be consistent to each other.","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\format\\parsed.rs","byte_start":360832,"byte_end":360896,"line_start":566,"line_end":566,"column_start":5,"column_end":69}}]},{"kind":"Method","id":{"krate":0,"index":1001},"span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\format\\parsed.rs","byte_start":361962,"byte_end":361987,"line_start":587,"line_end":587,"column_start":12,"column_end":37},"name":"to_datetime_with_timezone","qualname":"<Parsed>::to_datetime_with_timezone","value":"fn <Tz> (&self, tz: &Tz) -> ParseResult<DateTime<Tz>>","parent":null,"children":[],"decl_id":null,"docs":" Returns a parsed timezone-aware date and time out of given fields,\n with an additional `TimeZone` used to interpret and validate the local date.","sig":null,"attributes":[{"value":"/ Returns a parsed timezone-aware date and time out of given fields,","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\format\\parsed.rs","byte_start":361405,"byte_end":361475,"line_start":578,"line_end":578,"column_start":5,"column_end":75}},{"value":"/ with an additional `TimeZone` used to interpret and validate the local date.","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\format\\parsed.rs","byte_start":361480,"byte_end":361560,"line_start":579,"line_end":579,"column_start":5,"column_end":85}},{"value":"/","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\format\\parsed.rs","byte_start":361565,"byte_end":361568,"line_start":580,"line_end":580,"column_start":5,"column_end":8}},{"value":"/ This method is able to determine the combined date and time","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\format\\parsed.rs","byte_start":361573,"byte_end":361636,"line_start":581,"line_end":581,"column_start":5,"column_end":68}},{"value":"/ from date and time fields or a single [`timestamp`](#structfield.timestamp) field,","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\format\\parsed.rs","byte_start":361641,"byte_end":361727,"line_start":582,"line_end":582,"column_start":5,"column_end":91}},{"value":"/ plus a time zone offset.","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\format\\parsed.rs","byte_start":361732,"byte_end":361760,"line_start":583,"line_end":583,"column_start":5,"column_end":33}},{"value":"/ Either way those fields have to be consistent to each other.","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\format\\parsed.rs","byte_start":361765,"byte_end":361829,"line_start":584,"line_end":584,"column_start":5,"column_end":69}},{"value":"/ If parsed fields include an UTC offset, it also has to be consistent to","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\format\\parsed.rs","byte_start":361834,"byte_end":361909,"line_start":585,"line_end":585,"column_start":5,"column_end":80}},{"value":"/ [`offset`](#structfield.offset).","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\format\\parsed.rs","byte_start":361914,"byte_end":361950,"line_start":586,"line_end":586,"column_start":5,"column_end":41}}]},{"kind":"Function","id":{"krate":0,"index":1060},"span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\format\\parse.rs","byte_start":407990,"byte_end":407995,"line_start":208,"line_end":208,"column_start":8,"column_end":13},"name":"parse","qualname":"::format::parse::parse","value":"fn <'a, I> (parsed: &mut Parsed, mut s: &str, items: I) -> ParseResult<()>","parent":null,"children":[],"decl_id":null,"docs":" Tries to parse given string into `parsed` with given formatting items.\n Returns `Ok` when the entire string has been parsed (otherwise `parsed` should not be used).\n There should be no trailing string after parsing;\n use a stray [`Item::Space`](./enum.Item.html#variant.Space) to trim whitespaces.","sig":null,"attributes":[{"value":"/ Tries to parse given string into `parsed` with given formatting items.","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\format\\parse.rs","byte_start":407087,"byte_end":407161,"line_start":192,"line_end":192,"column_start":1,"column_end":75}},{"value":"/ Returns `Ok` when the entire string has been parsed (otherwise `parsed` should not be used).","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\format\\parse.rs","byte_start":407162,"byte_end":407258,"line_start":193,"line_end":193,"column_start":1,"column_end":97}},{"value":"/ There should be no trailing string after parsing;","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\format\\parse.rs","byte_start":407259,"byte_end":407312,"line_start":194,"line_end":194,"column_start":1,"column_end":54}},{"value":"/ use a stray [`Item::Space`](./enum.Item.html#variant.Space) to trim whitespaces.","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\format\\parse.rs","byte_start":407313,"byte_end":407397,"line_start":195,"line_end":195,"column_start":1,"column_end":85}},{"value":"/","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\format\\parse.rs","byte_start":407398,"byte_end":407401,"line_start":196,"line_end":196,"column_start":1,"column_end":4}},{"value":"/ This particular date and time parser is:","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\format\\parse.rs","byte_start":407402,"byte_end":407446,"line_start":197,"line_end":197,"column_start":1,"column_end":45}},{"value":"/","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\format\\parse.rs","byte_start":407447,"byte_end":407450,"line_start":198,"line_end":198,"column_start":1,"column_end":4}},{"value":"/ - Greedy. It will consume the longest possible prefix.","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\format\\parse.rs","byte_start":407451,"byte_end":407509,"line_start":199,"line_end":199,"column_start":1,"column_end":59}},{"value":"/   For example, `April` is always consumed entirely when the long month name is requested;","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\format\\parse.rs","byte_start":407510,"byte_end":407603,"line_start":200,"line_end":200,"column_start":1,"column_end":94}},{"value":"/   it equally accepts `Apr`, but prefers the longer prefix in this case.","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\format\\parse.rs","byte_start":407604,"byte_end":407679,"line_start":201,"line_end":201,"column_start":1,"column_end":76}},{"value":"/","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\format\\parse.rs","byte_start":407680,"byte_end":407683,"line_start":202,"line_end":202,"column_start":1,"column_end":4}},{"value":"/ - Padding-agnostic (for numeric items).","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\format\\parse.rs","byte_start":407684,"byte_end":407727,"line_start":203,"line_end":203,"column_start":1,"column_end":44}},{"value":"/   The [`Pad`](./enum.Pad.html) field is completely ignored,","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\format\\parse.rs","byte_start":407728,"byte_end":407791,"line_start":204,"line_end":204,"column_start":1,"column_end":64}},{"value":"/   so one can prepend any number of whitespace then any number of zeroes before numbers.","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\format\\parse.rs","byte_start":407792,"byte_end":407883,"line_start":205,"line_end":205,"column_start":1,"column_end":92}},{"value":"/","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\format\\parse.rs","byte_start":407884,"byte_end":407887,"line_start":206,"line_end":206,"column_start":1,"column_end":4}},{"value":"/ - (Still) obeying the intrinsic parsing width. This allows, for example, parsing `HHMMSS`.","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\format\\parse.rs","byte_start":407888,"byte_end":407982,"line_start":207,"line_end":207,"column_start":1,"column_end":95}}]},{"kind":"Mod","id":{"krate":0,"index":1066},"span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\format\\strftime.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"strftime","qualname":"::format::strftime","value":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\format\\strftime.rs","parent":null,"children":[{"krate":0,"index":1067},{"krate":0,"index":1534},{"krate":0,"index":1538},{"krate":0,"index":1072},{"krate":0,"index":1077}],"decl_id":null,"docs":"`strftime`/`strptime`-inspired date and time formatting syntax.","sig":null,"attributes":[{"value":"!\n`strftime`/`strptime`-inspired date and time formatting syntax.\n\n## Specifiers\n\nThe following specifiers are available both to formatting and parsing.\n\nSpec. | Example       | Description\n----- | ------------- | -----------\n      |               | **DATE SPECIFIERS:**\n`%Y`  | `2001`        | The full proleptic Gregorian year, zero-padded to 4 digits. [1]\n`%C`  | `20`          | The proleptic Gregorian year divided by 100, zero-padded to 2 digits. [2]\n`%y`  | `01`          | The proleptic Gregorian year modulo 100, zero-padded to 2 digits. [2]\n      |               |\n`%m`  | `07`          | Month number (01--12), zero-padded to 2 digits.\n`%b`  | `Jul`         | Abbreviated month name. Always 3 letters.\n`%B`  | `July`        | Full month name. Also accepts corresponding abbreviation in parsing.\n`%h`  | `Jul`         | Same to `%b`.\n      |               |\n`%d`  | `08`          | Day number (01--31), zero-padded to 2 digits.\n`%e`  | ` 8`          | Same to `%d` but space-padded. Same to `%_d`.\n      |               |\n`%a`  | `Sun`         | Abbreviated weekday name. Always 3 letters.\n`%A`  | `Sunday`      | Full weekday name. Also accepts corresponding abbreviation in parsing.\n`%w`  | `0`           | Sunday = 0, Monday = 1, ..., Saturday = 6.\n`%u`  | `7`           | Monday = 1, Tuesday = 2, ..., Sunday = 7. (ISO 8601)\n      |               |\n`%U`  | `28`          | Week number starting with Sunday (00--53), zero-padded to 2 digits. [3]\n`%W`  | `27`          | Same to `%U`, but week 1 starts with the first Monday in that year instead.\n      |               |\n`%G`  | `2001`        | Same to `%Y` but uses the year number in ISO 8601 week date. [4]\n`%g`  | `01`          | Same to `%y` but uses the year number in ISO 8601 week date. [4]\n`%V`  | `27`          | Same to `%U` but uses the week number in ISO 8601 week date (01--53). [4]\n      |               |\n`%j`  | `189`         | Day of the year (001--366), zero-padded to 3 digits.\n      |               |\n`%D`  | `07/08/01`    | Month-day-year format. Same to `%m/%d/%y`.\n`%x`  | `07/08/01`    | Same to `%D`.\n`%F`  | `2001-07-08`  | Year-month-day format (ISO 8601). Same to `%Y-%m-%d`.\n`%v`  | ` 8-Jul-2001` | Day-month-year format. Same to `%e-%b-%Y`.\n      |               |\n      |               | **TIME SPECIFIERS:**\n`%H`  | `00`          | Hour number (00--23), zero-padded to 2 digits.\n`%k`  | ` 0`          | Same to `%H` but space-padded. Same to `%_H`.\n`%I`  | `12`          | Hour number in 12-hour clocks (01--12), zero-padded to 2 digits.\n`%l`  | `12`          | Same to `%I` but space-padded. Same to `%_I`.\n      |               |\n`%P`  | `am`          | `am` or `pm` in 12-hour clocks.\n`%p`  | `AM`          | `AM` or `PM` in 12-hour clocks.\n      |               |\n`%M`  | `34`          | Minute number (00--59), zero-padded to 2 digits.\n`%S`  | `60`          | Second number (00--60), zero-padded to 2 digits. [5]\n`%f`  | `026490000`   | The fractional seconds (in nanoseconds) since last whole second. [8]\n`%.f` | `.026490`     | Similar to `.%f` but left-aligned. [8]\n`%.3f`| `.026`        | Similar to `.%f` but left-aligned but fixed to a length of 3. [8]\n`%.6f`| `.026490`     | Similar to `.%f` but left-aligned but fixed to a length of 6. [8]\n`%.9f`| `.026490000`  | Similar to `.%f` but left-aligned but fixed to a length of 9. [8]\n      |               |\n`%R`  | `00:34`       | Hour-minute format. Same to `%H:%M`.\n`%T`  | `00:34:60`    | Hour-minute-second format. Same to `%H:%M:%S`.\n`%X`  | `00:34:60`    | Same to `%T`.\n`%r`  | `12:34:60 AM` | Hour-minute-second format in 12-hour clocks. Same to `%I:%M:%S %p`.\n      |               |\n      |               | **TIME ZONE SPECIFIERS:**\n`%Z`  | `ACST`        | *Formatting only:* Local time zone name.\n`%z`  | `+0930`       | Offset from the local time to UTC (with UTC being `+0000`).\n`%:z` | `+09:30`      | Same to `%z` but with a colon.\n      |               |\n      |               | **DATE & TIME SPECIFIERS:**\n`%c`  | `Sun Jul  8 00:34:60 2001` | `ctime` date & time format. Same to `%a %b %e %T %Y` sans `\\n`.\n`%+`  | `2001-07-08T00:34:60.026490+09:30` | ISO 8601 / RFC 3339 date & time format. [6]\n      |               |\n`%s`  | `994518299`   | UNIX timestamp, the number of seconds since 1970-01-01 00:00 UTC. [7]\n      |               |\n      |               | **SPECIAL SPECIFIERS:**\n`%t`  |               | Literal tab (`\\t`).\n`%n`  |               | Literal newline (`\\n`).\n`%%`  |               | Literal percent sign.\n\nIt is possible to override the default padding behavior of numeric specifiers `%?`.\nThis is not allowed for other specifiers and will result in the `BAD_FORMAT` error.\n\nModifier | Description\n-------- | -----------\n`%-?`    | Suppresses any padding including spaces and zeroes. (e.g. `%j` = `012`, `%-j` = `12`)\n`%_?`    | Uses spaces as a padding. (e.g. `%j` = `012`, `%_j` = ` 12`)\n`%0?`    | Uses zeroes as a padding. (e.g. `%e` = ` 9`, `%0e` = `09`)\n\nNotes:\n\n1. `%Y`:\n   Negative years are allowed in formatting but not in parsing.\n\n2. `%C`, `%y`:\n   This is floor division, so 100 BCE (year number -99) will print `-1` and `99` respectively.\n\n3. `%U`:\n   Week 1 starts with the first Sunday in that year.\n   It is possible to have week 0 for days before the first Sunday.\n\n4. `%G`, `%g`, `%V`:\n   Week 1 is the first week with at least 4 days in that year.\n   Week 0 does not exist, so this should be used with `%G` or `%g`.\n\n5. `%S`:\n   It accounts for leap seconds, so `60` is possible.\n\n6. `%+`:\n   Same to `%Y-%m-%dT%H:%M:%S%.f%:z`,\n   i.e. 0, 3, 6 or 9 fractional digits for seconds and colons in the time zone offset.\n\n   The typical `strftime` implementations have\n   different (and locale-dependent) formats for this specifier.\n   While Chrono's format for `%+` is far more stable,\n   it is best to avoid this specifier if you want to control the exact output.\n\n7. `%s`:\n   This is not padded and can be negative.\n   For the purpose of Chrono, it only accounts for non-leap seconds\n   so it slightly differs from ISO C `strftime` behavior.\n\n8. `%f`, `%.f`, `%.3f`, `%.6f`, `%.9f`:\n\n   The default `%f` is right-aligned and always zero-padded to 9 digits\n   for the compatibility with glibc and others,\n   so it always counts the number of nanoseconds since the last whole second.\n   E.g. 7ms after the last second will print `007000000`,\n   and parsing `7000000` will yield the same.\n\n   The variant `%.f` is left-aligned and print 0, 3, 6 or 9 fractional digits\n   according to the precision.\n   E.g. 70ms after the last second under `%.f` will print `.070` (note: not `.07`),\n   and parsing `.07`, `.070000` etc. will yield the same.\n   Note that they can print or read nothing if the fractional part is zero or\n   the next character is not `.`.\n\n   The variant `%.3f`, `%.6f` and `%.9f` are left-aligned and print 3, 6 or 9 fractional digits\n   according to the number preceding `f`.\n   E.g. 70ms after the last second under `%.3f` will print `.070` (note: not `.07`),\n   and parsing `.07`, `.070000` etc. will yield the same.\n   Note that they can read nothing if the fractional part is zero or\n   the next character is not `.` however will print with the specified length.\n\n*/","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\format\\strftime.rs","byte_start":433051,"byte_end":440245,"line_start":5,"line_end":148,"column_start":1,"column_end":3}}]},{"kind":"Struct","id":{"krate":0,"index":1534},"span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\format\\strftime.rs","byte_start":440373,"byte_end":440386,"line_start":154,"line_end":154,"column_start":12,"column_end":25},"name":"StrftimeItems","qualname":"::format::strftime::StrftimeItems","value":"StrftimeItems {  }","parent":null,"children":[{"krate":0,"index":1536},{"krate":0,"index":1537}],"decl_id":null,"docs":" Parsing iterator for `strftime`-like format strings.\n","sig":null,"attributes":[{"value":"/ Parsing iterator for `strftime`-like format strings.","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\format\\strftime.rs","byte_start":440288,"byte_end":440344,"line_start":152,"line_end":152,"column_start":1,"column_end":57}}]},{"kind":"Method","id":{"krate":0,"index":1074},"span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\format\\strftime.rs","byte_start":440862,"byte_end":440865,"line_start":165,"line_end":165,"column_start":12,"column_end":15},"name":"new","qualname":"<StrftimeItems>::new","value":"fn (s: &'a str) -> StrftimeItems<'a>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new parsing iterator from the `strftime`-like format string.\n","sig":null,"attributes":[{"value":"/ Creates a new parsing iterator from the `strftime`-like format string.","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\format\\strftime.rs","byte_start":440776,"byte_end":440850,"line_start":164,"line_end":164,"column_start":5,"column_end":79}}]},{"kind":"Struct","id":{"krate":0,"index":1550},"span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\format\\mod.rs","byte_start":333573,"byte_end":333586,"line_start":450,"line_end":450,"column_start":12,"column_end":25},"name":"DelayedFormat","qualname":"::format::DelayedFormat","value":"DelayedFormat {  }","parent":null,"children":[{"krate":0,"index":1552},{"krate":0,"index":1553},{"krate":0,"index":1554},{"krate":0,"index":1555}],"decl_id":null,"docs":" A *temporary* object which can be used as an argument to `format!` or others.\n This is normally constructed via `format` methods of each date and time type.\n","sig":null,"attributes":[{"value":"/ A *temporary* object which can be used as an argument to `format!` or others.","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\format\\mod.rs","byte_start":333381,"byte_end":333462,"line_start":447,"line_end":447,"column_start":1,"column_end":82}},{"value":"/ This is normally constructed via `format` methods of each date and time type.","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\format\\mod.rs","byte_start":333463,"byte_end":333544,"line_start":448,"line_end":448,"column_start":1,"column_end":82}}]},{"kind":"Method","id":{"krate":0,"index":1088},"span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\format\\mod.rs","byte_start":334039,"byte_end":334042,"line_start":463,"line_end":463,"column_start":12,"column_end":15},"name":"new","qualname":"<DelayedFormat<I>>::new","value":"fn (date: Option<NaiveDate>, time: Option<NaiveTime>, items: I) -> DelayedFormat<I>","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `DelayedFormat` value out of local date and time.\n","sig":null,"attributes":[{"value":"/ Makes a new `DelayedFormat` value out of local date and time.","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\format\\mod.rs","byte_start":333962,"byte_end":334027,"line_start":462,"line_end":462,"column_start":5,"column_end":70}}]},{"kind":"Method","id":{"krate":0,"index":1089},"span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\format\\mod.rs","byte_start":334302,"byte_end":334317,"line_start":468,"line_end":468,"column_start":12,"column_end":27},"name":"new_with_offset","qualname":"<DelayedFormat<I>>::new_with_offset","value":"fn <Off> (date: Option<NaiveDate>, time: Option<NaiveTime>, offset: &Off, items: I) -> DelayedFormat<I>","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `DelayedFormat` value out of local date and time and UTC offset.\n","sig":null,"attributes":[{"value":"/ Makes a new `DelayedFormat` value out of local date and time and UTC offset.","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\format\\mod.rs","byte_start":334210,"byte_end":334290,"line_start":467,"line_end":467,"column_start":5,"column_end":85}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1560},"span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\lib.rs","byte_start":17236,"byte_end":17239,"line_start":384,"line_end":384,"column_start":5,"column_end":8},"name":"Mon","qualname":"::Weekday::Mon","value":"Weekday::Mon","parent":{"krate":0,"index":1559},"children":[],"decl_id":null,"docs":" Monday.\n","sig":null,"attributes":[{"value":"/ Monday.","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\lib.rs","byte_start":17220,"byte_end":17231,"line_start":383,"line_end":383,"column_start":5,"column_end":16}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1563},"span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\lib.rs","byte_start":17266,"byte_end":17269,"line_start":386,"line_end":386,"column_start":5,"column_end":8},"name":"Tue","qualname":"::Weekday::Tue","value":"Weekday::Tue","parent":{"krate":0,"index":1559},"children":[],"decl_id":null,"docs":" Tuesday.\n","sig":null,"attributes":[{"value":"/ Tuesday.","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\lib.rs","byte_start":17249,"byte_end":17261,"line_start":385,"line_end":385,"column_start":5,"column_end":17}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1566},"span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\lib.rs","byte_start":17298,"byte_end":17301,"line_start":388,"line_end":388,"column_start":5,"column_end":8},"name":"Wed","qualname":"::Weekday::Wed","value":"Weekday::Wed","parent":{"krate":0,"index":1559},"children":[],"decl_id":null,"docs":" Wednesday.\n","sig":null,"attributes":[{"value":"/ Wednesday.","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\lib.rs","byte_start":17279,"byte_end":17293,"line_start":387,"line_end":387,"column_start":5,"column_end":19}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1569},"span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\lib.rs","byte_start":17329,"byte_end":17332,"line_start":390,"line_end":390,"column_start":5,"column_end":8},"name":"Thu","qualname":"::Weekday::Thu","value":"Weekday::Thu","parent":{"krate":0,"index":1559},"children":[],"decl_id":null,"docs":" Thursday.\n","sig":null,"attributes":[{"value":"/ Thursday.","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\lib.rs","byte_start":17311,"byte_end":17324,"line_start":389,"line_end":389,"column_start":5,"column_end":18}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1572},"span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\lib.rs","byte_start":17358,"byte_end":17361,"line_start":392,"line_end":392,"column_start":5,"column_end":8},"name":"Fri","qualname":"::Weekday::Fri","value":"Weekday::Fri","parent":{"krate":0,"index":1559},"children":[],"decl_id":null,"docs":" Friday.\n","sig":null,"attributes":[{"value":"/ Friday.","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\lib.rs","byte_start":17342,"byte_end":17353,"line_start":391,"line_end":391,"column_start":5,"column_end":16}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1575},"span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\lib.rs","byte_start":17389,"byte_end":17392,"line_start":394,"line_end":394,"column_start":5,"column_end":8},"name":"Sat","qualname":"::Weekday::Sat","value":"Weekday::Sat","parent":{"krate":0,"index":1559},"children":[],"decl_id":null,"docs":" Saturday.\n","sig":null,"attributes":[{"value":"/ Saturday.","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\lib.rs","byte_start":17371,"byte_end":17384,"line_start":393,"line_end":393,"column_start":5,"column_end":18}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1578},"span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\lib.rs","byte_start":17418,"byte_end":17421,"line_start":396,"line_end":396,"column_start":5,"column_end":8},"name":"Sun","qualname":"::Weekday::Sun","value":"Weekday::Sun","parent":{"krate":0,"index":1559},"children":[],"decl_id":null,"docs":" Sunday.\n","sig":null,"attributes":[{"value":"/ Sunday.","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\lib.rs","byte_start":17402,"byte_end":17413,"line_start":395,"line_end":395,"column_start":5,"column_end":16}}]},{"kind":"Enum","id":{"krate":0,"index":1559},"span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\lib.rs","byte_start":17206,"byte_end":17213,"line_start":382,"line_end":382,"column_start":10,"column_end":17},"name":"Weekday","qualname":"::Weekday","value":"Weekday::{Mon, Tue, Wed, Thu, Fri, Sat, Sun}","parent":null,"children":[{"krate":0,"index":1560},{"krate":0,"index":1563},{"krate":0,"index":1566},{"krate":0,"index":1569},{"krate":0,"index":1572},{"krate":0,"index":1575},{"krate":0,"index":1578}],"decl_id":null,"docs":" The day of week.","sig":null,"attributes":[{"value":"/ The day of week.","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\lib.rs","byte_start":16817,"byte_end":16837,"line_start":375,"line_end":375,"column_start":1,"column_end":21}},{"value":"/","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\lib.rs","byte_start":16838,"byte_end":16841,"line_start":376,"line_end":376,"column_start":1,"column_end":4}},{"value":"/ The order of the days of week depends on the context.","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\lib.rs","byte_start":16842,"byte_end":16899,"line_start":377,"line_end":377,"column_start":1,"column_end":58}},{"value":"/ (This is why this type does *not* implement `PartialOrd` or `Ord` traits.)","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\lib.rs","byte_start":16900,"byte_end":16978,"line_start":378,"line_end":378,"column_start":1,"column_end":79}},{"value":"/ One should prefer `*_from_monday` or `*_from_sunday` methods to get the correct result.","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\lib.rs","byte_start":16979,"byte_end":17070,"line_start":379,"line_end":379,"column_start":1,"column_end":92}}]},{"kind":"Method","id":{"krate":0,"index":1096},"span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\lib.rs","byte_start":17740,"byte_end":17744,"line_start":406,"line_end":406,"column_start":12,"column_end":16},"name":"succ","qualname":"<Weekday>::succ","value":"fn (&self) -> Weekday","parent":null,"children":[],"decl_id":null,"docs":" The next day in the week.","sig":null,"attributes":[{"value":"/ The next day in the week.","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\lib.rs","byte_start":17449,"byte_end":17478,"line_start":400,"line_end":400,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\lib.rs","byte_start":17483,"byte_end":17486,"line_start":401,"line_end":401,"column_start":5,"column_end":8}},{"value":"/ `w`:        | `Mon` | `Tue` | `Wed` | `Thu` | `Fri` | `Sat` | `Sun`","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\lib.rs","byte_start":17491,"byte_end":17562,"line_start":402,"line_end":402,"column_start":5,"column_end":76}},{"value":"/ ----------- | ----- | ----- | ----- | ----- | ----- | ----- | -----","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\lib.rs","byte_start":17567,"byte_end":17638,"line_start":403,"line_end":403,"column_start":5,"column_end":76}},{"value":"/ `w.succ()`: | `Tue` | `Wed` | `Thu` | `Fri` | `Sat` | `Sun` | `Mon`","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\lib.rs","byte_start":17643,"byte_end":17714,"line_start":404,"line_end":404,"column_start":5,"column_end":76}},{"value":"inline","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\lib.rs","byte_start":17719,"byte_end":17728,"line_start":405,"line_end":405,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1097},"span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\lib.rs","byte_start":18397,"byte_end":18401,"line_start":424,"line_end":424,"column_start":12,"column_end":16},"name":"pred","qualname":"<Weekday>::pred","value":"fn (&self) -> Weekday","parent":null,"children":[],"decl_id":null,"docs":" The previous day in the week.","sig":null,"attributes":[{"value":"/ The previous day in the week.","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\lib.rs","byte_start":18102,"byte_end":18135,"line_start":418,"line_end":418,"column_start":5,"column_end":38}},{"value":"/","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\lib.rs","byte_start":18140,"byte_end":18143,"line_start":419,"line_end":419,"column_start":5,"column_end":8}},{"value":"/ `w`:        | `Mon` | `Tue` | `Wed` | `Thu` | `Fri` | `Sat` | `Sun`","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\lib.rs","byte_start":18148,"byte_end":18219,"line_start":420,"line_end":420,"column_start":5,"column_end":76}},{"value":"/ ----------- | ----- | ----- | ----- | ----- | ----- | ----- | -----","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\lib.rs","byte_start":18224,"byte_end":18295,"line_start":421,"line_end":421,"column_start":5,"column_end":76}},{"value":"/ `w.pred()`: | `Sun` | `Mon` | `Tue` | `Wed` | `Thu` | `Fri` | `Sat`","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\lib.rs","byte_start":18300,"byte_end":18371,"line_start":422,"line_end":422,"column_start":5,"column_end":76}},{"value":"inline","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\lib.rs","byte_start":18376,"byte_end":18385,"line_start":423,"line_end":423,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1098},"span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\lib.rs","byte_start":19143,"byte_end":19161,"line_start":442,"line_end":442,"column_start":12,"column_end":30},"name":"number_from_monday","qualname":"<Weekday>::number_from_monday","value":"fn (&self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" Returns a day-of-week number starting from Monday = 1. (ISO 8601 weekday number)","sig":null,"attributes":[{"value":"/ Returns a day-of-week number starting from Monday = 1. (ISO 8601 weekday number)","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\lib.rs","byte_start":18759,"byte_end":18843,"line_start":436,"line_end":436,"column_start":5,"column_end":89}},{"value":"/","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\lib.rs","byte_start":18848,"byte_end":18851,"line_start":437,"line_end":437,"column_start":5,"column_end":8}},{"value":"/ `w`:                      | `Mon` | `Tue` | `Wed` | `Thu` | `Fri` | `Sat` | `Sun`","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\lib.rs","byte_start":18856,"byte_end":18941,"line_start":438,"line_end":438,"column_start":5,"column_end":90}},{"value":"/ ------------------------- | ----- | ----- | ----- | ----- | ----- | ----- | -----","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\lib.rs","byte_start":18946,"byte_end":19031,"line_start":439,"line_end":439,"column_start":5,"column_end":90}},{"value":"/ `w.number_from_monday()`: | 1     | 2     | 3     | 4     | 5     | 6     | 7","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\lib.rs","byte_start":19036,"byte_end":19117,"line_start":440,"line_end":440,"column_start":5,"column_end":86}},{"value":"inline","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\lib.rs","byte_start":19122,"byte_end":19131,"line_start":441,"line_end":441,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1099},"span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\lib.rs","byte_start":19796,"byte_end":19814,"line_start":460,"line_end":460,"column_start":12,"column_end":30},"name":"number_from_sunday","qualname":"<Weekday>::number_from_sunday","value":"fn (&self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" Returns a day-of-week number starting from Sunday = 1.","sig":null,"attributes":[{"value":"/ Returns a day-of-week number starting from Sunday = 1.","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\lib.rs","byte_start":19438,"byte_end":19496,"line_start":454,"line_end":454,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\lib.rs","byte_start":19501,"byte_end":19504,"line_start":455,"line_end":455,"column_start":5,"column_end":8}},{"value":"/ `w`:                      | `Mon` | `Tue` | `Wed` | `Thu` | `Fri` | `Sat` | `Sun`","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\lib.rs","byte_start":19509,"byte_end":19594,"line_start":456,"line_end":456,"column_start":5,"column_end":90}},{"value":"/ ------------------------- | ----- | ----- | ----- | ----- | ----- | ----- | -----","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\lib.rs","byte_start":19599,"byte_end":19684,"line_start":457,"line_end":457,"column_start":5,"column_end":90}},{"value":"/ `w.number_from_sunday()`: | 2     | 3     | 4     | 5     | 6     | 7     | 1","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\lib.rs","byte_start":19689,"byte_end":19770,"line_start":458,"line_end":458,"column_start":5,"column_end":86}},{"value":"inline","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\lib.rs","byte_start":19775,"byte_end":19784,"line_start":459,"line_end":459,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1100},"span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\lib.rs","byte_start":20455,"byte_end":20475,"line_start":478,"line_end":478,"column_start":12,"column_end":32},"name":"num_days_from_monday","qualname":"<Weekday>::num_days_from_monday","value":"fn (&self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" Returns a day-of-week number starting from Monday = 0.","sig":null,"attributes":[{"value":"/ Returns a day-of-week number starting from Monday = 0.","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\lib.rs","byte_start":20091,"byte_end":20149,"line_start":472,"line_end":472,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\lib.rs","byte_start":20154,"byte_end":20157,"line_start":473,"line_end":473,"column_start":5,"column_end":8}},{"value":"/ `w`:                        | `Mon` | `Tue` | `Wed` | `Thu` | `Fri` | `Sat` | `Sun`","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\lib.rs","byte_start":20162,"byte_end":20249,"line_start":474,"line_end":474,"column_start":5,"column_end":92}},{"value":"/ --------------------------- | ----- | ----- | ----- | ----- | ----- | ----- | -----","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\lib.rs","byte_start":20254,"byte_end":20341,"line_start":475,"line_end":475,"column_start":5,"column_end":92}},{"value":"/ `w.num_days_from_monday()`: | 0     | 1     | 2     | 3     | 4     | 5     | 6","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\lib.rs","byte_start":20346,"byte_end":20429,"line_start":476,"line_end":476,"column_start":5,"column_end":88}},{"value":"inline","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\lib.rs","byte_start":20434,"byte_end":20443,"line_start":477,"line_end":477,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1101},"span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\lib.rs","byte_start":21116,"byte_end":21136,"line_start":496,"line_end":496,"column_start":12,"column_end":32},"name":"num_days_from_sunday","qualname":"<Weekday>::num_days_from_sunday","value":"fn (&self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" Returns a day-of-week number starting from Sunday = 0.","sig":null,"attributes":[{"value":"/ Returns a day-of-week number starting from Sunday = 0.","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\lib.rs","byte_start":20752,"byte_end":20810,"line_start":490,"line_end":490,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\lib.rs","byte_start":20815,"byte_end":20818,"line_start":491,"line_end":491,"column_start":5,"column_end":8}},{"value":"/ `w`:                        | `Mon` | `Tue` | `Wed` | `Thu` | `Fri` | `Sat` | `Sun`","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\lib.rs","byte_start":20823,"byte_end":20910,"line_start":492,"line_end":492,"column_start":5,"column_end":92}},{"value":"/ --------------------------- | ----- | ----- | ----- | ----- | ----- | ----- | -----","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\lib.rs","byte_start":20915,"byte_end":21002,"line_start":493,"line_end":493,"column_start":5,"column_end":92}},{"value":"/ `w.num_days_from_sunday()`: | 1     | 2     | 3     | 4     | 5     | 6     | 0","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\lib.rs","byte_start":21007,"byte_end":21090,"line_start":494,"line_end":494,"column_start":5,"column_end":88}},{"value":"inline","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\lib.rs","byte_start":21095,"byte_end":21104,"line_start":495,"line_end":495,"column_start":5,"column_end":14}}]},{"kind":"Trait","id":{"krate":0,"index":1105},"span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\lib.rs","byte_start":22524,"byte_end":22532,"line_start":544,"line_end":544,"column_start":11,"column_end":19},"name":"Datelike","qualname":"::Datelike","value":"Datelike: Sized","parent":null,"children":[{"krate":0,"index":1106},{"krate":0,"index":1107},{"krate":0,"index":1108},{"krate":0,"index":1109},{"krate":0,"index":1110},{"krate":0,"index":1111},{"krate":0,"index":1112},{"krate":0,"index":1113},{"krate":0,"index":1114},{"krate":0,"index":1115},{"krate":0,"index":1116},{"krate":0,"index":1117},{"krate":0,"index":1118},{"krate":0,"index":1119},{"krate":0,"index":1120},{"krate":0,"index":1121},{"krate":0,"index":1122},{"krate":0,"index":1123}],"decl_id":null,"docs":" The common set of methods for date component.\n","sig":null,"attributes":[{"value":"/ The common set of methods for date component.","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\lib.rs","byte_start":22464,"byte_end":22513,"line_start":543,"line_end":543,"column_start":1,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":1106},"span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\lib.rs","byte_start":22644,"byte_end":22648,"line_start":546,"line_end":546,"column_start":8,"column_end":12},"name":"year","qualname":"::Datelike::year","value":"fn (&self) -> i32","parent":{"krate":0,"index":1105},"children":[],"decl_id":null,"docs":" Returns the year number in the [calendar date](./naive/date/index.html#calendar-date).\n","sig":null,"attributes":[{"value":"/ Returns the year number in the [calendar date](./naive/date/index.html#calendar-date).","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\lib.rs","byte_start":22546,"byte_end":22636,"line_start":545,"line_end":545,"column_start":5,"column_end":95}}]},{"kind":"Method","id":{"krate":0,"index":1107},"span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\lib.rs","byte_start":22857,"byte_end":22864,"line_start":551,"line_end":551,"column_start":8,"column_end":15},"name":"year_ce","qualname":"::Datelike::year_ce","value":"fn (&self) -> (bool, u32)","parent":{"krate":0,"index":1105},"children":[],"decl_id":null,"docs":" Returns the absolute year number starting from 1 with a boolean flag,\n which is false when the year predates the epoch (BCE/BC) and true otherwise (CE/AD).\n","sig":null,"attributes":[{"value":"/ Returns the absolute year number starting from 1 with a boolean flag,","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\lib.rs","byte_start":22669,"byte_end":22742,"line_start":548,"line_end":548,"column_start":5,"column_end":78}},{"value":"/ which is false when the year predates the epoch (BCE/BC) and true otherwise (CE/AD).","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\lib.rs","byte_start":22747,"byte_end":22835,"line_start":549,"line_end":549,"column_start":5,"column_end":93}},{"value":"inline","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\lib.rs","byte_start":22840,"byte_end":22849,"line_start":550,"line_end":550,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1108},"span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\lib.rs","byte_start":23159,"byte_end":23164,"line_start":563,"line_end":563,"column_start":8,"column_end":13},"name":"month","qualname":"::Datelike::month","value":"fn (&self) -> u32","parent":{"krate":0,"index":1105},"children":[],"decl_id":null,"docs":" Returns the month number starting from 1.","sig":null,"attributes":[{"value":"/ Returns the month number starting from 1.","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\lib.rs","byte_start":23052,"byte_end":23097,"line_start":560,"line_end":560,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\lib.rs","byte_start":23102,"byte_end":23105,"line_start":561,"line_end":561,"column_start":5,"column_end":8}},{"value":"/ The return value ranges from 1 to 12.","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\lib.rs","byte_start":23110,"byte_end":23151,"line_start":562,"line_end":562,"column_start":5,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":1109},"span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\lib.rs","byte_start":23292,"byte_end":23298,"line_start":568,"line_end":568,"column_start":8,"column_end":14},"name":"month0","qualname":"::Datelike::month0","value":"fn (&self) -> u32","parent":{"krate":0,"index":1105},"children":[],"decl_id":null,"docs":" Returns the month number starting from 0.","sig":null,"attributes":[{"value":"/ Returns the month number starting from 0.","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\lib.rs","byte_start":23185,"byte_end":23230,"line_start":565,"line_end":565,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\lib.rs","byte_start":23235,"byte_end":23238,"line_start":566,"line_end":566,"column_start":5,"column_end":8}},{"value":"/ The return value ranges from 0 to 11.","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\lib.rs","byte_start":23243,"byte_end":23284,"line_start":567,"line_end":567,"column_start":5,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":1110},"span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\lib.rs","byte_start":23469,"byte_end":23472,"line_start":573,"line_end":573,"column_start":8,"column_end":11},"name":"day","qualname":"::Datelike::day","value":"fn (&self) -> u32","parent":{"krate":0,"index":1105},"children":[],"decl_id":null,"docs":" Returns the day of month starting from 1.","sig":null,"attributes":[{"value":"/ Returns the day of month starting from 1.","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\lib.rs","byte_start":23319,"byte_end":23364,"line_start":570,"line_end":570,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\lib.rs","byte_start":23369,"byte_end":23372,"line_start":571,"line_end":571,"column_start":5,"column_end":8}},{"value":"/ The return value ranges from 1 to 31. (The last day of month differs by months.)","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\lib.rs","byte_start":23377,"byte_end":23461,"line_start":572,"line_end":572,"column_start":5,"column_end":89}}]},{"kind":"Method","id":{"krate":0,"index":1111},"span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\lib.rs","byte_start":23643,"byte_end":23647,"line_start":578,"line_end":578,"column_start":8,"column_end":12},"name":"day0","qualname":"::Datelike::day0","value":"fn (&self) -> u32","parent":{"krate":0,"index":1105},"children":[],"decl_id":null,"docs":" Returns the day of month starting from 0.","sig":null,"attributes":[{"value":"/ Returns the day of month starting from 0.","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\lib.rs","byte_start":23493,"byte_end":23538,"line_start":575,"line_end":575,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\lib.rs","byte_start":23543,"byte_end":23546,"line_start":576,"line_end":576,"column_start":5,"column_end":8}},{"value":"/ The return value ranges from 0 to 30. (The last day of month differs by months.)","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\lib.rs","byte_start":23551,"byte_end":23635,"line_start":577,"line_end":577,"column_start":5,"column_end":89}}]},{"kind":"Method","id":{"krate":0,"index":1112},"span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\lib.rs","byte_start":23816,"byte_end":23823,"line_start":583,"line_end":583,"column_start":8,"column_end":15},"name":"ordinal","qualname":"::Datelike::ordinal","value":"fn (&self) -> u32","parent":{"krate":0,"index":1105},"children":[],"decl_id":null,"docs":" Returns the day of year starting from 1.","sig":null,"attributes":[{"value":"/ Returns the day of year starting from 1.","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\lib.rs","byte_start":23668,"byte_end":23712,"line_start":580,"line_end":580,"column_start":5,"column_end":49}},{"value":"/","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\lib.rs","byte_start":23717,"byte_end":23720,"line_start":581,"line_end":581,"column_start":5,"column_end":8}},{"value":"/ The return value ranges from 1 to 366. (The last day of year differs by years.)","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\lib.rs","byte_start":23725,"byte_end":23808,"line_start":582,"line_end":582,"column_start":5,"column_end":88}}]},{"kind":"Method","id":{"krate":0,"index":1113},"span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\lib.rs","byte_start":23992,"byte_end":24000,"line_start":588,"line_end":588,"column_start":8,"column_end":16},"name":"ordinal0","qualname":"::Datelike::ordinal0","value":"fn (&self) -> u32","parent":{"krate":0,"index":1105},"children":[],"decl_id":null,"docs":" Returns the day of year starting from 0.","sig":null,"attributes":[{"value":"/ Returns the day of year starting from 0.","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\lib.rs","byte_start":23844,"byte_end":23888,"line_start":585,"line_end":585,"column_start":5,"column_end":49}},{"value":"/","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\lib.rs","byte_start":23893,"byte_end":23896,"line_start":586,"line_end":586,"column_start":5,"column_end":8}},{"value":"/ The return value ranges from 0 to 365. (The last day of year differs by years.)","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\lib.rs","byte_start":23901,"byte_end":23984,"line_start":587,"line_end":587,"column_start":5,"column_end":88}}]},{"kind":"Method","id":{"krate":0,"index":1114},"span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\lib.rs","byte_start":24057,"byte_end":24064,"line_start":591,"line_end":591,"column_start":8,"column_end":15},"name":"weekday","qualname":"::Datelike::weekday","value":"fn (&self) -> Weekday","parent":{"krate":0,"index":1105},"children":[],"decl_id":null,"docs":" Returns the day of week.\n","sig":null,"attributes":[{"value":"/ Returns the day of week.","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\lib.rs","byte_start":24021,"byte_end":24049,"line_start":590,"line_end":590,"column_start":5,"column_end":33}}]},{"kind":"Method","id":{"krate":0,"index":1115},"span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\lib.rs","byte_start":24243,"byte_end":24254,"line_start":595,"line_end":595,"column_start":8,"column_end":19},"name":"isoweekdate","qualname":"::Datelike::isoweekdate","value":"fn (&self) -> (i32, u32, Weekday)","parent":{"krate":0,"index":1105},"children":[],"decl_id":null,"docs":" Returns the ISO week date: an adjusted year, week number and day of week.\n The adjusted year may differ from that of the calendar date.\n","sig":null,"attributes":[{"value":"/ Returns the ISO week date: an adjusted year, week number and day of week.","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\lib.rs","byte_start":24089,"byte_end":24166,"line_start":593,"line_end":593,"column_start":5,"column_end":82}},{"value":"/ The adjusted year may differ from that of the calendar date.","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\lib.rs","byte_start":24171,"byte_end":24235,"line_start":594,"line_end":594,"column_start":5,"column_end":69}}]},{"kind":"Method","id":{"krate":0,"index":1116},"span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\lib.rs","byte_start":24424,"byte_end":24433,"line_start":600,"line_end":600,"column_start":8,"column_end":17},"name":"with_year","qualname":"::Datelike::with_year","value":"fn (&self, year: i32) -> Option<Self>","parent":{"krate":0,"index":1105},"children":[],"decl_id":null,"docs":" Makes a new value with the year number changed.","sig":null,"attributes":[{"value":"/ Makes a new value with the year number changed.","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\lib.rs","byte_start":24291,"byte_end":24342,"line_start":597,"line_end":597,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\lib.rs","byte_start":24347,"byte_end":24350,"line_start":598,"line_end":598,"column_start":5,"column_end":8}},{"value":"/ Returns `None` when the resulting value would be invalid.","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\lib.rs","byte_start":24355,"byte_end":24416,"line_start":599,"line_end":599,"column_start":5,"column_end":66}}]},{"kind":"Method","id":{"krate":0,"index":1117},"span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\lib.rs","byte_start":24626,"byte_end":24636,"line_start":605,"line_end":605,"column_start":8,"column_end":18},"name":"with_month","qualname":"::Datelike::with_month","value":"fn (&self, month: u32) -> Option<Self>","parent":{"krate":0,"index":1105},"children":[],"decl_id":null,"docs":" Makes a new value with the month number (starting from 1) changed.","sig":null,"attributes":[{"value":"/ Makes a new value with the month number (starting from 1) changed.","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\lib.rs","byte_start":24474,"byte_end":24544,"line_start":602,"line_end":602,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\lib.rs","byte_start":24549,"byte_end":24552,"line_start":603,"line_end":603,"column_start":5,"column_end":8}},{"value":"/ Returns `None` when the resulting value would be invalid.","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\lib.rs","byte_start":24557,"byte_end":24618,"line_start":604,"line_end":604,"column_start":5,"column_end":66}}]},{"kind":"Method","id":{"krate":0,"index":1118},"span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\lib.rs","byte_start":24830,"byte_end":24841,"line_start":610,"line_end":610,"column_start":8,"column_end":19},"name":"with_month0","qualname":"::Datelike::with_month0","value":"fn (&self, month0: u32) -> Option<Self>","parent":{"krate":0,"index":1105},"children":[],"decl_id":null,"docs":" Makes a new value with the month number (starting from 0) changed.","sig":null,"attributes":[{"value":"/ Makes a new value with the month number (starting from 0) changed.","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\lib.rs","byte_start":24678,"byte_end":24748,"line_start":607,"line_end":607,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\lib.rs","byte_start":24753,"byte_end":24756,"line_start":608,"line_end":608,"column_start":5,"column_end":8}},{"value":"/ Returns `None` when the resulting value would be invalid.","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\lib.rs","byte_start":24761,"byte_end":24822,"line_start":609,"line_end":609,"column_start":5,"column_end":66}}]},{"kind":"Method","id":{"krate":0,"index":1119},"span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\lib.rs","byte_start":25036,"byte_end":25044,"line_start":615,"line_end":615,"column_start":8,"column_end":16},"name":"with_day","qualname":"::Datelike::with_day","value":"fn (&self, day: u32) -> Option<Self>","parent":{"krate":0,"index":1105},"children":[],"decl_id":null,"docs":" Makes a new value with the day of month (starting from 1) changed.","sig":null,"attributes":[{"value":"/ Makes a new value with the day of month (starting from 1) changed.","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\lib.rs","byte_start":24884,"byte_end":24954,"line_start":612,"line_end":612,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\lib.rs","byte_start":24959,"byte_end":24962,"line_start":613,"line_end":613,"column_start":5,"column_end":8}},{"value":"/ Returns `None` when the resulting value would be invalid.","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\lib.rs","byte_start":24967,"byte_end":25028,"line_start":614,"line_end":614,"column_start":5,"column_end":66}}]},{"kind":"Method","id":{"krate":0,"index":1120},"span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\lib.rs","byte_start":25236,"byte_end":25245,"line_start":620,"line_end":620,"column_start":8,"column_end":17},"name":"with_day0","qualname":"::Datelike::with_day0","value":"fn (&self, day0: u32) -> Option<Self>","parent":{"krate":0,"index":1105},"children":[],"decl_id":null,"docs":" Makes a new value with the day of month (starting from 0) changed.","sig":null,"attributes":[{"value":"/ Makes a new value with the day of month (starting from 0) changed.","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\lib.rs","byte_start":25084,"byte_end":25154,"line_start":617,"line_end":617,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\lib.rs","byte_start":25159,"byte_end":25162,"line_start":618,"line_end":618,"column_start":5,"column_end":8}},{"value":"/ Returns `None` when the resulting value would be invalid.","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\lib.rs","byte_start":25167,"byte_end":25228,"line_start":619,"line_end":619,"column_start":5,"column_end":66}}]},{"kind":"Method","id":{"krate":0,"index":1121},"span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\lib.rs","byte_start":25437,"byte_end":25449,"line_start":625,"line_end":625,"column_start":8,"column_end":20},"name":"with_ordinal","qualname":"::Datelike::with_ordinal","value":"fn (&self, ordinal: u32) -> Option<Self>","parent":{"krate":0,"index":1105},"children":[],"decl_id":null,"docs":" Makes a new value with the day of year (starting from 1) changed.","sig":null,"attributes":[{"value":"/ Makes a new value with the day of year (starting from 1) changed.","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\lib.rs","byte_start":25286,"byte_end":25355,"line_start":622,"line_end":622,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\lib.rs","byte_start":25360,"byte_end":25363,"line_start":623,"line_end":623,"column_start":5,"column_end":8}},{"value":"/ Returns `None` when the resulting value would be invalid.","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\lib.rs","byte_start":25368,"byte_end":25429,"line_start":624,"line_end":624,"column_start":5,"column_end":66}}]},{"kind":"Method","id":{"krate":0,"index":1122},"span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\lib.rs","byte_start":25644,"byte_end":25657,"line_start":630,"line_end":630,"column_start":8,"column_end":21},"name":"with_ordinal0","qualname":"::Datelike::with_ordinal0","value":"fn (&self, ordinal0: u32) -> Option<Self>","parent":{"krate":0,"index":1105},"children":[],"decl_id":null,"docs":" Makes a new value with the day of year (starting from 0) changed.","sig":null,"attributes":[{"value":"/ Makes a new value with the day of year (starting from 0) changed.","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\lib.rs","byte_start":25493,"byte_end":25562,"line_start":627,"line_end":627,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\lib.rs","byte_start":25567,"byte_end":25570,"line_start":628,"line_end":628,"column_start":5,"column_end":8}},{"value":"/ Returns `None` when the resulting value would be invalid.","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\lib.rs","byte_start":25575,"byte_end":25636,"line_start":629,"line_end":629,"column_start":5,"column_end":66}}]},{"kind":"Method","id":{"krate":0,"index":1123},"span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\lib.rs","byte_start":25804,"byte_end":25820,"line_start":633,"line_end":633,"column_start":8,"column_end":24},"name":"num_days_from_ce","qualname":"::Datelike::num_days_from_ce","value":"fn (&self) -> i32","parent":{"krate":0,"index":1105},"children":[],"decl_id":null,"docs":" Returns the number of days since January 1, 1 (Day 1) in the proleptic Gregorian calendar.\n","sig":null,"attributes":[{"value":"/ Returns the number of days since January 1, 1 (Day 1) in the proleptic Gregorian calendar.","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\lib.rs","byte_start":25702,"byte_end":25796,"line_start":632,"line_end":632,"column_start":5,"column_end":99}}]},{"kind":"Trait","id":{"krate":0,"index":1124},"span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\lib.rs","byte_start":26354,"byte_end":26362,"line_start":649,"line_end":649,"column_start":11,"column_end":19},"name":"Timelike","qualname":"::Timelike","value":"Timelike: Sized","parent":null,"children":[{"krate":0,"index":1125},{"krate":0,"index":1126},{"krate":0,"index":1127},{"krate":0,"index":1128},{"krate":0,"index":1129},{"krate":0,"index":1130},{"krate":0,"index":1131},{"krate":0,"index":1132},{"krate":0,"index":1133},{"krate":0,"index":1134}],"decl_id":null,"docs":" The common set of methods for time component.\n","sig":null,"attributes":[{"value":"/ The common set of methods for time component.","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\lib.rs","byte_start":26294,"byte_end":26343,"line_start":648,"line_end":648,"column_start":1,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":1125},"span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\lib.rs","byte_start":26425,"byte_end":26429,"line_start":651,"line_end":651,"column_start":8,"column_end":12},"name":"hour","qualname":"::Timelike::hour","value":"fn (&self) -> u32","parent":{"krate":0,"index":1124},"children":[],"decl_id":null,"docs":" Returns the hour number from 0 to 23.\n","sig":null,"attributes":[{"value":"/ Returns the hour number from 0 to 23.","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\lib.rs","byte_start":26376,"byte_end":26417,"line_start":650,"line_end":650,"column_start":5,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":1126},"span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\lib.rs","byte_start":26580,"byte_end":26586,"line_start":656,"line_end":656,"column_start":8,"column_end":14},"name":"hour12","qualname":"::Timelike::hour12","value":"fn (&self) -> (bool, u32)","parent":{"krate":0,"index":1124},"children":[],"decl_id":null,"docs":" Returns the hour number from 1 to 12 with a boolean flag,\n which is false for AM and true for PM.\n","sig":null,"attributes":[{"value":"/ Returns the hour number from 1 to 12 with a boolean flag,","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\lib.rs","byte_start":26450,"byte_end":26511,"line_start":653,"line_end":653,"column_start":5,"column_end":66}},{"value":"/ which is false for AM and true for PM.","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\lib.rs","byte_start":26516,"byte_end":26558,"line_start":654,"line_end":654,"column_start":5,"column_end":47}},{"value":"inline","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\lib.rs","byte_start":26563,"byte_end":26572,"line_start":655,"line_end":655,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1127},"span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\lib.rs","byte_start":26830,"byte_end":26836,"line_start":666,"line_end":666,"column_start":8,"column_end":14},"name":"minute","qualname":"::Timelike::minute","value":"fn (&self) -> u32","parent":{"krate":0,"index":1124},"children":[],"decl_id":null,"docs":" Returns the minute number from 0 to 59.\n","sig":null,"attributes":[{"value":"/ Returns the minute number from 0 to 59.","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\lib.rs","byte_start":26779,"byte_end":26822,"line_start":665,"line_end":665,"column_start":5,"column_end":48}}]},{"kind":"Method","id":{"krate":0,"index":1128},"span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\lib.rs","byte_start":26908,"byte_end":26914,"line_start":669,"line_end":669,"column_start":8,"column_end":14},"name":"second","qualname":"::Timelike::second","value":"fn (&self) -> u32","parent":{"krate":0,"index":1124},"children":[],"decl_id":null,"docs":" Returns the second number from 0 to 59.\n","sig":null,"attributes":[{"value":"/ Returns the second number from 0 to 59.","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\lib.rs","byte_start":26857,"byte_end":26900,"line_start":668,"line_end":668,"column_start":5,"column_end":48}}]},{"kind":"Method","id":{"krate":0,"index":1129},"span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\lib.rs","byte_start":27151,"byte_end":27161,"line_start":674,"line_end":674,"column_start":8,"column_end":18},"name":"nanosecond","qualname":"::Timelike::nanosecond","value":"fn (&self) -> u32","parent":{"krate":0,"index":1124},"children":[],"decl_id":null,"docs":" Returns the number of nanoseconds since the whole non-leap second.\n The range from 1,000,000,000 to 1,999,999,999 represents\n the [leap second](./naive/time/index.html#leap-second-handling).\n","sig":null,"attributes":[{"value":"/ Returns the number of nanoseconds since the whole non-leap second.","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\lib.rs","byte_start":26935,"byte_end":27005,"line_start":671,"line_end":671,"column_start":5,"column_end":75}},{"value":"/ The range from 1,000,000,000 to 1,999,999,999 represents","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\lib.rs","byte_start":27010,"byte_end":27070,"line_start":672,"line_end":672,"column_start":5,"column_end":65}},{"value":"/ the [leap second](./naive/time/index.html#leap-second-handling).","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\lib.rs","byte_start":27075,"byte_end":27143,"line_start":673,"line_end":673,"column_start":5,"column_end":73}}]},{"kind":"Method","id":{"krate":0,"index":1130},"span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\lib.rs","byte_start":27315,"byte_end":27324,"line_start":679,"line_end":679,"column_start":8,"column_end":17},"name":"with_hour","qualname":"::Timelike::with_hour","value":"fn (&self, hour: u32) -> Option<Self>","parent":{"krate":0,"index":1124},"children":[],"decl_id":null,"docs":" Makes a new value with the hour number changed.","sig":null,"attributes":[{"value":"/ Makes a new value with the hour number changed.","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\lib.rs","byte_start":27182,"byte_end":27233,"line_start":676,"line_end":676,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\lib.rs","byte_start":27238,"byte_end":27241,"line_start":677,"line_end":677,"column_start":5,"column_end":8}},{"value":"/ Returns `None` when the resulting value would be invalid.","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\lib.rs","byte_start":27246,"byte_end":27307,"line_start":678,"line_end":678,"column_start":5,"column_end":66}}]},{"kind":"Method","id":{"krate":0,"index":1131},"span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\lib.rs","byte_start":27500,"byte_end":27511,"line_start":684,"line_end":684,"column_start":8,"column_end":19},"name":"with_minute","qualname":"::Timelike::with_minute","value":"fn (&self, min: u32) -> Option<Self>","parent":{"krate":0,"index":1124},"children":[],"decl_id":null,"docs":" Makes a new value with the minute number changed.","sig":null,"attributes":[{"value":"/ Makes a new value with the minute number changed.","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\lib.rs","byte_start":27365,"byte_end":27418,"line_start":681,"line_end":681,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\lib.rs","byte_start":27423,"byte_end":27426,"line_start":682,"line_end":682,"column_start":5,"column_end":8}},{"value":"/ Returns `None` when the resulting value would be invalid.","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\lib.rs","byte_start":27431,"byte_end":27492,"line_start":683,"line_end":683,"column_start":5,"column_end":66}}]},{"kind":"Method","id":{"krate":0,"index":1132},"span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\lib.rs","byte_start":27798,"byte_end":27809,"line_start":691,"line_end":691,"column_start":8,"column_end":19},"name":"with_second","qualname":"::Timelike::with_second","value":"fn (&self, sec: u32) -> Option<Self>","parent":{"krate":0,"index":1124},"children":[],"decl_id":null,"docs":" Makes a new value with the second number changed.","sig":null,"attributes":[{"value":"/ Makes a new value with the second number changed.","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\lib.rs","byte_start":27551,"byte_end":27604,"line_start":686,"line_end":686,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\lib.rs","byte_start":27609,"byte_end":27612,"line_start":687,"line_end":687,"column_start":5,"column_end":8}},{"value":"/ Returns `None` when the resulting value would be invalid.","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\lib.rs","byte_start":27617,"byte_end":27678,"line_start":688,"line_end":688,"column_start":5,"column_end":66}},{"value":"/ As with the [`second`](#tymethod.second) method,","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\lib.rs","byte_start":27683,"byte_end":27735,"line_start":689,"line_end":689,"column_start":5,"column_end":57}},{"value":"/ the input range is restricted to 0 through 59.","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\lib.rs","byte_start":27740,"byte_end":27790,"line_start":690,"line_end":690,"column_start":5,"column_end":55}}]},{"kind":"Method","id":{"krate":0,"index":1133},"span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\lib.rs","byte_start":28142,"byte_end":28157,"line_start":698,"line_end":698,"column_start":8,"column_end":23},"name":"with_nanosecond","qualname":"::Timelike::with_nanosecond","value":"fn (&self, nano: u32) -> Option<Self>","parent":{"krate":0,"index":1124},"children":[],"decl_id":null,"docs":" Makes a new value with nanoseconds since the whole non-leap second changed.","sig":null,"attributes":[{"value":"/ Makes a new value with nanoseconds since the whole non-leap second changed.","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\lib.rs","byte_start":27849,"byte_end":27928,"line_start":693,"line_end":693,"column_start":5,"column_end":84}},{"value":"/","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\lib.rs","byte_start":27933,"byte_end":27936,"line_start":694,"line_end":694,"column_start":5,"column_end":8}},{"value":"/ Returns `None` when the resulting value would be invalid.","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\lib.rs","byte_start":27941,"byte_end":28002,"line_start":695,"line_end":695,"column_start":5,"column_end":66}},{"value":"/ As with the [`nanosecond`](#tymethod.nanosecond) method,","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\lib.rs","byte_start":28007,"byte_end":28067,"line_start":696,"line_end":696,"column_start":5,"column_end":65}},{"value":"/ the input range can exceed 1,000,000,000 for leap seconds.","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\lib.rs","byte_start":28072,"byte_end":28134,"line_start":697,"line_end":697,"column_start":5,"column_end":67}}]},{"kind":"Method","id":{"krate":0,"index":1134},"span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\lib.rs","byte_start":28286,"byte_end":28311,"line_start":702,"line_end":702,"column_start":8,"column_end":33},"name":"num_seconds_from_midnight","qualname":"::Timelike::num_seconds_from_midnight","value":"fn (&self) -> u32","parent":{"krate":0,"index":1124},"children":[],"decl_id":null,"docs":" Returns the number of non-leap seconds past the last midnight.\n","sig":null,"attributes":[{"value":"/ Returns the number of non-leap seconds past the last midnight.","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\lib.rs","byte_start":28198,"byte_end":28264,"line_start":700,"line_end":700,"column_start":5,"column_end":71}},{"value":"inline","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\lib.rs","byte_start":28269,"byte_end":28278,"line_start":701,"line_end":701,"column_start":5,"column_end":14}}]}],"impls":[{"id":0,"kind":"Inherent","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\offset\\mod.rs","byte_start":32599,"byte_end":32610,"line_start":47,"line_end":47,"column_start":9,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":46},{"krate":0,"index":47},{"krate":0,"index":48},{"krate":0,"index":49}],"docs":"","sig":null,"attributes":[]},{"id":1,"kind":"Inherent","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\offset\\mod.rs","byte_start":33690,"byte_end":33701,"line_start":73,"line_end":73,"column_start":20,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":54},{"krate":0,"index":55},{"krate":0,"index":56},{"krate":0,"index":57},{"krate":0,"index":58}],"docs":"","sig":null,"attributes":[]},{"id":2,"kind":"Inherent","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\offset\\mod.rs","byte_start":36893,"byte_end":36904,"line_start":147,"line_end":147,"column_start":21,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":61}],"docs":"","sig":null,"attributes":[]},{"id":3,"kind":"Inherent","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\offset\\utc.rs","byte_start":46177,"byte_end":46180,"line_start":25,"line_end":25,"column_start":6,"column_end":9},"value":"","parent":null,"children":[{"krate":0,"index":99},{"krate":0,"index":100}],"docs":"","sig":null,"attributes":[]},{"id":4,"kind":"Direct","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\offset\\utc.rs","byte_start":46591,"byte_end":46594,"line_start":37,"line_end":37,"column_start":19,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":102},{"krate":0,"index":103},{"krate":0,"index":104},{"krate":0,"index":105},{"krate":0,"index":106},{"krate":0,"index":107}],"docs":"","sig":null,"attributes":[]},{"id":5,"kind":"Direct","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\offset\\utc.rs","byte_start":47077,"byte_end":47080,"line_start":53,"line_end":53,"column_start":17,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":109}],"docs":"","sig":null,"attributes":[]},{"id":6,"kind":"Direct","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\offset\\utc.rs","byte_start":47169,"byte_end":47172,"line_start":57,"line_end":57,"column_start":21,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":111}],"docs":"","sig":null,"attributes":[]},{"id":7,"kind":"Direct","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\offset\\utc.rs","byte_start":47276,"byte_end":47279,"line_start":61,"line_end":61,"column_start":23,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":113}],"docs":"","sig":null,"attributes":[]},{"id":8,"kind":"Inherent","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\offset\\fixed.rs","byte_start":47886,"byte_end":47897,"line_start":23,"line_end":23,"column_start":6,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":125},{"krate":0,"index":126},{"krate":0,"index":127},{"krate":0,"index":128}],"docs":"","sig":null,"attributes":[]},{"id":9,"kind":"Direct","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\offset\\fixed.rs","byte_start":50001,"byte_end":50012,"line_start":82,"line_end":82,"column_start":19,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":130},{"krate":0,"index":131},{"krate":0,"index":132},{"krate":0,"index":133},{"krate":0,"index":134},{"krate":0,"index":135}],"docs":"","sig":null,"attributes":[]},{"id":10,"kind":"Direct","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\offset\\fixed.rs","byte_start":50599,"byte_end":50610,"line_start":98,"line_end":98,"column_start":17,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":137}],"docs":"","sig":null,"attributes":[]},{"id":11,"kind":"Direct","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\offset\\fixed.rs","byte_start":50729,"byte_end":50740,"line_start":102,"line_end":102,"column_start":21,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":139}],"docs":"","sig":null,"attributes":[]},{"id":12,"kind":"Direct","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\offset\\fixed.rs","byte_start":51234,"byte_end":51245,"line_start":116,"line_end":116,"column_start":23,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":141}],"docs":"","sig":null,"attributes":[]},{"id":13,"kind":"Inherent","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\offset\\local.rs","byte_start":57050,"byte_end":57055,"line_start":76,"line_end":76,"column_start":6,"column_end":11},"value":"","parent":null,"children":[{"krate":0,"index":161},{"krate":0,"index":162}],"docs":"","sig":null,"attributes":[]},{"id":14,"kind":"Direct","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\offset\\local.rs","byte_start":57365,"byte_end":57370,"line_start":88,"line_end":88,"column_start":19,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":164},{"krate":0,"index":165},{"krate":0,"index":166},{"krate":0,"index":168},{"krate":0,"index":170},{"krate":0,"index":171},{"krate":0,"index":172},{"krate":0,"index":174},{"krate":0,"index":175},{"krate":0,"index":176}],"docs":"","sig":null,"attributes":[]},{"id":15,"kind":"Inherent","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\date.rs","byte_start":64359,"byte_end":64368,"line_start":114,"line_end":114,"column_start":6,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":215},{"krate":0,"index":216},{"krate":0,"index":217},{"krate":0,"index":218},{"krate":0,"index":219},{"krate":0,"index":220},{"krate":0,"index":221},{"krate":0,"index":222},{"krate":0,"index":223},{"krate":0,"index":224},{"krate":0,"index":225},{"krate":0,"index":226},{"krate":0,"index":227},{"krate":0,"index":228},{"krate":0,"index":230},{"krate":0,"index":231},{"krate":0,"index":233},{"krate":0,"index":234},{"krate":0,"index":236},{"krate":0,"index":237},{"krate":0,"index":239},{"krate":0,"index":240},{"krate":0,"index":241},{"krate":0,"index":242},{"krate":0,"index":243},{"krate":0,"index":244},{"krate":0,"index":246},{"krate":0,"index":247},{"krate":0,"index":249},{"krate":0,"index":250},{"krate":0,"index":251},{"krate":0,"index":254}],"docs":"","sig":null,"attributes":[]},{"id":16,"kind":"Direct","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\date.rs","byte_start":94945,"byte_end":94954,"line_start":890,"line_end":890,"column_start":19,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":257},{"krate":0,"index":258},{"krate":0,"index":259},{"krate":0,"index":260},{"krate":0,"index":261},{"krate":0,"index":262},{"krate":0,"index":263},{"krate":0,"index":264},{"krate":0,"index":265},{"krate":0,"index":266},{"krate":0,"index":267},{"krate":0,"index":268},{"krate":0,"index":269},{"krate":0,"index":270},{"krate":0,"index":271},{"krate":0,"index":272}],"docs":"","sig":null,"attributes":[]},{"id":17,"kind":"Direct","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\date.rs","byte_start":106636,"byte_end":106645,"line_start":1245,"line_end":1245,"column_start":21,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":274}],"docs":"","sig":null,"attributes":[]},{"id":18,"kind":"Direct","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\date.rs","byte_start":107900,"byte_end":107909,"line_start":1273,"line_end":1273,"column_start":24,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":277},{"krate":0,"index":278}],"docs":"","sig":null,"attributes":[]},{"id":19,"kind":"Direct","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\date.rs","byte_start":108975,"byte_end":108984,"line_start":1301,"line_end":1301,"column_start":25,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":280},{"krate":0,"index":281}],"docs":"","sig":null,"attributes":[]},{"id":20,"kind":"Direct","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\date.rs","byte_start":110649,"byte_end":110658,"line_start":1336,"line_end":1336,"column_start":24,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":283},{"krate":0,"index":284}],"docs":"","sig":null,"attributes":[]},{"id":21,"kind":"Direct","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\date.rs","byte_start":111639,"byte_end":111648,"line_start":1366,"line_end":1366,"column_start":21,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":286}],"docs":"","sig":null,"attributes":[]},{"id":22,"kind":"Direct","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\date.rs","byte_start":112866,"byte_end":112875,"line_start":1400,"line_end":1400,"column_start":23,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":288}],"docs":"","sig":null,"attributes":[]},{"id":23,"kind":"Direct","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\date.rs","byte_start":113431,"byte_end":113440,"line_start":1419,"line_end":1419,"column_start":23,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":290},{"krate":0,"index":291}],"docs":"","sig":null,"attributes":[]},{"id":24,"kind":"Inherent","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\date.rs","byte_start":147408,"byte_end":147417,"line_start":2137,"line_end":2137,"column_start":10,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":326},{"krate":0,"index":327},{"krate":0,"index":328},{"krate":0,"index":329},{"krate":0,"index":330}],"docs":"","sig":null,"attributes":[]},{"id":25,"kind":"Direct","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\date.rs","byte_start":148297,"byte_end":148306,"line_start":2170,"line_end":2170,"column_start":25,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":332}],"docs":"","sig":null,"attributes":[]},{"id":26,"kind":"Inherent","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\date.rs","byte_start":157227,"byte_end":157229,"line_start":2307,"line_end":2307,"column_start":10,"column_end":12},"value":"","parent":null,"children":[{"krate":0,"index":343},{"krate":0,"index":344},{"krate":0,"index":345},{"krate":0,"index":346},{"krate":0,"index":347},{"krate":0,"index":348},{"krate":0,"index":349},{"krate":0,"index":350},{"krate":0,"index":351},{"krate":0,"index":352},{"krate":0,"index":353},{"krate":0,"index":354},{"krate":0,"index":355}],"docs":"","sig":null,"attributes":[]},{"id":27,"kind":"Direct","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\date.rs","byte_start":159543,"byte_end":159545,"line_start":2392,"line_end":2392,"column_start":25,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":357}],"docs":"","sig":null,"attributes":[]},{"id":28,"kind":"Inherent","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\date.rs","byte_start":160145,"byte_end":160148,"line_start":2408,"line_end":2408,"column_start":10,"column_end":13},"value":"","parent":null,"children":[{"krate":0,"index":359},{"krate":0,"index":360},{"krate":0,"index":361},{"krate":0,"index":362},{"krate":0,"index":363},{"krate":0,"index":364},{"krate":0,"index":365},{"krate":0,"index":366},{"krate":0,"index":367},{"krate":0,"index":368},{"krate":0,"index":369},{"krate":0,"index":370}],"docs":"","sig":null,"attributes":[]},{"id":29,"kind":"Direct","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\date.rs","byte_start":162288,"byte_end":162291,"line_start":2489,"line_end":2489,"column_start":25,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":372}],"docs":"","sig":null,"attributes":[]},{"id":30,"kind":"Inherent","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\time.rs","byte_start":178767,"byte_end":178776,"line_start":66,"line_end":66,"column_start":6,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":397},{"krate":0,"index":398},{"krate":0,"index":399},{"krate":0,"index":400},{"krate":0,"index":402},{"krate":0,"index":403},{"krate":0,"index":405},{"krate":0,"index":406},{"krate":0,"index":407},{"krate":0,"index":408},{"krate":0,"index":409},{"krate":0,"index":410},{"krate":0,"index":413},{"krate":0,"index":415}],"docs":"","sig":null,"attributes":[]},{"id":31,"kind":"Direct","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\time.rs","byte_start":193538,"byte_end":193547,"line_start":452,"line_end":452,"column_start":19,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":417},{"krate":0,"index":418},{"krate":0,"index":419},{"krate":0,"index":420},{"krate":0,"index":421},{"krate":0,"index":422},{"krate":0,"index":423},{"krate":0,"index":424},{"krate":0,"index":425}],"docs":"","sig":null,"attributes":[]},{"id":32,"kind":"Direct","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\time.rs","byte_start":200731,"byte_end":200740,"line_start":657,"line_end":657,"column_start":21,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":427}],"docs":"","sig":null,"attributes":[]},{"id":33,"kind":"Direct","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\time.rs","byte_start":200890,"byte_end":200899,"line_start":664,"line_end":664,"column_start":24,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":430},{"krate":0,"index":431}],"docs":"","sig":null,"attributes":[]},{"id":34,"kind":"Direct","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\time.rs","byte_start":201913,"byte_end":201922,"line_start":691,"line_end":691,"column_start":25,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":433},{"krate":0,"index":434}],"docs":"","sig":null,"attributes":[]},{"id":35,"kind":"Direct","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\time.rs","byte_start":202640,"byte_end":202649,"line_start":710,"line_end":710,"column_start":24,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":436},{"krate":0,"index":437}],"docs":"","sig":null,"attributes":[]},{"id":36,"kind":"Direct","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\time.rs","byte_start":202783,"byte_end":202792,"line_start":717,"line_end":717,"column_start":21,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":439}],"docs":"","sig":null,"attributes":[]},{"id":37,"kind":"Direct","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\time.rs","byte_start":203438,"byte_end":203447,"line_start":739,"line_end":739,"column_start":23,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":441}],"docs":"","sig":null,"attributes":[]},{"id":38,"kind":"Direct","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\time.rs","byte_start":203561,"byte_end":203570,"line_start":743,"line_end":743,"column_start":23,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":443},{"krate":0,"index":444}],"docs":"","sig":null,"attributes":[]},{"id":39,"kind":"Inherent","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\datetime.rs","byte_start":223633,"byte_end":223646,"line_start":26,"line_end":26,"column_start":6,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":476},{"krate":0,"index":477},{"krate":0,"index":478},{"krate":0,"index":481},{"krate":0,"index":482},{"krate":0,"index":483},{"krate":0,"index":484},{"krate":0,"index":485},{"krate":0,"index":486},{"krate":0,"index":487},{"krate":0,"index":488},{"krate":0,"index":489},{"krate":0,"index":490},{"krate":0,"index":491},{"krate":0,"index":492},{"krate":0,"index":493},{"krate":0,"index":496}],"docs":"","sig":null,"attributes":[]},{"id":40,"kind":"Direct","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\datetime.rs","byte_start":231041,"byte_end":231054,"line_start":199,"line_end":199,"column_start":19,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":499},{"krate":0,"index":500},{"krate":0,"index":501},{"krate":0,"index":502},{"krate":0,"index":503},{"krate":0,"index":504},{"krate":0,"index":505},{"krate":0,"index":506},{"krate":0,"index":507},{"krate":0,"index":508},{"krate":0,"index":510},{"krate":0,"index":512},{"krate":0,"index":514},{"krate":0,"index":516},{"krate":0,"index":518},{"krate":0,"index":520}],"docs":"","sig":null,"attributes":[]},{"id":41,"kind":"Direct","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\datetime.rs","byte_start":242218,"byte_end":242231,"line_start":517,"line_end":517,"column_start":19,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":523},{"krate":0,"index":524},{"krate":0,"index":525},{"krate":0,"index":526},{"krate":0,"index":527},{"krate":0,"index":529},{"krate":0,"index":531},{"krate":0,"index":533}],"docs":"","sig":null,"attributes":[]},{"id":42,"kind":"Direct","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\datetime.rs","byte_start":248475,"byte_end":248488,"line_start":689,"line_end":689,"column_start":21,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":536}],"docs":"","sig":null,"attributes":[]},{"id":43,"kind":"Direct","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\datetime.rs","byte_start":248638,"byte_end":248651,"line_start":696,"line_end":696,"column_start":24,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":539},{"krate":0,"index":540}],"docs":"","sig":null,"attributes":[]},{"id":44,"kind":"Direct","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\datetime.rs","byte_start":248868,"byte_end":248881,"line_start":705,"line_end":705,"column_start":29,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":542},{"krate":0,"index":543}],"docs":"","sig":null,"attributes":[]},{"id":45,"kind":"Direct","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\datetime.rs","byte_start":249052,"byte_end":249065,"line_start":713,"line_end":713,"column_start":24,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":545},{"krate":0,"index":546}],"docs":"","sig":null,"attributes":[]},{"id":46,"kind":"Direct","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\datetime.rs","byte_start":249274,"byte_end":249287,"line_start":722,"line_end":722,"column_start":21,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":548}],"docs":"","sig":null,"attributes":[]},{"id":47,"kind":"Direct","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\datetime.rs","byte_start":249433,"byte_end":249446,"line_start":728,"line_end":728,"column_start":23,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":550}],"docs":"","sig":null,"attributes":[]},{"id":48,"kind":"Direct","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\datetime.rs","byte_start":249588,"byte_end":249601,"line_start":734,"line_end":734,"column_start":23,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":552},{"krate":0,"index":553}],"docs":"","sig":null,"attributes":[]},{"id":49,"kind":"Inherent","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\date.rs","byte_start":270471,"byte_end":270475,"line_start":57,"line_end":57,"column_start":20,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":583},{"krate":0,"index":584},{"krate":0,"index":585},{"krate":0,"index":586},{"krate":0,"index":588},{"krate":0,"index":589},{"krate":0,"index":591},{"krate":0,"index":592},{"krate":0,"index":594},{"krate":0,"index":595},{"krate":0,"index":597},{"krate":0,"index":598},{"krate":0,"index":600},{"krate":0,"index":601},{"krate":0,"index":603},{"krate":0,"index":605},{"krate":0,"index":606},{"krate":0,"index":608},{"krate":0,"index":609},{"krate":0,"index":610},{"krate":0,"index":611}],"docs":"","sig":null,"attributes":[]},{"id":50,"kind":"Inherent","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\date.rs","byte_start":277955,"byte_end":277959,"line_start":246,"line_end":246,"column_start":20,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":618},{"krate":0,"index":621}],"docs":"","sig":null,"attributes":[]},{"id":51,"kind":"Direct","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\date.rs","byte_start":278669,"byte_end":278673,"line_start":263,"line_end":263,"column_start":33,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":625},{"krate":0,"index":626},{"krate":0,"index":627},{"krate":0,"index":628},{"krate":0,"index":629},{"krate":0,"index":630},{"krate":0,"index":631},{"krate":0,"index":632},{"krate":0,"index":633},{"krate":0,"index":634},{"krate":0,"index":636},{"krate":0,"index":638},{"krate":0,"index":640},{"krate":0,"index":642},{"krate":0,"index":644},{"krate":0,"index":646}],"docs":"","sig":null,"attributes":[]},{"id":52,"kind":"Direct","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\date.rs","byte_start":280382,"byte_end":280386,"line_start":311,"line_end":311,"column_start":29,"column_end":33},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":53,"kind":"Direct","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\date.rs","byte_start":280466,"byte_end":280470,"line_start":312,"line_end":312,"column_start":36,"column_end":40},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":54,"kind":"Direct","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\date.rs","byte_start":280575,"byte_end":280579,"line_start":314,"line_end":314,"column_start":60,"column_end":64},"value":"","parent":null,"children":[{"krate":0,"index":655}],"docs":"","sig":null,"attributes":[]},{"id":55,"kind":"Direct","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\date.rs","byte_start":280687,"byte_end":280691,"line_start":318,"line_end":318,"column_start":27,"column_end":31},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":56,"kind":"Direct","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\date.rs","byte_start":280735,"byte_end":280739,"line_start":321,"line_end":321,"column_start":35,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":660}],"docs":"","sig":null,"attributes":[]},{"id":57,"kind":"Direct","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\date.rs","byte_start":280891,"byte_end":280895,"line_start":327,"line_end":327,"column_start":28,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":663}],"docs":"","sig":null,"attributes":[]},{"id":58,"kind":"Direct","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\date.rs","byte_start":281018,"byte_end":281022,"line_start":331,"line_end":331,"column_start":35,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":666}],"docs":"","sig":null,"attributes":[]},{"id":59,"kind":"Direct","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\date.rs","byte_start":281146,"byte_end":281150,"line_start":335,"line_end":335,"column_start":38,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":670},{"krate":0,"index":671}],"docs":"","sig":null,"attributes":[]},{"id":60,"kind":"Direct","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\date.rs","byte_start":281377,"byte_end":281381,"line_start":344,"line_end":344,"column_start":54,"column_end":58},"value":"","parent":null,"children":[{"krate":0,"index":675},{"krate":0,"index":676}],"docs":"","sig":null,"attributes":[]},{"id":61,"kind":"Direct","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\date.rs","byte_start":281541,"byte_end":281545,"line_start":351,"line_end":351,"column_start":38,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":679},{"krate":0,"index":680}],"docs":"","sig":null,"attributes":[]},{"id":62,"kind":"Direct","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\date.rs","byte_start":281753,"byte_end":281757,"line_start":360,"line_end":360,"column_start":35,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":683}],"docs":"","sig":null,"attributes":[]},{"id":63,"kind":"Direct","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\date.rs","byte_start":281931,"byte_end":281935,"line_start":366,"line_end":366,"column_start":37,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":686}],"docs":"","sig":null,"attributes":[]},{"id":64,"kind":"Inherent","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\datetime.rs","byte_start":286648,"byte_end":286656,"line_start":32,"line_end":32,"column_start":20,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":724},{"krate":0,"index":725},{"krate":0,"index":726},{"krate":0,"index":727},{"krate":0,"index":728},{"krate":0,"index":729},{"krate":0,"index":730},{"krate":0,"index":731},{"krate":0,"index":732},{"krate":0,"index":734},{"krate":0,"index":735},{"krate":0,"index":737},{"krate":0,"index":738},{"krate":0,"index":739},{"krate":0,"index":740}],"docs":"","sig":null,"attributes":[]},{"id":65,"kind":"Inherent","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\datetime.rs","byte_start":290822,"byte_end":290830,"line_start":154,"line_end":154,"column_start":6,"column_end":14},"value":"","parent":null,"children":[{"krate":0,"index":746},{"krate":0,"index":748},{"krate":0,"index":750}],"docs":"","sig":null,"attributes":[]},{"id":66,"kind":"Inherent","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\datetime.rs","byte_start":292548,"byte_end":292556,"line_start":189,"line_end":189,"column_start":20,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":753},{"krate":0,"index":755},{"krate":0,"index":757},{"krate":0,"index":760}],"docs":"","sig":null,"attributes":[]},{"id":67,"kind":"Direct","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\datetime.rs","byte_start":293928,"byte_end":293936,"line_start":219,"line_end":219,"column_start":33,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":764},{"krate":0,"index":765},{"krate":0,"index":766},{"krate":0,"index":767},{"krate":0,"index":768},{"krate":0,"index":769},{"krate":0,"index":770},{"krate":0,"index":771},{"krate":0,"index":772},{"krate":0,"index":773},{"krate":0,"index":775},{"krate":0,"index":777},{"krate":0,"index":779},{"krate":0,"index":781},{"krate":0,"index":783},{"krate":0,"index":785}],"docs":"","sig":null,"attributes":[]},{"id":68,"kind":"Direct","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\datetime.rs","byte_start":295667,"byte_end":295675,"line_start":266,"line_end":266,"column_start":33,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":789},{"krate":0,"index":790},{"krate":0,"index":791},{"krate":0,"index":792},{"krate":0,"index":793},{"krate":0,"index":795},{"krate":0,"index":797},{"krate":0,"index":799}],"docs":"","sig":null,"attributes":[]},{"id":69,"kind":"Direct","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\datetime.rs","byte_start":296651,"byte_end":296659,"line_start":294,"line_end":294,"column_start":29,"column_end":37},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":70,"kind":"Direct","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\datetime.rs","byte_start":296739,"byte_end":296747,"line_start":295,"line_end":295,"column_start":36,"column_end":44},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":71,"kind":"Direct","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\datetime.rs","byte_start":296856,"byte_end":296864,"line_start":297,"line_end":297,"column_start":64,"column_end":72},"value":"","parent":null,"children":[{"krate":0,"index":808}],"docs":"","sig":null,"attributes":[]},{"id":72,"kind":"Direct","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\datetime.rs","byte_start":296984,"byte_end":296992,"line_start":301,"line_end":301,"column_start":27,"column_end":35},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":73,"kind":"Direct","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\datetime.rs","byte_start":297036,"byte_end":297044,"line_start":304,"line_end":304,"column_start":35,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":813}],"docs":"","sig":null,"attributes":[]},{"id":74,"kind":"Direct","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\datetime.rs","byte_start":297208,"byte_end":297216,"line_start":310,"line_end":310,"column_start":28,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":816}],"docs":"","sig":null,"attributes":[]},{"id":75,"kind":"Direct","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\datetime.rs","byte_start":297351,"byte_end":297359,"line_start":314,"line_end":314,"column_start":35,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":819}],"docs":"","sig":null,"attributes":[]},{"id":76,"kind":"Direct","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\datetime.rs","byte_start":297487,"byte_end":297495,"line_start":318,"line_end":318,"column_start":38,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":823},{"krate":0,"index":824}],"docs":"","sig":null,"attributes":[]},{"id":77,"kind":"Direct","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\datetime.rs","byte_start":297738,"byte_end":297746,"line_start":327,"line_end":327,"column_start":58,"column_end":66},"value":"","parent":null,"children":[{"krate":0,"index":828},{"krate":0,"index":829}],"docs":"","sig":null,"attributes":[]},{"id":78,"kind":"Direct","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\datetime.rs","byte_start":297918,"byte_end":297926,"line_start":334,"line_end":334,"column_start":38,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":832},{"krate":0,"index":833}],"docs":"","sig":null,"attributes":[]},{"id":79,"kind":"Direct","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\datetime.rs","byte_start":298146,"byte_end":298154,"line_start":343,"line_end":343,"column_start":35,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":836}],"docs":"","sig":null,"attributes":[]},{"id":80,"kind":"Direct","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\datetime.rs","byte_start":298328,"byte_end":298336,"line_start":349,"line_end":349,"column_start":37,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":839}],"docs":"","sig":null,"attributes":[]},{"id":81,"kind":"Direct","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\datetime.rs","byte_start":298524,"byte_end":298532,"line_start":355,"line_end":355,"column_start":23,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":841},{"krate":0,"index":842}],"docs":"","sig":null,"attributes":[]},{"id":82,"kind":"Direct","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\datetime.rs","byte_start":299732,"byte_end":299740,"line_start":382,"line_end":382,"column_start":23,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":845},{"krate":0,"index":846}],"docs":"","sig":null,"attributes":[]},{"id":83,"kind":"Direct","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\datetime.rs","byte_start":299940,"byte_end":299948,"line_start":390,"line_end":390,"column_start":23,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":849},{"krate":0,"index":850}],"docs":"","sig":null,"attributes":[]},{"id":84,"kind":"Direct","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\format\\mod.rs","byte_start":321956,"byte_end":321966,"line_start":224,"line_end":224,"column_start":23,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":877}],"docs":"","sig":null,"attributes":[]},{"id":85,"kind":"Direct","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\format\\mod.rs","byte_start":322086,"byte_end":322096,"line_start":230,"line_end":230,"column_start":16,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":879}],"docs":"","sig":null,"attributes":[]},{"id":86,"kind":"Inherent","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\format\\parsed.rs","byte_start":339449,"byte_end":339455,"line_start":125,"line_end":125,"column_start":6,"column_end":12},"value":"","parent":null,"children":[{"krate":0,"index":962},{"krate":0,"index":963},{"krate":0,"index":964},{"krate":0,"index":965},{"krate":0,"index":966},{"krate":0,"index":967},{"krate":0,"index":968},{"krate":0,"index":969},{"krate":0,"index":970},{"krate":0,"index":971},{"krate":0,"index":972},{"krate":0,"index":973},{"krate":0,"index":974},{"krate":0,"index":975},{"krate":0,"index":976},{"krate":0,"index":977},{"krate":0,"index":978},{"krate":0,"index":979},{"krate":0,"index":980},{"krate":0,"index":981},{"krate":0,"index":982},{"krate":0,"index":983},{"krate":0,"index":984},{"krate":0,"index":992},{"krate":0,"index":993},{"krate":0,"index":998},{"krate":0,"index":1000},{"krate":0,"index":1001}],"docs":"","sig":null,"attributes":[]},{"id":87,"kind":"Inherent","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\format\\strftime.rs","byte_start":440752,"byte_end":440765,"line_start":163,"line_end":163,"column_start":10,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":1074}],"docs":"","sig":null,"attributes":[]},{"id":88,"kind":"Direct","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\format\\strftime.rs","byte_start":441040,"byte_end":441053,"line_start":171,"line_end":171,"column_start":23,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":1079},{"krate":0,"index":1080}],"docs":"","sig":null,"attributes":[]},{"id":89,"kind":"Inherent","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\format\\mod.rs","byte_start":333939,"byte_end":333952,"line_start":461,"line_end":461,"column_start":46,"column_end":59},"value":"","parent":null,"children":[{"krate":0,"index":1088},{"krate":0,"index":1089}],"docs":"","sig":null,"attributes":[]},{"id":90,"kind":"Direct","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\format\\mod.rs","byte_start":334732,"byte_end":334745,"line_start":476,"line_end":476,"column_start":63,"column_end":76},"value":"","parent":null,"children":[{"krate":0,"index":1094}],"docs":"","sig":null,"attributes":[]},{"id":91,"kind":"Inherent","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\lib.rs","byte_start":17435,"byte_end":17442,"line_start":399,"line_end":399,"column_start":6,"column_end":13},"value":"","parent":null,"children":[{"krate":0,"index":1096},{"krate":0,"index":1097},{"krate":0,"index":1098},{"krate":0,"index":1099},{"krate":0,"index":1100},{"krate":0,"index":1101}],"docs":"","sig":null,"attributes":[]},{"id":92,"kind":"Direct","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\lib.rs","byte_start":21699,"byte_end":21706,"line_start":512,"line_end":512,"column_start":37,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":1103},{"krate":0,"index":1104}],"docs":"","sig":null,"attributes":[]}],"refs":[{"kind":"Mod","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\lib.rs","byte_start":16418,"byte_end":16424,"line_start":360,"line_end":360,"column_start":9,"column_end":15},"ref_id":{"krate":0,"index":30}},{"kind":"Mod","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\offset\\mod.rs","byte_start":45459,"byte_end":45462,"line_start":331,"line_end":331,"column_start":9,"column_end":12},"ref_id":{"krate":0,"index":86}},{"kind":"Mod","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\offset\\mod.rs","byte_start":45472,"byte_end":45477,"line_start":332,"line_end":332,"column_start":9,"column_end":14},"ref_id":{"krate":0,"index":114}},{"kind":"Mod","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\offset\\mod.rs","byte_start":45487,"byte_end":45492,"line_start":333,"line_end":333,"column_start":9,"column_end":14},"ref_id":{"krate":0,"index":142}},{"kind":"Mod","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\lib.rs","byte_start":16720,"byte_end":16724,"line_start":367,"line_end":367,"column_start":13,"column_end":17},"ref_id":{"krate":0,"index":178}},{"kind":"Mod","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\lib.rs","byte_start":16738,"byte_end":16742,"line_start":368,"line_end":368,"column_start":13,"column_end":17},"ref_id":{"krate":0,"index":373}},{"kind":"Mod","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\lib.rs","byte_start":16756,"byte_end":16764,"line_start":369,"line_end":369,"column_start":13,"column_end":21},"ref_id":{"krate":0,"index":446}},{"kind":"Mod","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\lib.rs","byte_start":16776,"byte_end":16780,"line_start":371,"line_end":371,"column_start":9,"column_end":13},"ref_id":{"krate":0,"index":555}},{"kind":"Mod","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\lib.rs","byte_start":16790,"byte_end":16798,"line_start":372,"line_end":372,"column_start":9,"column_end":17},"ref_id":{"krate":0,"index":687}},{"kind":"Mod","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\lib.rs","byte_start":16808,"byte_end":16814,"line_start":373,"line_end":373,"column_start":9,"column_end":15},"ref_id":{"krate":0,"index":852}},{"kind":"Mod","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\format\\mod.rs","byte_start":333261,"byte_end":333267,"line_start":439,"line_end":439,"column_start":9,"column_end":15},"ref_id":{"krate":0,"index":937}},{"kind":"Mod","span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\format\\mod.rs","byte_start":333370,"byte_end":333378,"line_start":445,"line_end":445,"column_start":9,"column_end":17},"ref_id":{"krate":0,"index":1066}}],"macro_refs":[],"relations":[{"span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\offset\\mod.rs","byte_start":32599,"byte_end":32610,"line_start":47,"line_end":47,"column_start":9,"column_end":20},"kind":{"Impl":{"id":0}},"from":{"krate":0,"index":1135},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\offset\\mod.rs","byte_start":33690,"byte_end":33701,"line_start":73,"line_end":73,"column_start":20,"column_end":31},"kind":{"Impl":{"id":1}},"from":{"krate":0,"index":1135},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\offset\\mod.rs","byte_start":36893,"byte_end":36904,"line_start":147,"line_end":147,"column_start":21,"column_end":32},"kind":{"Impl":{"id":2}},"from":{"krate":0,"index":1135},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\offset\\mod.rs","byte_start":37365,"byte_end":37370,"line_start":161,"line_end":161,"column_start":19,"column_end":24},"kind":"SuperTrait","from":{"krate":2,"index":1857},"to":{"krate":0,"index":62}},{"span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\offset\\mod.rs","byte_start":37373,"byte_end":37378,"line_start":161,"line_end":161,"column_start":27,"column_end":32},"kind":"SuperTrait","from":{"krate":2,"index":1562},"to":{"krate":0,"index":62}},{"span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\offset\\mod.rs","byte_start":37386,"byte_end":37391,"line_start":161,"line_end":161,"column_start":40,"column_end":45},"kind":"SuperTrait","from":{"krate":2,"index":5923},"to":{"krate":0,"index":62}},{"span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\offset\\mod.rs","byte_start":37541,"byte_end":37546,"line_start":167,"line_end":167,"column_start":21,"column_end":26},"kind":"SuperTrait","from":{"krate":2,"index":1857},"to":{"krate":0,"index":64}},{"span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\offset\\mod.rs","byte_start":37549,"byte_end":37554,"line_start":167,"line_end":167,"column_start":29,"column_end":34},"kind":"SuperTrait","from":{"krate":2,"index":1562},"to":{"krate":0,"index":64}},{"span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\offset\\utc.rs","byte_start":46177,"byte_end":46180,"line_start":25,"line_end":25,"column_start":6,"column_end":9},"kind":{"Impl":{"id":3}},"from":{"krate":0,"index":1158},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\offset\\utc.rs","byte_start":46591,"byte_end":46594,"line_start":37,"line_end":37,"column_start":19,"column_end":22},"kind":{"Impl":{"id":4}},"from":{"krate":0,"index":1158},"to":{"krate":0,"index":64}},{"span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\offset\\utc.rs","byte_start":47077,"byte_end":47080,"line_start":53,"line_end":53,"column_start":17,"column_end":20},"kind":{"Impl":{"id":5}},"from":{"krate":0,"index":1158},"to":{"krate":0,"index":62}},{"span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\offset\\utc.rs","byte_start":47169,"byte_end":47172,"line_start":57,"line_end":57,"column_start":21,"column_end":24},"kind":{"Impl":{"id":6}},"from":{"krate":0,"index":1158},"to":{"krate":2,"index":5923}},{"span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\offset\\utc.rs","byte_start":47276,"byte_end":47279,"line_start":61,"line_end":61,"column_start":23,"column_end":26},"kind":{"Impl":{"id":7}},"from":{"krate":0,"index":1158},"to":{"krate":2,"index":5928}},{"span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\offset\\fixed.rs","byte_start":47886,"byte_end":47897,"line_start":23,"line_end":23,"column_start":6,"column_end":17},"kind":{"Impl":{"id":8}},"from":{"krate":0,"index":1169},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\offset\\fixed.rs","byte_start":50001,"byte_end":50012,"line_start":82,"line_end":82,"column_start":19,"column_end":30},"kind":{"Impl":{"id":9}},"from":{"krate":0,"index":1169},"to":{"krate":0,"index":64}},{"span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\offset\\fixed.rs","byte_start":50599,"byte_end":50610,"line_start":98,"line_end":98,"column_start":17,"column_end":28},"kind":{"Impl":{"id":10}},"from":{"krate":0,"index":1169},"to":{"krate":0,"index":62}},{"span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\offset\\fixed.rs","byte_start":50729,"byte_end":50740,"line_start":102,"line_end":102,"column_start":21,"column_end":32},"kind":{"Impl":{"id":11}},"from":{"krate":0,"index":1169},"to":{"krate":2,"index":5923}},{"span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\offset\\fixed.rs","byte_start":51234,"byte_end":51245,"line_start":116,"line_end":116,"column_start":23,"column_end":34},"kind":{"Impl":{"id":12}},"from":{"krate":0,"index":1169},"to":{"krate":2,"index":5928}},{"span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\offset\\local.rs","byte_start":57050,"byte_end":57055,"line_start":76,"line_end":76,"column_start":6,"column_end":11},"kind":{"Impl":{"id":13}},"from":{"krate":0,"index":1181},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\offset\\local.rs","byte_start":57365,"byte_end":57370,"line_start":88,"line_end":88,"column_start":19,"column_end":24},"kind":{"Impl":{"id":14}},"from":{"krate":0,"index":1181},"to":{"krate":0,"index":64}},{"span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\date.rs","byte_start":64359,"byte_end":64368,"line_start":114,"line_end":114,"column_start":6,"column_end":15},"kind":{"Impl":{"id":15}},"from":{"krate":0,"index":1186},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\date.rs","byte_start":94945,"byte_end":94954,"line_start":890,"line_end":890,"column_start":19,"column_end":28},"kind":{"Impl":{"id":16}},"from":{"krate":0,"index":1186},"to":{"krate":0,"index":1105}},{"span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\date.rs","byte_start":106636,"byte_end":106645,"line_start":1245,"line_end":1245,"column_start":21,"column_end":30},"kind":{"Impl":{"id":17}},"from":{"krate":0,"index":1186},"to":{"krate":2,"index":6114}},{"span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\date.rs","byte_start":107900,"byte_end":107909,"line_start":1273,"line_end":1273,"column_start":24,"column_end":33},"kind":{"Impl":{"id":18}},"from":{"krate":0,"index":1186},"to":{"krate":2,"index":1915}},{"span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\date.rs","byte_start":108975,"byte_end":108984,"line_start":1301,"line_end":1301,"column_start":25,"column_end":34},"kind":{"Impl":{"id":19}},"from":{"krate":0,"index":1186},"to":{"krate":2,"index":1920}},{"span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\date.rs","byte_start":110649,"byte_end":110658,"line_start":1336,"line_end":1336,"column_start":24,"column_end":33},"kind":{"Impl":{"id":20}},"from":{"krate":0,"index":1186},"to":{"krate":2,"index":1920}},{"span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\date.rs","byte_start":111639,"byte_end":111648,"line_start":1366,"line_end":1366,"column_start":21,"column_end":30},"kind":{"Impl":{"id":21}},"from":{"krate":0,"index":1186},"to":{"krate":2,"index":5923}},{"span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\date.rs","byte_start":112866,"byte_end":112875,"line_start":1400,"line_end":1400,"column_start":23,"column_end":32},"kind":{"Impl":{"id":22}},"from":{"krate":0,"index":1186},"to":{"krate":2,"index":5928}},{"span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\date.rs","byte_start":113431,"byte_end":113440,"line_start":1419,"line_end":1419,"column_start":23,"column_end":32},"kind":{"Impl":{"id":23}},"from":{"krate":0,"index":1186},"to":{"krate":2,"index":7375}},{"span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\date.rs","byte_start":147408,"byte_end":147417,"line_start":2137,"line_end":2137,"column_start":10,"column_end":19},"kind":{"Impl":{"id":24}},"from":{"krate":0,"index":1206},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\date.rs","byte_start":148297,"byte_end":148306,"line_start":2170,"line_end":2170,"column_start":25,"column_end":34},"kind":{"Impl":{"id":25}},"from":{"krate":0,"index":1206},"to":{"krate":2,"index":5923}},{"span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\date.rs","byte_start":157227,"byte_end":157229,"line_start":2307,"line_end":2307,"column_start":10,"column_end":12},"kind":{"Impl":{"id":26}},"from":{"krate":0,"index":1219},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\date.rs","byte_start":159543,"byte_end":159545,"line_start":2392,"line_end":2392,"column_start":25,"column_end":27},"kind":{"Impl":{"id":27}},"from":{"krate":0,"index":1219},"to":{"krate":2,"index":5923}},{"span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\date.rs","byte_start":160145,"byte_end":160148,"line_start":2408,"line_end":2408,"column_start":10,"column_end":13},"kind":{"Impl":{"id":28}},"from":{"krate":0,"index":1235},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\date.rs","byte_start":162288,"byte_end":162291,"line_start":2489,"line_end":2489,"column_start":25,"column_end":28},"kind":{"Impl":{"id":29}},"from":{"krate":0,"index":1235},"to":{"krate":2,"index":5923}},{"span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\time.rs","byte_start":178767,"byte_end":178776,"line_start":66,"line_end":66,"column_start":6,"column_end":15},"kind":{"Impl":{"id":30}},"from":{"krate":0,"index":1251},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\time.rs","byte_start":193538,"byte_end":193547,"line_start":452,"line_end":452,"column_start":19,"column_end":28},"kind":{"Impl":{"id":31}},"from":{"krate":0,"index":1251},"to":{"krate":0,"index":1124}},{"span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\time.rs","byte_start":200731,"byte_end":200740,"line_start":657,"line_end":657,"column_start":21,"column_end":30},"kind":{"Impl":{"id":32}},"from":{"krate":0,"index":1251},"to":{"krate":2,"index":6114}},{"span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\time.rs","byte_start":200890,"byte_end":200899,"line_start":664,"line_end":664,"column_start":24,"column_end":33},"kind":{"Impl":{"id":33}},"from":{"krate":0,"index":1251},"to":{"krate":2,"index":1915}},{"span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\time.rs","byte_start":201913,"byte_end":201922,"line_start":691,"line_end":691,"column_start":25,"column_end":34},"kind":{"Impl":{"id":34}},"from":{"krate":0,"index":1251},"to":{"krate":2,"index":1920}},{"span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\time.rs","byte_start":202640,"byte_end":202649,"line_start":710,"line_end":710,"column_start":24,"column_end":33},"kind":{"Impl":{"id":35}},"from":{"krate":0,"index":1251},"to":{"krate":2,"index":1920}},{"span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\time.rs","byte_start":202783,"byte_end":202792,"line_start":717,"line_end":717,"column_start":21,"column_end":30},"kind":{"Impl":{"id":36}},"from":{"krate":0,"index":1251},"to":{"krate":2,"index":5923}},{"span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\time.rs","byte_start":203438,"byte_end":203447,"line_start":739,"line_end":739,"column_start":23,"column_end":32},"kind":{"Impl":{"id":37}},"from":{"krate":0,"index":1251},"to":{"krate":2,"index":5928}},{"span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\time.rs","byte_start":203561,"byte_end":203570,"line_start":743,"line_end":743,"column_start":23,"column_end":32},"kind":{"Impl":{"id":38}},"from":{"krate":0,"index":1251},"to":{"krate":2,"index":7375}},{"span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\datetime.rs","byte_start":223633,"byte_end":223646,"line_start":26,"line_end":26,"column_start":6,"column_end":19},"kind":{"Impl":{"id":39}},"from":{"krate":0,"index":1276},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\datetime.rs","byte_start":231041,"byte_end":231054,"line_start":199,"line_end":199,"column_start":19,"column_end":32},"kind":{"Impl":{"id":40}},"from":{"krate":0,"index":1276},"to":{"krate":0,"index":1105}},{"span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\datetime.rs","byte_start":242218,"byte_end":242231,"line_start":517,"line_end":517,"column_start":19,"column_end":32},"kind":{"Impl":{"id":41}},"from":{"krate":0,"index":1276},"to":{"krate":0,"index":1124}},{"span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\datetime.rs","byte_start":248475,"byte_end":248488,"line_start":689,"line_end":689,"column_start":21,"column_end":34},"kind":{"Impl":{"id":42}},"from":{"krate":0,"index":1276},"to":{"krate":2,"index":6114}},{"span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\datetime.rs","byte_start":248638,"byte_end":248651,"line_start":696,"line_end":696,"column_start":24,"column_end":37},"kind":{"Impl":{"id":43}},"from":{"krate":0,"index":1276},"to":{"krate":2,"index":1915}},{"span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\datetime.rs","byte_start":248868,"byte_end":248881,"line_start":705,"line_end":705,"column_start":29,"column_end":42},"kind":{"Impl":{"id":44}},"from":{"krate":0,"index":1276},"to":{"krate":2,"index":1920}},{"span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\datetime.rs","byte_start":249052,"byte_end":249065,"line_start":713,"line_end":713,"column_start":24,"column_end":37},"kind":{"Impl":{"id":45}},"from":{"krate":0,"index":1276},"to":{"krate":2,"index":1920}},{"span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\datetime.rs","byte_start":249274,"byte_end":249287,"line_start":722,"line_end":722,"column_start":21,"column_end":34},"kind":{"Impl":{"id":46}},"from":{"krate":0,"index":1276},"to":{"krate":2,"index":5923}},{"span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\datetime.rs","byte_start":249433,"byte_end":249446,"line_start":728,"line_end":728,"column_start":23,"column_end":36},"kind":{"Impl":{"id":47}},"from":{"krate":0,"index":1276},"to":{"krate":2,"index":5928}},{"span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\naive\\datetime.rs","byte_start":249588,"byte_end":249601,"line_start":734,"line_end":734,"column_start":23,"column_end":36},"kind":{"Impl":{"id":48}},"from":{"krate":0,"index":1276},"to":{"krate":2,"index":7375}},{"span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\date.rs","byte_start":270471,"byte_end":270475,"line_start":57,"line_end":57,"column_start":20,"column_end":24},"kind":{"Impl":{"id":49}},"from":{"krate":0,"index":1301},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\date.rs","byte_start":277955,"byte_end":277959,"line_start":246,"line_end":246,"column_start":20,"column_end":24},"kind":{"Impl":{"id":50}},"from":{"krate":0,"index":1301},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\date.rs","byte_start":278669,"byte_end":278673,"line_start":263,"line_end":263,"column_start":33,"column_end":37},"kind":{"Impl":{"id":51}},"from":{"krate":0,"index":1301},"to":{"krate":0,"index":1105}},{"span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\date.rs","byte_start":280382,"byte_end":280386,"line_start":311,"line_end":311,"column_start":29,"column_end":33},"kind":{"Impl":{"id":52}},"from":{"krate":0,"index":1301},"to":{"krate":2,"index":1862}},{"span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\date.rs","byte_start":280466,"byte_end":280470,"line_start":312,"line_end":312,"column_start":36,"column_end":40},"kind":{"Impl":{"id":53}},"from":{"krate":0,"index":1301},"to":{"krate":2,"index":1852}},{"span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\date.rs","byte_start":280575,"byte_end":280579,"line_start":314,"line_end":314,"column_start":60,"column_end":64},"kind":{"Impl":{"id":54}},"from":{"krate":0,"index":1301},"to":{"krate":2,"index":1588}},{"span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\date.rs","byte_start":280687,"byte_end":280691,"line_start":318,"line_end":318,"column_start":27,"column_end":31},"kind":{"Impl":{"id":55}},"from":{"krate":0,"index":1301},"to":{"krate":2,"index":1593}},{"span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\date.rs","byte_start":280735,"byte_end":280739,"line_start":321,"line_end":321,"column_start":35,"column_end":39},"kind":{"Impl":{"id":56}},"from":{"krate":0,"index":1301},"to":{"krate":2,"index":1625}},{"span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\date.rs","byte_start":280891,"byte_end":280895,"line_start":327,"line_end":327,"column_start":28,"column_end":32},"kind":{"Impl":{"id":57}},"from":{"krate":0,"index":1301},"to":{"krate":2,"index":1614}},{"span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\date.rs","byte_start":281018,"byte_end":281022,"line_start":331,"line_end":331,"column_start":35,"column_end":39},"kind":{"Impl":{"id":58}},"from":{"krate":0,"index":1301},"to":{"krate":2,"index":6114}},{"span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\date.rs","byte_start":281146,"byte_end":281150,"line_start":335,"line_end":335,"column_start":38,"column_end":42},"kind":{"Impl":{"id":59}},"from":{"krate":0,"index":1301},"to":{"krate":2,"index":1915}},{"span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\date.rs","byte_start":281377,"byte_end":281381,"line_start":344,"line_end":344,"column_start":54,"column_end":58},"kind":{"Impl":{"id":60}},"from":{"krate":0,"index":1301},"to":{"krate":2,"index":1920}},{"span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\date.rs","byte_start":281541,"byte_end":281545,"line_start":351,"line_end":351,"column_start":38,"column_end":42},"kind":{"Impl":{"id":61}},"from":{"krate":0,"index":1301},"to":{"krate":2,"index":1920}},{"span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\date.rs","byte_start":281753,"byte_end":281757,"line_start":360,"line_end":360,"column_start":35,"column_end":39},"kind":{"Impl":{"id":62}},"from":{"krate":0,"index":1301},"to":{"krate":2,"index":5923}},{"span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\date.rs","byte_start":281931,"byte_end":281935,"line_start":366,"line_end":366,"column_start":37,"column_end":41},"kind":{"Impl":{"id":63}},"from":{"krate":0,"index":1301},"to":{"krate":2,"index":5928}},{"span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\datetime.rs","byte_start":286648,"byte_end":286656,"line_start":32,"line_end":32,"column_start":20,"column_end":28},"kind":{"Impl":{"id":64}},"from":{"krate":0,"index":1308},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\datetime.rs","byte_start":290822,"byte_end":290830,"line_start":154,"line_end":154,"column_start":6,"column_end":14},"kind":{"Impl":{"id":65}},"from":{"krate":0,"index":1308},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\datetime.rs","byte_start":292548,"byte_end":292556,"line_start":189,"line_end":189,"column_start":20,"column_end":28},"kind":{"Impl":{"id":66}},"from":{"krate":0,"index":1308},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\datetime.rs","byte_start":293928,"byte_end":293936,"line_start":219,"line_end":219,"column_start":33,"column_end":41},"kind":{"Impl":{"id":67}},"from":{"krate":0,"index":1308},"to":{"krate":0,"index":1105}},{"span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\datetime.rs","byte_start":295667,"byte_end":295675,"line_start":266,"line_end":266,"column_start":33,"column_end":41},"kind":{"Impl":{"id":68}},"from":{"krate":0,"index":1308},"to":{"krate":0,"index":1124}},{"span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\datetime.rs","byte_start":296651,"byte_end":296659,"line_start":294,"line_end":294,"column_start":29,"column_end":37},"kind":{"Impl":{"id":69}},"from":{"krate":0,"index":1308},"to":{"krate":2,"index":1862}},{"span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\datetime.rs","byte_start":296739,"byte_end":296747,"line_start":295,"line_end":295,"column_start":36,"column_end":44},"kind":{"Impl":{"id":70}},"from":{"krate":0,"index":1308},"to":{"krate":2,"index":1852}},{"span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\datetime.rs","byte_start":296856,"byte_end":296864,"line_start":297,"line_end":297,"column_start":64,"column_end":72},"kind":{"Impl":{"id":71}},"from":{"krate":0,"index":1308},"to":{"krate":2,"index":1588}},{"span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\datetime.rs","byte_start":296984,"byte_end":296992,"line_start":301,"line_end":301,"column_start":27,"column_end":35},"kind":{"Impl":{"id":72}},"from":{"krate":0,"index":1308},"to":{"krate":2,"index":1593}},{"span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\datetime.rs","byte_start":297036,"byte_end":297044,"line_start":304,"line_end":304,"column_start":35,"column_end":43},"kind":{"Impl":{"id":73}},"from":{"krate":0,"index":1308},"to":{"krate":2,"index":1625}},{"span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\datetime.rs","byte_start":297208,"byte_end":297216,"line_start":310,"line_end":310,"column_start":28,"column_end":36},"kind":{"Impl":{"id":74}},"from":{"krate":0,"index":1308},"to":{"krate":2,"index":1614}},{"span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\datetime.rs","byte_start":297351,"byte_end":297359,"line_start":314,"line_end":314,"column_start":35,"column_end":43},"kind":{"Impl":{"id":75}},"from":{"krate":0,"index":1308},"to":{"krate":2,"index":6114}},{"span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\datetime.rs","byte_start":297487,"byte_end":297495,"line_start":318,"line_end":318,"column_start":38,"column_end":46},"kind":{"Impl":{"id":76}},"from":{"krate":0,"index":1308},"to":{"krate":2,"index":1915}},{"span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\datetime.rs","byte_start":297738,"byte_end":297746,"line_start":327,"line_end":327,"column_start":58,"column_end":66},"kind":{"Impl":{"id":77}},"from":{"krate":0,"index":1308},"to":{"krate":2,"index":1920}},{"span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\datetime.rs","byte_start":297918,"byte_end":297926,"line_start":334,"line_end":334,"column_start":38,"column_end":46},"kind":{"Impl":{"id":78}},"from":{"krate":0,"index":1308},"to":{"krate":2,"index":1920}},{"span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\datetime.rs","byte_start":298146,"byte_end":298154,"line_start":343,"line_end":343,"column_start":35,"column_end":43},"kind":{"Impl":{"id":79}},"from":{"krate":0,"index":1308},"to":{"krate":2,"index":5923}},{"span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\datetime.rs","byte_start":298328,"byte_end":298336,"line_start":349,"line_end":349,"column_start":37,"column_end":45},"kind":{"Impl":{"id":80}},"from":{"krate":0,"index":1308},"to":{"krate":2,"index":5928}},{"span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\datetime.rs","byte_start":298524,"byte_end":298532,"line_start":355,"line_end":355,"column_start":23,"column_end":31},"kind":{"Impl":{"id":81}},"from":{"krate":0,"index":1308},"to":{"krate":2,"index":7375}},{"span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\datetime.rs","byte_start":299732,"byte_end":299740,"line_start":382,"line_end":382,"column_start":23,"column_end":31},"kind":{"Impl":{"id":82}},"from":{"krate":0,"index":1308},"to":{"krate":2,"index":7375}},{"span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\datetime.rs","byte_start":299940,"byte_end":299948,"line_start":390,"line_end":390,"column_start":23,"column_end":31},"kind":{"Impl":{"id":83}},"from":{"krate":0,"index":1308},"to":{"krate":2,"index":7375}},{"span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\format\\mod.rs","byte_start":321956,"byte_end":321966,"line_start":224,"line_end":224,"column_start":23,"column_end":33},"kind":{"Impl":{"id":84}},"from":{"krate":0,"index":1467},"to":{"krate":2,"index":5928}},{"span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\format\\mod.rs","byte_start":322086,"byte_end":322096,"line_start":230,"line_end":230,"column_start":16,"column_end":26},"kind":{"Impl":{"id":85}},"from":{"krate":0,"index":1467},"to":{"krate":1,"index":1596}},{"span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\format\\parsed.rs","byte_start":339449,"byte_end":339455,"line_start":125,"line_end":125,"column_start":6,"column_end":12},"kind":{"Impl":{"id":86}},"from":{"krate":0,"index":1502},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\format\\strftime.rs","byte_start":440752,"byte_end":440765,"line_start":163,"line_end":163,"column_start":10,"column_end":23},"kind":{"Impl":{"id":87}},"from":{"krate":0,"index":1534},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\format\\strftime.rs","byte_start":441040,"byte_end":441053,"line_start":171,"line_end":171,"column_start":23,"column_end":36},"kind":{"Impl":{"id":88}},"from":{"krate":0,"index":1534},"to":{"krate":2,"index":4723}},{"span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\format\\mod.rs","byte_start":333939,"byte_end":333952,"line_start":461,"line_end":461,"column_start":46,"column_end":59},"kind":{"Impl":{"id":89}},"from":{"krate":0,"index":1550},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\format\\mod.rs","byte_start":334732,"byte_end":334745,"line_start":476,"line_end":476,"column_start":63,"column_end":76},"kind":{"Impl":{"id":90}},"from":{"krate":0,"index":1550},"to":{"krate":2,"index":5928}},{"span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\lib.rs","byte_start":17435,"byte_end":17442,"line_start":399,"line_end":399,"column_start":6,"column_end":13},"kind":{"Impl":{"id":91}},"from":{"krate":0,"index":1559},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\lib.rs","byte_start":21699,"byte_end":21706,"line_start":512,"line_end":512,"column_start":37,"column_end":44},"kind":{"Impl":{"id":92}},"from":{"krate":0,"index":1559},"to":{"krate":17,"index":145}},{"span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\lib.rs","byte_start":22534,"byte_end":22539,"line_start":544,"line_end":544,"column_start":21,"column_end":26},"kind":"SuperTrait","from":{"krate":2,"index":1857},"to":{"krate":0,"index":1105}},{"span":{"file_name":"C:\\Users\\jfawc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.2.25\\src\\lib.rs","byte_start":26364,"byte_end":26369,"line_start":649,"line_end":649,"column_start":21,"column_end":26},"kind":"SuperTrait","from":{"krate":2,"index":1857},"to":{"krate":0,"index":1124}}]}